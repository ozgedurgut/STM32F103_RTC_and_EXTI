
STM32F103_RTC_alarm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000285c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08002968  08002968  00012968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029e4  080029e4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080029e4  080029e4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029e4  080029e4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029e4  080029e4  000129e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029e8  080029e8  000129e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080029ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000058  20000070  08002a5c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08002a5c  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000047e7  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001410  00000000  00000000  00024880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000590  00000000  00000000  00025c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004d8  00000000  00000000  00026220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016fbc  00000000  00000000  000266f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000066a9  00000000  00000000  0003d6b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081f2e  00000000  00000000  00043d5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c5c8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001834  00000000  00000000  000c5cdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002950 	.word	0x08002950

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002950 	.word	0x08002950

0800014c <HAL_RTC_AlarmAEventCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	alarmIsActivated=1;
 8000154:	4b03      	ldr	r3, [pc, #12]	; (8000164 <HAL_RTC_AlarmAEventCallback+0x18>)
 8000156:	2201      	movs	r2, #1
 8000158:	701a      	strb	r2, [r3, #0]
}
 800015a:	bf00      	nop
 800015c:	370c      	adds	r7, #12
 800015e:	46bd      	mov	sp, r7
 8000160:	bc80      	pop	{r7}
 8000162:	4770      	bx	lr
 8000164:	20000095 	.word	0x20000095

08000168 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000168:	b580      	push	{r7, lr}
 800016a:	b082      	sub	sp, #8
 800016c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800016e:	f000 fa0b 	bl	8000588 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000172:	f000 f821 	bl	80001b8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000176:	f000 f8e1 	bl	800033c <MX_GPIO_Init>
	MX_RTC_Init();
 800017a:	f000 f87b 	bl	8000274 <MX_RTC_Init>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800017e:	2200      	movs	r2, #0
 8000180:	4909      	ldr	r1, [pc, #36]	; (80001a8 <main+0x40>)
 8000182:	480a      	ldr	r0, [pc, #40]	; (80001ac <main+0x44>)
 8000184:	f001 fa26 	bl	80015d4 <HAL_RTC_GetTime>
		sprintf(time,"%02d.%02d.%02d",sTime.Hours,sTime.Minutes,sTime.Seconds);
 8000188:	4b07      	ldr	r3, [pc, #28]	; (80001a8 <main+0x40>)
 800018a:	781b      	ldrb	r3, [r3, #0]
 800018c:	461a      	mov	r2, r3
 800018e:	4b06      	ldr	r3, [pc, #24]	; (80001a8 <main+0x40>)
 8000190:	785b      	ldrb	r3, [r3, #1]
 8000192:	4619      	mov	r1, r3
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <main+0x40>)
 8000196:	789b      	ldrb	r3, [r3, #2]
 8000198:	9300      	str	r3, [sp, #0]
 800019a:	460b      	mov	r3, r1
 800019c:	4904      	ldr	r1, [pc, #16]	; (80001b0 <main+0x48>)
 800019e:	4805      	ldr	r0, [pc, #20]	; (80001b4 <main+0x4c>)
 80001a0:	f001 ff5c 	bl	800205c <siprintf>
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80001a4:	e7eb      	b.n	800017e <main+0x16>
 80001a6:	bf00      	nop
 80001a8:	200000ac 	.word	0x200000ac
 80001ac:	20000098 	.word	0x20000098
 80001b0:	08002968 	.word	0x08002968
 80001b4:	2000008c 	.word	0x2000008c

080001b8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b094      	sub	sp, #80	; 0x50
 80001bc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001c2:	2228      	movs	r2, #40	; 0x28
 80001c4:	2100      	movs	r1, #0
 80001c6:	4618      	mov	r0, r3
 80001c8:	f001 ff40 	bl	800204c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001cc:	f107 0314 	add.w	r3, r7, #20
 80001d0:	2200      	movs	r2, #0
 80001d2:	601a      	str	r2, [r3, #0]
 80001d4:	605a      	str	r2, [r3, #4]
 80001d6:	609a      	str	r2, [r3, #8]
 80001d8:	60da      	str	r2, [r3, #12]
 80001da:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001dc:	1d3b      	adds	r3, r7, #4
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	605a      	str	r2, [r3, #4]
 80001e4:	609a      	str	r2, [r3, #8]
 80001e6:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80001e8:	2309      	movs	r3, #9
 80001ea:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001f2:	2300      	movs	r3, #0
 80001f4:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001f6:	2301      	movs	r3, #1
 80001f8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80001fa:	2301      	movs	r3, #1
 80001fc:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001fe:	2302      	movs	r3, #2
 8000200:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000202:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000206:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000208:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800020c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800020e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000212:	4618      	mov	r0, r3
 8000214:	f000 fb34 	bl	8000880 <HAL_RCC_OscConfig>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <SystemClock_Config+0x6a>
	{
		Error_Handler();
 800021e:	f000 f8bb 	bl	8000398 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000222:	230f      	movs	r3, #15
 8000224:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000226:	2302      	movs	r3, #2
 8000228:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800022a:	2300      	movs	r3, #0
 800022c:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800022e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000232:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000234:	2300      	movs	r3, #0
 8000236:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000238:	f107 0314 	add.w	r3, r7, #20
 800023c:	2102      	movs	r1, #2
 800023e:	4618      	mov	r0, r3
 8000240:	f000 fda0 	bl	8000d84 <HAL_RCC_ClockConfig>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d001      	beq.n	800024e <SystemClock_Config+0x96>
	{
		Error_Handler();
 800024a:	f000 f8a5 	bl	8000398 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800024e:	2301      	movs	r3, #1
 8000250:	607b      	str	r3, [r7, #4]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000252:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000256:	60bb      	str	r3, [r7, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000258:	1d3b      	adds	r3, r7, #4
 800025a:	4618      	mov	r0, r3
 800025c:	f000 ff16 	bl	800108c <HAL_RCCEx_PeriphCLKConfig>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <SystemClock_Config+0xb2>
	{
		Error_Handler();
 8000266:	f000 f897 	bl	8000398 <Error_Handler>
	}
}
 800026a:	bf00      	nop
 800026c:	3750      	adds	r7, #80	; 0x50
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
	...

08000274 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b084      	sub	sp, #16
 8000278:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = {0};
 800027a:	f107 030c 	add.w	r3, r7, #12
 800027e:	2100      	movs	r1, #0
 8000280:	460a      	mov	r2, r1
 8000282:	801a      	strh	r2, [r3, #0]
 8000284:	460a      	mov	r2, r1
 8000286:	709a      	strb	r2, [r3, #2]
	RTC_DateTypeDef DateToUpdate = {0};
 8000288:	2300      	movs	r3, #0
 800028a:	60bb      	str	r3, [r7, #8]
	RTC_AlarmTypeDef sAlarm = {0};
 800028c:	463b      	mov	r3, r7
 800028e:	2200      	movs	r2, #0
 8000290:	601a      	str	r2, [r3, #0]
 8000292:	605a      	str	r2, [r3, #4]

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8000294:	4b27      	ldr	r3, [pc, #156]	; (8000334 <MX_RTC_Init+0xc0>)
 8000296:	4a28      	ldr	r2, [pc, #160]	; (8000338 <MX_RTC_Init+0xc4>)
 8000298:	601a      	str	r2, [r3, #0]
	hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800029a:	4b26      	ldr	r3, [pc, #152]	; (8000334 <MX_RTC_Init+0xc0>)
 800029c:	f04f 32ff 	mov.w	r2, #4294967295
 80002a0:	605a      	str	r2, [r3, #4]
	hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80002a2:	4b24      	ldr	r3, [pc, #144]	; (8000334 <MX_RTC_Init+0xc0>)
 80002a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002a8:	609a      	str	r2, [r3, #8]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80002aa:	4822      	ldr	r0, [pc, #136]	; (8000334 <MX_RTC_Init+0xc0>)
 80002ac:	f001 f864 	bl	8001378 <HAL_RTC_Init>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <MX_RTC_Init+0x46>
	{
		Error_Handler();
 80002b6:	f000 f86f 	bl	8000398 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 9;
 80002ba:	2309      	movs	r3, #9
 80002bc:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = 44;
 80002be:	232c      	movs	r3, #44	; 0x2c
 80002c0:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = 0;
 80002c2:	2300      	movs	r3, #0
 80002c4:	73bb      	strb	r3, [r7, #14]

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80002c6:	f107 030c 	add.w	r3, r7, #12
 80002ca:	2200      	movs	r2, #0
 80002cc:	4619      	mov	r1, r3
 80002ce:	4819      	ldr	r0, [pc, #100]	; (8000334 <MX_RTC_Init+0xc0>)
 80002d0:	f001 f8e8 	bl	80014a4 <HAL_RTC_SetTime>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <MX_RTC_Init+0x6a>
	{
		Error_Handler();
 80002da:	f000 f85d 	bl	8000398 <Error_Handler>
	}
	DateToUpdate.WeekDay = RTC_WEEKDAY_THURSDAY;
 80002de:	2304      	movs	r3, #4
 80002e0:	723b      	strb	r3, [r7, #8]
	DateToUpdate.Month = RTC_MONTH_MARCH;
 80002e2:	2303      	movs	r3, #3
 80002e4:	727b      	strb	r3, [r7, #9]
	DateToUpdate.Date = 9;
 80002e6:	2309      	movs	r3, #9
 80002e8:	72bb      	strb	r3, [r7, #10]
	DateToUpdate.Year = 23;
 80002ea:	2317      	movs	r3, #23
 80002ec:	72fb      	strb	r3, [r7, #11]

	if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 80002ee:	f107 0308 	add.w	r3, r7, #8
 80002f2:	2200      	movs	r2, #0
 80002f4:	4619      	mov	r1, r3
 80002f6:	480f      	ldr	r0, [pc, #60]	; (8000334 <MX_RTC_Init+0xc0>)
 80002f8:	f001 fa44 	bl	8001784 <HAL_RTC_SetDate>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <MX_RTC_Init+0x92>
	{
		Error_Handler();
 8000302:	f000 f849 	bl	8000398 <Error_Handler>
	}

	/** Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = 9;
 8000306:	2309      	movs	r3, #9
 8000308:	703b      	strb	r3, [r7, #0]
	sAlarm.AlarmTime.Minutes = 44;
 800030a:	232c      	movs	r3, #44	; 0x2c
 800030c:	707b      	strb	r3, [r7, #1]
	sAlarm.AlarmTime.Seconds = 10;
 800030e:	230a      	movs	r3, #10
 8000310:	70bb      	strb	r3, [r7, #2]
	sAlarm.Alarm = RTC_ALARM_A;
 8000312:	2300      	movs	r3, #0
 8000314:	607b      	str	r3, [r7, #4]
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8000316:	463b      	mov	r3, r7
 8000318:	2200      	movs	r2, #0
 800031a:	4619      	mov	r1, r3
 800031c:	4805      	ldr	r0, [pc, #20]	; (8000334 <MX_RTC_Init+0xc0>)
 800031e:	f001 fae7 	bl	80018f0 <HAL_RTC_SetAlarm_IT>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <MX_RTC_Init+0xb8>
	{
		Error_Handler();
 8000328:	f000 f836 	bl	8000398 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 800032c:	bf00      	nop
 800032e:	3710      	adds	r7, #16
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}
 8000334:	20000098 	.word	0x20000098
 8000338:	40002800 	.word	0x40002800

0800033c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800033c:	b480      	push	{r7}
 800033e:	b085      	sub	sp, #20
 8000340:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000342:	4b14      	ldr	r3, [pc, #80]	; (8000394 <MX_GPIO_Init+0x58>)
 8000344:	699b      	ldr	r3, [r3, #24]
 8000346:	4a13      	ldr	r2, [pc, #76]	; (8000394 <MX_GPIO_Init+0x58>)
 8000348:	f043 0310 	orr.w	r3, r3, #16
 800034c:	6193      	str	r3, [r2, #24]
 800034e:	4b11      	ldr	r3, [pc, #68]	; (8000394 <MX_GPIO_Init+0x58>)
 8000350:	699b      	ldr	r3, [r3, #24]
 8000352:	f003 0310 	and.w	r3, r3, #16
 8000356:	60fb      	str	r3, [r7, #12]
 8000358:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800035a:	4b0e      	ldr	r3, [pc, #56]	; (8000394 <MX_GPIO_Init+0x58>)
 800035c:	699b      	ldr	r3, [r3, #24]
 800035e:	4a0d      	ldr	r2, [pc, #52]	; (8000394 <MX_GPIO_Init+0x58>)
 8000360:	f043 0320 	orr.w	r3, r3, #32
 8000364:	6193      	str	r3, [r2, #24]
 8000366:	4b0b      	ldr	r3, [pc, #44]	; (8000394 <MX_GPIO_Init+0x58>)
 8000368:	699b      	ldr	r3, [r3, #24]
 800036a:	f003 0320 	and.w	r3, r3, #32
 800036e:	60bb      	str	r3, [r7, #8]
 8000370:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000372:	4b08      	ldr	r3, [pc, #32]	; (8000394 <MX_GPIO_Init+0x58>)
 8000374:	699b      	ldr	r3, [r3, #24]
 8000376:	4a07      	ldr	r2, [pc, #28]	; (8000394 <MX_GPIO_Init+0x58>)
 8000378:	f043 0304 	orr.w	r3, r3, #4
 800037c:	6193      	str	r3, [r2, #24]
 800037e:	4b05      	ldr	r3, [pc, #20]	; (8000394 <MX_GPIO_Init+0x58>)
 8000380:	699b      	ldr	r3, [r3, #24]
 8000382:	f003 0304 	and.w	r3, r3, #4
 8000386:	607b      	str	r3, [r7, #4]
 8000388:	687b      	ldr	r3, [r7, #4]

}
 800038a:	bf00      	nop
 800038c:	3714      	adds	r7, #20
 800038e:	46bd      	mov	sp, r7
 8000390:	bc80      	pop	{r7}
 8000392:	4770      	bx	lr
 8000394:	40021000 	.word	0x40021000

08000398 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800039c:	b672      	cpsid	i
}
 800039e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80003a0:	e7fe      	b.n	80003a0 <Error_Handler+0x8>
	...

080003a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b085      	sub	sp, #20
 80003a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003aa:	4b15      	ldr	r3, [pc, #84]	; (8000400 <HAL_MspInit+0x5c>)
 80003ac:	699b      	ldr	r3, [r3, #24]
 80003ae:	4a14      	ldr	r2, [pc, #80]	; (8000400 <HAL_MspInit+0x5c>)
 80003b0:	f043 0301 	orr.w	r3, r3, #1
 80003b4:	6193      	str	r3, [r2, #24]
 80003b6:	4b12      	ldr	r3, [pc, #72]	; (8000400 <HAL_MspInit+0x5c>)
 80003b8:	699b      	ldr	r3, [r3, #24]
 80003ba:	f003 0301 	and.w	r3, r3, #1
 80003be:	60bb      	str	r3, [r7, #8]
 80003c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003c2:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <HAL_MspInit+0x5c>)
 80003c4:	69db      	ldr	r3, [r3, #28]
 80003c6:	4a0e      	ldr	r2, [pc, #56]	; (8000400 <HAL_MspInit+0x5c>)
 80003c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003cc:	61d3      	str	r3, [r2, #28]
 80003ce:	4b0c      	ldr	r3, [pc, #48]	; (8000400 <HAL_MspInit+0x5c>)
 80003d0:	69db      	ldr	r3, [r3, #28]
 80003d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003d6:	607b      	str	r3, [r7, #4]
 80003d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003da:	4b0a      	ldr	r3, [pc, #40]	; (8000404 <HAL_MspInit+0x60>)
 80003dc:	685b      	ldr	r3, [r3, #4]
 80003de:	60fb      	str	r3, [r7, #12]
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003e6:	60fb      	str	r3, [r7, #12]
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003ee:	60fb      	str	r3, [r7, #12]
 80003f0:	4a04      	ldr	r2, [pc, #16]	; (8000404 <HAL_MspInit+0x60>)
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003f6:	bf00      	nop
 80003f8:	3714      	adds	r7, #20
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bc80      	pop	{r7}
 80003fe:	4770      	bx	lr
 8000400:	40021000 	.word	0x40021000
 8000404:	40010000 	.word	0x40010000

08000408 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a0f      	ldr	r2, [pc, #60]	; (8000454 <HAL_RTC_MspInit+0x4c>)
 8000416:	4293      	cmp	r3, r2
 8000418:	d118      	bne.n	800044c <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800041a:	f000 fa25 	bl	8000868 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800041e:	4b0e      	ldr	r3, [pc, #56]	; (8000458 <HAL_RTC_MspInit+0x50>)
 8000420:	69db      	ldr	r3, [r3, #28]
 8000422:	4a0d      	ldr	r2, [pc, #52]	; (8000458 <HAL_RTC_MspInit+0x50>)
 8000424:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000428:	61d3      	str	r3, [r2, #28]
 800042a:	4b0b      	ldr	r3, [pc, #44]	; (8000458 <HAL_RTC_MspInit+0x50>)
 800042c:	69db      	ldr	r3, [r3, #28]
 800042e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000436:	4b09      	ldr	r3, [pc, #36]	; (800045c <HAL_RTC_MspInit+0x54>)
 8000438:	2201      	movs	r2, #1
 800043a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800043c:	2200      	movs	r2, #0
 800043e:	2100      	movs	r1, #0
 8000440:	2029      	movs	r0, #41	; 0x29
 8000442:	f000 f9da 	bl	80007fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000446:	2029      	movs	r0, #41	; 0x29
 8000448:	f000 f9f3 	bl	8000832 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800044c:	bf00      	nop
 800044e:	3710      	adds	r7, #16
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	40002800 	.word	0x40002800
 8000458:	40021000 	.word	0x40021000
 800045c:	4242043c 	.word	0x4242043c

08000460 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000464:	e7fe      	b.n	8000464 <NMI_Handler+0x4>

08000466 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000466:	b480      	push	{r7}
 8000468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800046a:	e7fe      	b.n	800046a <HardFault_Handler+0x4>

0800046c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000470:	e7fe      	b.n	8000470 <MemManage_Handler+0x4>

08000472 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000472:	b480      	push	{r7}
 8000474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000476:	e7fe      	b.n	8000476 <BusFault_Handler+0x4>

08000478 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800047c:	e7fe      	b.n	800047c <UsageFault_Handler+0x4>

0800047e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800047e:	b480      	push	{r7}
 8000480:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000482:	bf00      	nop
 8000484:	46bd      	mov	sp, r7
 8000486:	bc80      	pop	{r7}
 8000488:	4770      	bx	lr

0800048a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800048a:	b480      	push	{r7}
 800048c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800048e:	bf00      	nop
 8000490:	46bd      	mov	sp, r7
 8000492:	bc80      	pop	{r7}
 8000494:	4770      	bx	lr

08000496 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000496:	b480      	push	{r7}
 8000498:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800049a:	bf00      	nop
 800049c:	46bd      	mov	sp, r7
 800049e:	bc80      	pop	{r7}
 80004a0:	4770      	bx	lr

080004a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004a2:	b580      	push	{r7, lr}
 80004a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004a6:	f000 f8b5 	bl	8000614 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004aa:	bf00      	nop
 80004ac:	bd80      	pop	{r7, pc}
	...

080004b0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80004b4:	4802      	ldr	r0, [pc, #8]	; (80004c0 <RTC_Alarm_IRQHandler+0x10>)
 80004b6:	f001 fad3 	bl	8001a60 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80004ba:	bf00      	nop
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	20000098 	.word	0x20000098

080004c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b086      	sub	sp, #24
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004cc:	4a14      	ldr	r2, [pc, #80]	; (8000520 <_sbrk+0x5c>)
 80004ce:	4b15      	ldr	r3, [pc, #84]	; (8000524 <_sbrk+0x60>)
 80004d0:	1ad3      	subs	r3, r2, r3
 80004d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004d4:	697b      	ldr	r3, [r7, #20]
 80004d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004d8:	4b13      	ldr	r3, [pc, #76]	; (8000528 <_sbrk+0x64>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d102      	bne.n	80004e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004e0:	4b11      	ldr	r3, [pc, #68]	; (8000528 <_sbrk+0x64>)
 80004e2:	4a12      	ldr	r2, [pc, #72]	; (800052c <_sbrk+0x68>)
 80004e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004e6:	4b10      	ldr	r3, [pc, #64]	; (8000528 <_sbrk+0x64>)
 80004e8:	681a      	ldr	r2, [r3, #0]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	4413      	add	r3, r2
 80004ee:	693a      	ldr	r2, [r7, #16]
 80004f0:	429a      	cmp	r2, r3
 80004f2:	d207      	bcs.n	8000504 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004f4:	f001 fd80 	bl	8001ff8 <__errno>
 80004f8:	4603      	mov	r3, r0
 80004fa:	220c      	movs	r2, #12
 80004fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000502:	e009      	b.n	8000518 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000504:	4b08      	ldr	r3, [pc, #32]	; (8000528 <_sbrk+0x64>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800050a:	4b07      	ldr	r3, [pc, #28]	; (8000528 <_sbrk+0x64>)
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	4413      	add	r3, r2
 8000512:	4a05      	ldr	r2, [pc, #20]	; (8000528 <_sbrk+0x64>)
 8000514:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000516:	68fb      	ldr	r3, [r7, #12]
}
 8000518:	4618      	mov	r0, r3
 800051a:	3718      	adds	r7, #24
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	20005000 	.word	0x20005000
 8000524:	00000400 	.word	0x00000400
 8000528:	200000b0 	.word	0x200000b0
 800052c:	200000c8 	.word	0x200000c8

08000530 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000534:	bf00      	nop
 8000536:	46bd      	mov	sp, r7
 8000538:	bc80      	pop	{r7}
 800053a:	4770      	bx	lr

0800053c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800053c:	480c      	ldr	r0, [pc, #48]	; (8000570 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800053e:	490d      	ldr	r1, [pc, #52]	; (8000574 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000540:	4a0d      	ldr	r2, [pc, #52]	; (8000578 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000542:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000544:	e002      	b.n	800054c <LoopCopyDataInit>

08000546 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000546:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000548:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800054a:	3304      	adds	r3, #4

0800054c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800054c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800054e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000550:	d3f9      	bcc.n	8000546 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000552:	4a0a      	ldr	r2, [pc, #40]	; (800057c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000554:	4c0a      	ldr	r4, [pc, #40]	; (8000580 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000556:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000558:	e001      	b.n	800055e <LoopFillZerobss>

0800055a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800055a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800055c:	3204      	adds	r2, #4

0800055e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800055e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000560:	d3fb      	bcc.n	800055a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000562:	f7ff ffe5 	bl	8000530 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000566:	f001 fd4d 	bl	8002004 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800056a:	f7ff fdfd 	bl	8000168 <main>
  bx lr
 800056e:	4770      	bx	lr
  ldr r0, =_sdata
 8000570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000574:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000578:	080029ec 	.word	0x080029ec
  ldr r2, =_sbss
 800057c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000580:	200000c8 	.word	0x200000c8

08000584 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000584:	e7fe      	b.n	8000584 <ADC1_2_IRQHandler>
	...

08000588 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <HAL_Init+0x28>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a07      	ldr	r2, [pc, #28]	; (80005b0 <HAL_Init+0x28>)
 8000592:	f043 0310 	orr.w	r3, r3, #16
 8000596:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000598:	2003      	movs	r0, #3
 800059a:	f000 f923 	bl	80007e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800059e:	200f      	movs	r0, #15
 80005a0:	f000 f808 	bl	80005b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005a4:	f7ff fefe 	bl	80003a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005a8:	2300      	movs	r3, #0
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40022000 	.word	0x40022000

080005b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005bc:	4b12      	ldr	r3, [pc, #72]	; (8000608 <HAL_InitTick+0x54>)
 80005be:	681a      	ldr	r2, [r3, #0]
 80005c0:	4b12      	ldr	r3, [pc, #72]	; (800060c <HAL_InitTick+0x58>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	4619      	mov	r1, r3
 80005c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 f93b 	bl	800084e <HAL_SYSTICK_Config>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005de:	2301      	movs	r3, #1
 80005e0:	e00e      	b.n	8000600 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2b0f      	cmp	r3, #15
 80005e6:	d80a      	bhi.n	80005fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005e8:	2200      	movs	r2, #0
 80005ea:	6879      	ldr	r1, [r7, #4]
 80005ec:	f04f 30ff 	mov.w	r0, #4294967295
 80005f0:	f000 f903 	bl	80007fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005f4:	4a06      	ldr	r2, [pc, #24]	; (8000610 <HAL_InitTick+0x5c>)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005fa:	2300      	movs	r3, #0
 80005fc:	e000      	b.n	8000600 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
}
 8000600:	4618      	mov	r0, r3
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000000 	.word	0x20000000
 800060c:	20000008 	.word	0x20000008
 8000610:	20000004 	.word	0x20000004

08000614 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000618:	4b05      	ldr	r3, [pc, #20]	; (8000630 <HAL_IncTick+0x1c>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	461a      	mov	r2, r3
 800061e:	4b05      	ldr	r3, [pc, #20]	; (8000634 <HAL_IncTick+0x20>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4413      	add	r3, r2
 8000624:	4a03      	ldr	r2, [pc, #12]	; (8000634 <HAL_IncTick+0x20>)
 8000626:	6013      	str	r3, [r2, #0]
}
 8000628:	bf00      	nop
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr
 8000630:	20000008 	.word	0x20000008
 8000634:	200000b4 	.word	0x200000b4

08000638 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  return uwTick;
 800063c:	4b02      	ldr	r3, [pc, #8]	; (8000648 <HAL_GetTick+0x10>)
 800063e:	681b      	ldr	r3, [r3, #0]
}
 8000640:	4618      	mov	r0, r3
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr
 8000648:	200000b4 	.word	0x200000b4

0800064c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800064c:	b480      	push	{r7}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	f003 0307 	and.w	r3, r3, #7
 800065a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800065c:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <__NVIC_SetPriorityGrouping+0x44>)
 800065e:	68db      	ldr	r3, [r3, #12]
 8000660:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000662:	68ba      	ldr	r2, [r7, #8]
 8000664:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000668:	4013      	ands	r3, r2
 800066a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000674:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800067c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800067e:	4a04      	ldr	r2, [pc, #16]	; (8000690 <__NVIC_SetPriorityGrouping+0x44>)
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	60d3      	str	r3, [r2, #12]
}
 8000684:	bf00      	nop
 8000686:	3714      	adds	r7, #20
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	e000ed00 	.word	0xe000ed00

08000694 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000698:	4b04      	ldr	r3, [pc, #16]	; (80006ac <__NVIC_GetPriorityGrouping+0x18>)
 800069a:	68db      	ldr	r3, [r3, #12]
 800069c:	0a1b      	lsrs	r3, r3, #8
 800069e:	f003 0307 	and.w	r3, r3, #7
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bc80      	pop	{r7}
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	e000ed00 	.word	0xe000ed00

080006b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	db0b      	blt.n	80006da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	f003 021f 	and.w	r2, r3, #31
 80006c8:	4906      	ldr	r1, [pc, #24]	; (80006e4 <__NVIC_EnableIRQ+0x34>)
 80006ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ce:	095b      	lsrs	r3, r3, #5
 80006d0:	2001      	movs	r0, #1
 80006d2:	fa00 f202 	lsl.w	r2, r0, r2
 80006d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006da:	bf00      	nop
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr
 80006e4:	e000e100 	.word	0xe000e100

080006e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	6039      	str	r1, [r7, #0]
 80006f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	db0a      	blt.n	8000712 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	490c      	ldr	r1, [pc, #48]	; (8000734 <__NVIC_SetPriority+0x4c>)
 8000702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000706:	0112      	lsls	r2, r2, #4
 8000708:	b2d2      	uxtb	r2, r2
 800070a:	440b      	add	r3, r1
 800070c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000710:	e00a      	b.n	8000728 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	b2da      	uxtb	r2, r3
 8000716:	4908      	ldr	r1, [pc, #32]	; (8000738 <__NVIC_SetPriority+0x50>)
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	f003 030f 	and.w	r3, r3, #15
 800071e:	3b04      	subs	r3, #4
 8000720:	0112      	lsls	r2, r2, #4
 8000722:	b2d2      	uxtb	r2, r2
 8000724:	440b      	add	r3, r1
 8000726:	761a      	strb	r2, [r3, #24]
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	bc80      	pop	{r7}
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	e000e100 	.word	0xe000e100
 8000738:	e000ed00 	.word	0xe000ed00

0800073c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800073c:	b480      	push	{r7}
 800073e:	b089      	sub	sp, #36	; 0x24
 8000740:	af00      	add	r7, sp, #0
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	60b9      	str	r1, [r7, #8]
 8000746:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	f003 0307 	and.w	r3, r3, #7
 800074e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000750:	69fb      	ldr	r3, [r7, #28]
 8000752:	f1c3 0307 	rsb	r3, r3, #7
 8000756:	2b04      	cmp	r3, #4
 8000758:	bf28      	it	cs
 800075a:	2304      	movcs	r3, #4
 800075c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	3304      	adds	r3, #4
 8000762:	2b06      	cmp	r3, #6
 8000764:	d902      	bls.n	800076c <NVIC_EncodePriority+0x30>
 8000766:	69fb      	ldr	r3, [r7, #28]
 8000768:	3b03      	subs	r3, #3
 800076a:	e000      	b.n	800076e <NVIC_EncodePriority+0x32>
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000770:	f04f 32ff 	mov.w	r2, #4294967295
 8000774:	69bb      	ldr	r3, [r7, #24]
 8000776:	fa02 f303 	lsl.w	r3, r2, r3
 800077a:	43da      	mvns	r2, r3
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	401a      	ands	r2, r3
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000784:	f04f 31ff 	mov.w	r1, #4294967295
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	fa01 f303 	lsl.w	r3, r1, r3
 800078e:	43d9      	mvns	r1, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000794:	4313      	orrs	r3, r2
         );
}
 8000796:	4618      	mov	r0, r3
 8000798:	3724      	adds	r7, #36	; 0x24
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr

080007a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	3b01      	subs	r3, #1
 80007ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007b0:	d301      	bcc.n	80007b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007b2:	2301      	movs	r3, #1
 80007b4:	e00f      	b.n	80007d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007b6:	4a0a      	ldr	r2, [pc, #40]	; (80007e0 <SysTick_Config+0x40>)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	3b01      	subs	r3, #1
 80007bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007be:	210f      	movs	r1, #15
 80007c0:	f04f 30ff 	mov.w	r0, #4294967295
 80007c4:	f7ff ff90 	bl	80006e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007c8:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <SysTick_Config+0x40>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ce:	4b04      	ldr	r3, [pc, #16]	; (80007e0 <SysTick_Config+0x40>)
 80007d0:	2207      	movs	r2, #7
 80007d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007d4:	2300      	movs	r3, #0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	e000e010 	.word	0xe000e010

080007e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f7ff ff2d 	bl	800064c <__NVIC_SetPriorityGrouping>
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b086      	sub	sp, #24
 80007fe:	af00      	add	r7, sp, #0
 8000800:	4603      	mov	r3, r0
 8000802:	60b9      	str	r1, [r7, #8]
 8000804:	607a      	str	r2, [r7, #4]
 8000806:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800080c:	f7ff ff42 	bl	8000694 <__NVIC_GetPriorityGrouping>
 8000810:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	68b9      	ldr	r1, [r7, #8]
 8000816:	6978      	ldr	r0, [r7, #20]
 8000818:	f7ff ff90 	bl	800073c <NVIC_EncodePriority>
 800081c:	4602      	mov	r2, r0
 800081e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000822:	4611      	mov	r1, r2
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff ff5f 	bl	80006e8 <__NVIC_SetPriority>
}
 800082a:	bf00      	nop
 800082c:	3718      	adds	r7, #24
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	b082      	sub	sp, #8
 8000836:	af00      	add	r7, sp, #0
 8000838:	4603      	mov	r3, r0
 800083a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800083c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff ff35 	bl	80006b0 <__NVIC_EnableIRQ>
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	b082      	sub	sp, #8
 8000852:	af00      	add	r7, sp, #0
 8000854:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000856:	6878      	ldr	r0, [r7, #4]
 8000858:	f7ff ffa2 	bl	80007a0 <SysTick_Config>
 800085c:	4603      	mov	r3, r0
}
 800085e:	4618      	mov	r0, r3
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800086c:	4b03      	ldr	r3, [pc, #12]	; (800087c <HAL_PWR_EnableBkUpAccess+0x14>)
 800086e:	2201      	movs	r2, #1
 8000870:	601a      	str	r2, [r3, #0]
}
 8000872:	bf00      	nop
 8000874:	46bd      	mov	sp, r7
 8000876:	bc80      	pop	{r7}
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	420e0020 	.word	0x420e0020

08000880 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b086      	sub	sp, #24
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d101      	bne.n	8000892 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800088e:	2301      	movs	r3, #1
 8000890:	e272      	b.n	8000d78 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	2b00      	cmp	r3, #0
 800089c:	f000 8087 	beq.w	80009ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80008a0:	4b92      	ldr	r3, [pc, #584]	; (8000aec <HAL_RCC_OscConfig+0x26c>)
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	f003 030c 	and.w	r3, r3, #12
 80008a8:	2b04      	cmp	r3, #4
 80008aa:	d00c      	beq.n	80008c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80008ac:	4b8f      	ldr	r3, [pc, #572]	; (8000aec <HAL_RCC_OscConfig+0x26c>)
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	f003 030c 	and.w	r3, r3, #12
 80008b4:	2b08      	cmp	r3, #8
 80008b6:	d112      	bne.n	80008de <HAL_RCC_OscConfig+0x5e>
 80008b8:	4b8c      	ldr	r3, [pc, #560]	; (8000aec <HAL_RCC_OscConfig+0x26c>)
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008c4:	d10b      	bne.n	80008de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008c6:	4b89      	ldr	r3, [pc, #548]	; (8000aec <HAL_RCC_OscConfig+0x26c>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d06c      	beq.n	80009ac <HAL_RCC_OscConfig+0x12c>
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d168      	bne.n	80009ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80008da:	2301      	movs	r3, #1
 80008dc:	e24c      	b.n	8000d78 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008e6:	d106      	bne.n	80008f6 <HAL_RCC_OscConfig+0x76>
 80008e8:	4b80      	ldr	r3, [pc, #512]	; (8000aec <HAL_RCC_OscConfig+0x26c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a7f      	ldr	r2, [pc, #508]	; (8000aec <HAL_RCC_OscConfig+0x26c>)
 80008ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008f2:	6013      	str	r3, [r2, #0]
 80008f4:	e02e      	b.n	8000954 <HAL_RCC_OscConfig+0xd4>
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d10c      	bne.n	8000918 <HAL_RCC_OscConfig+0x98>
 80008fe:	4b7b      	ldr	r3, [pc, #492]	; (8000aec <HAL_RCC_OscConfig+0x26c>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4a7a      	ldr	r2, [pc, #488]	; (8000aec <HAL_RCC_OscConfig+0x26c>)
 8000904:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000908:	6013      	str	r3, [r2, #0]
 800090a:	4b78      	ldr	r3, [pc, #480]	; (8000aec <HAL_RCC_OscConfig+0x26c>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4a77      	ldr	r2, [pc, #476]	; (8000aec <HAL_RCC_OscConfig+0x26c>)
 8000910:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000914:	6013      	str	r3, [r2, #0]
 8000916:	e01d      	b.n	8000954 <HAL_RCC_OscConfig+0xd4>
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000920:	d10c      	bne.n	800093c <HAL_RCC_OscConfig+0xbc>
 8000922:	4b72      	ldr	r3, [pc, #456]	; (8000aec <HAL_RCC_OscConfig+0x26c>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a71      	ldr	r2, [pc, #452]	; (8000aec <HAL_RCC_OscConfig+0x26c>)
 8000928:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800092c:	6013      	str	r3, [r2, #0]
 800092e:	4b6f      	ldr	r3, [pc, #444]	; (8000aec <HAL_RCC_OscConfig+0x26c>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a6e      	ldr	r2, [pc, #440]	; (8000aec <HAL_RCC_OscConfig+0x26c>)
 8000934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000938:	6013      	str	r3, [r2, #0]
 800093a:	e00b      	b.n	8000954 <HAL_RCC_OscConfig+0xd4>
 800093c:	4b6b      	ldr	r3, [pc, #428]	; (8000aec <HAL_RCC_OscConfig+0x26c>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a6a      	ldr	r2, [pc, #424]	; (8000aec <HAL_RCC_OscConfig+0x26c>)
 8000942:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000946:	6013      	str	r3, [r2, #0]
 8000948:	4b68      	ldr	r3, [pc, #416]	; (8000aec <HAL_RCC_OscConfig+0x26c>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a67      	ldr	r2, [pc, #412]	; (8000aec <HAL_RCC_OscConfig+0x26c>)
 800094e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000952:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d013      	beq.n	8000984 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800095c:	f7ff fe6c 	bl	8000638 <HAL_GetTick>
 8000960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000962:	e008      	b.n	8000976 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000964:	f7ff fe68 	bl	8000638 <HAL_GetTick>
 8000968:	4602      	mov	r2, r0
 800096a:	693b      	ldr	r3, [r7, #16]
 800096c:	1ad3      	subs	r3, r2, r3
 800096e:	2b64      	cmp	r3, #100	; 0x64
 8000970:	d901      	bls.n	8000976 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000972:	2303      	movs	r3, #3
 8000974:	e200      	b.n	8000d78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000976:	4b5d      	ldr	r3, [pc, #372]	; (8000aec <HAL_RCC_OscConfig+0x26c>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800097e:	2b00      	cmp	r3, #0
 8000980:	d0f0      	beq.n	8000964 <HAL_RCC_OscConfig+0xe4>
 8000982:	e014      	b.n	80009ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000984:	f7ff fe58 	bl	8000638 <HAL_GetTick>
 8000988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800098a:	e008      	b.n	800099e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800098c:	f7ff fe54 	bl	8000638 <HAL_GetTick>
 8000990:	4602      	mov	r2, r0
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	2b64      	cmp	r3, #100	; 0x64
 8000998:	d901      	bls.n	800099e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800099a:	2303      	movs	r3, #3
 800099c:	e1ec      	b.n	8000d78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800099e:	4b53      	ldr	r3, [pc, #332]	; (8000aec <HAL_RCC_OscConfig+0x26c>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d1f0      	bne.n	800098c <HAL_RCC_OscConfig+0x10c>
 80009aa:	e000      	b.n	80009ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f003 0302 	and.w	r3, r3, #2
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d063      	beq.n	8000a82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80009ba:	4b4c      	ldr	r3, [pc, #304]	; (8000aec <HAL_RCC_OscConfig+0x26c>)
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	f003 030c 	and.w	r3, r3, #12
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d00b      	beq.n	80009de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80009c6:	4b49      	ldr	r3, [pc, #292]	; (8000aec <HAL_RCC_OscConfig+0x26c>)
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	f003 030c 	and.w	r3, r3, #12
 80009ce:	2b08      	cmp	r3, #8
 80009d0:	d11c      	bne.n	8000a0c <HAL_RCC_OscConfig+0x18c>
 80009d2:	4b46      	ldr	r3, [pc, #280]	; (8000aec <HAL_RCC_OscConfig+0x26c>)
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d116      	bne.n	8000a0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009de:	4b43      	ldr	r3, [pc, #268]	; (8000aec <HAL_RCC_OscConfig+0x26c>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f003 0302 	and.w	r3, r3, #2
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d005      	beq.n	80009f6 <HAL_RCC_OscConfig+0x176>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	691b      	ldr	r3, [r3, #16]
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d001      	beq.n	80009f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
 80009f4:	e1c0      	b.n	8000d78 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009f6:	4b3d      	ldr	r3, [pc, #244]	; (8000aec <HAL_RCC_OscConfig+0x26c>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	695b      	ldr	r3, [r3, #20]
 8000a02:	00db      	lsls	r3, r3, #3
 8000a04:	4939      	ldr	r1, [pc, #228]	; (8000aec <HAL_RCC_OscConfig+0x26c>)
 8000a06:	4313      	orrs	r3, r2
 8000a08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a0a:	e03a      	b.n	8000a82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	691b      	ldr	r3, [r3, #16]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d020      	beq.n	8000a56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000a14:	4b36      	ldr	r3, [pc, #216]	; (8000af0 <HAL_RCC_OscConfig+0x270>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a1a:	f7ff fe0d 	bl	8000638 <HAL_GetTick>
 8000a1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a20:	e008      	b.n	8000a34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000a22:	f7ff fe09 	bl	8000638 <HAL_GetTick>
 8000a26:	4602      	mov	r2, r0
 8000a28:	693b      	ldr	r3, [r7, #16]
 8000a2a:	1ad3      	subs	r3, r2, r3
 8000a2c:	2b02      	cmp	r3, #2
 8000a2e:	d901      	bls.n	8000a34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000a30:	2303      	movs	r3, #3
 8000a32:	e1a1      	b.n	8000d78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a34:	4b2d      	ldr	r3, [pc, #180]	; (8000aec <HAL_RCC_OscConfig+0x26c>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f003 0302 	and.w	r3, r3, #2
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d0f0      	beq.n	8000a22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a40:	4b2a      	ldr	r3, [pc, #168]	; (8000aec <HAL_RCC_OscConfig+0x26c>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	695b      	ldr	r3, [r3, #20]
 8000a4c:	00db      	lsls	r3, r3, #3
 8000a4e:	4927      	ldr	r1, [pc, #156]	; (8000aec <HAL_RCC_OscConfig+0x26c>)
 8000a50:	4313      	orrs	r3, r2
 8000a52:	600b      	str	r3, [r1, #0]
 8000a54:	e015      	b.n	8000a82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000a56:	4b26      	ldr	r3, [pc, #152]	; (8000af0 <HAL_RCC_OscConfig+0x270>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a5c:	f7ff fdec 	bl	8000638 <HAL_GetTick>
 8000a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a62:	e008      	b.n	8000a76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000a64:	f7ff fde8 	bl	8000638 <HAL_GetTick>
 8000a68:	4602      	mov	r2, r0
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	1ad3      	subs	r3, r2, r3
 8000a6e:	2b02      	cmp	r3, #2
 8000a70:	d901      	bls.n	8000a76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000a72:	2303      	movs	r3, #3
 8000a74:	e180      	b.n	8000d78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a76:	4b1d      	ldr	r3, [pc, #116]	; (8000aec <HAL_RCC_OscConfig+0x26c>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f003 0302 	and.w	r3, r3, #2
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d1f0      	bne.n	8000a64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f003 0308 	and.w	r3, r3, #8
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d03a      	beq.n	8000b04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	699b      	ldr	r3, [r3, #24]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d019      	beq.n	8000aca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000a96:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <HAL_RCC_OscConfig+0x274>)
 8000a98:	2201      	movs	r2, #1
 8000a9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a9c:	f7ff fdcc 	bl	8000638 <HAL_GetTick>
 8000aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000aa2:	e008      	b.n	8000ab6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000aa4:	f7ff fdc8 	bl	8000638 <HAL_GetTick>
 8000aa8:	4602      	mov	r2, r0
 8000aaa:	693b      	ldr	r3, [r7, #16]
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	2b02      	cmp	r3, #2
 8000ab0:	d901      	bls.n	8000ab6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	e160      	b.n	8000d78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ab6:	4b0d      	ldr	r3, [pc, #52]	; (8000aec <HAL_RCC_OscConfig+0x26c>)
 8000ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aba:	f003 0302 	and.w	r3, r3, #2
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d0f0      	beq.n	8000aa4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000ac2:	2001      	movs	r0, #1
 8000ac4:	f000 fac4 	bl	8001050 <RCC_Delay>
 8000ac8:	e01c      	b.n	8000b04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000aca:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <HAL_RCC_OscConfig+0x274>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ad0:	f7ff fdb2 	bl	8000638 <HAL_GetTick>
 8000ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ad6:	e00f      	b.n	8000af8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ad8:	f7ff fdae 	bl	8000638 <HAL_GetTick>
 8000adc:	4602      	mov	r2, r0
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	1ad3      	subs	r3, r2, r3
 8000ae2:	2b02      	cmp	r3, #2
 8000ae4:	d908      	bls.n	8000af8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	e146      	b.n	8000d78 <HAL_RCC_OscConfig+0x4f8>
 8000aea:	bf00      	nop
 8000aec:	40021000 	.word	0x40021000
 8000af0:	42420000 	.word	0x42420000
 8000af4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000af8:	4b92      	ldr	r3, [pc, #584]	; (8000d44 <HAL_RCC_OscConfig+0x4c4>)
 8000afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000afc:	f003 0302 	and.w	r3, r3, #2
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d1e9      	bne.n	8000ad8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f003 0304 	and.w	r3, r3, #4
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	f000 80a6 	beq.w	8000c5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000b12:	2300      	movs	r3, #0
 8000b14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b16:	4b8b      	ldr	r3, [pc, #556]	; (8000d44 <HAL_RCC_OscConfig+0x4c4>)
 8000b18:	69db      	ldr	r3, [r3, #28]
 8000b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d10d      	bne.n	8000b3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b22:	4b88      	ldr	r3, [pc, #544]	; (8000d44 <HAL_RCC_OscConfig+0x4c4>)
 8000b24:	69db      	ldr	r3, [r3, #28]
 8000b26:	4a87      	ldr	r2, [pc, #540]	; (8000d44 <HAL_RCC_OscConfig+0x4c4>)
 8000b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b2c:	61d3      	str	r3, [r2, #28]
 8000b2e:	4b85      	ldr	r3, [pc, #532]	; (8000d44 <HAL_RCC_OscConfig+0x4c4>)
 8000b30:	69db      	ldr	r3, [r3, #28]
 8000b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b36:	60bb      	str	r3, [r7, #8]
 8000b38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b3e:	4b82      	ldr	r3, [pc, #520]	; (8000d48 <HAL_RCC_OscConfig+0x4c8>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d118      	bne.n	8000b7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b4a:	4b7f      	ldr	r3, [pc, #508]	; (8000d48 <HAL_RCC_OscConfig+0x4c8>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a7e      	ldr	r2, [pc, #504]	; (8000d48 <HAL_RCC_OscConfig+0x4c8>)
 8000b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000b56:	f7ff fd6f 	bl	8000638 <HAL_GetTick>
 8000b5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b5c:	e008      	b.n	8000b70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b5e:	f7ff fd6b 	bl	8000638 <HAL_GetTick>
 8000b62:	4602      	mov	r2, r0
 8000b64:	693b      	ldr	r3, [r7, #16]
 8000b66:	1ad3      	subs	r3, r2, r3
 8000b68:	2b64      	cmp	r3, #100	; 0x64
 8000b6a:	d901      	bls.n	8000b70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	e103      	b.n	8000d78 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b70:	4b75      	ldr	r3, [pc, #468]	; (8000d48 <HAL_RCC_OscConfig+0x4c8>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d0f0      	beq.n	8000b5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d106      	bne.n	8000b92 <HAL_RCC_OscConfig+0x312>
 8000b84:	4b6f      	ldr	r3, [pc, #444]	; (8000d44 <HAL_RCC_OscConfig+0x4c4>)
 8000b86:	6a1b      	ldr	r3, [r3, #32]
 8000b88:	4a6e      	ldr	r2, [pc, #440]	; (8000d44 <HAL_RCC_OscConfig+0x4c4>)
 8000b8a:	f043 0301 	orr.w	r3, r3, #1
 8000b8e:	6213      	str	r3, [r2, #32]
 8000b90:	e02d      	b.n	8000bee <HAL_RCC_OscConfig+0x36e>
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	68db      	ldr	r3, [r3, #12]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d10c      	bne.n	8000bb4 <HAL_RCC_OscConfig+0x334>
 8000b9a:	4b6a      	ldr	r3, [pc, #424]	; (8000d44 <HAL_RCC_OscConfig+0x4c4>)
 8000b9c:	6a1b      	ldr	r3, [r3, #32]
 8000b9e:	4a69      	ldr	r2, [pc, #420]	; (8000d44 <HAL_RCC_OscConfig+0x4c4>)
 8000ba0:	f023 0301 	bic.w	r3, r3, #1
 8000ba4:	6213      	str	r3, [r2, #32]
 8000ba6:	4b67      	ldr	r3, [pc, #412]	; (8000d44 <HAL_RCC_OscConfig+0x4c4>)
 8000ba8:	6a1b      	ldr	r3, [r3, #32]
 8000baa:	4a66      	ldr	r2, [pc, #408]	; (8000d44 <HAL_RCC_OscConfig+0x4c4>)
 8000bac:	f023 0304 	bic.w	r3, r3, #4
 8000bb0:	6213      	str	r3, [r2, #32]
 8000bb2:	e01c      	b.n	8000bee <HAL_RCC_OscConfig+0x36e>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	2b05      	cmp	r3, #5
 8000bba:	d10c      	bne.n	8000bd6 <HAL_RCC_OscConfig+0x356>
 8000bbc:	4b61      	ldr	r3, [pc, #388]	; (8000d44 <HAL_RCC_OscConfig+0x4c4>)
 8000bbe:	6a1b      	ldr	r3, [r3, #32]
 8000bc0:	4a60      	ldr	r2, [pc, #384]	; (8000d44 <HAL_RCC_OscConfig+0x4c4>)
 8000bc2:	f043 0304 	orr.w	r3, r3, #4
 8000bc6:	6213      	str	r3, [r2, #32]
 8000bc8:	4b5e      	ldr	r3, [pc, #376]	; (8000d44 <HAL_RCC_OscConfig+0x4c4>)
 8000bca:	6a1b      	ldr	r3, [r3, #32]
 8000bcc:	4a5d      	ldr	r2, [pc, #372]	; (8000d44 <HAL_RCC_OscConfig+0x4c4>)
 8000bce:	f043 0301 	orr.w	r3, r3, #1
 8000bd2:	6213      	str	r3, [r2, #32]
 8000bd4:	e00b      	b.n	8000bee <HAL_RCC_OscConfig+0x36e>
 8000bd6:	4b5b      	ldr	r3, [pc, #364]	; (8000d44 <HAL_RCC_OscConfig+0x4c4>)
 8000bd8:	6a1b      	ldr	r3, [r3, #32]
 8000bda:	4a5a      	ldr	r2, [pc, #360]	; (8000d44 <HAL_RCC_OscConfig+0x4c4>)
 8000bdc:	f023 0301 	bic.w	r3, r3, #1
 8000be0:	6213      	str	r3, [r2, #32]
 8000be2:	4b58      	ldr	r3, [pc, #352]	; (8000d44 <HAL_RCC_OscConfig+0x4c4>)
 8000be4:	6a1b      	ldr	r3, [r3, #32]
 8000be6:	4a57      	ldr	r2, [pc, #348]	; (8000d44 <HAL_RCC_OscConfig+0x4c4>)
 8000be8:	f023 0304 	bic.w	r3, r3, #4
 8000bec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	68db      	ldr	r3, [r3, #12]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d015      	beq.n	8000c22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bf6:	f7ff fd1f 	bl	8000638 <HAL_GetTick>
 8000bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bfc:	e00a      	b.n	8000c14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000bfe:	f7ff fd1b 	bl	8000638 <HAL_GetTick>
 8000c02:	4602      	mov	r2, r0
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	1ad3      	subs	r3, r2, r3
 8000c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d901      	bls.n	8000c14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000c10:	2303      	movs	r3, #3
 8000c12:	e0b1      	b.n	8000d78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c14:	4b4b      	ldr	r3, [pc, #300]	; (8000d44 <HAL_RCC_OscConfig+0x4c4>)
 8000c16:	6a1b      	ldr	r3, [r3, #32]
 8000c18:	f003 0302 	and.w	r3, r3, #2
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d0ee      	beq.n	8000bfe <HAL_RCC_OscConfig+0x37e>
 8000c20:	e014      	b.n	8000c4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c22:	f7ff fd09 	bl	8000638 <HAL_GetTick>
 8000c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c28:	e00a      	b.n	8000c40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c2a:	f7ff fd05 	bl	8000638 <HAL_GetTick>
 8000c2e:	4602      	mov	r2, r0
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	1ad3      	subs	r3, r2, r3
 8000c34:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d901      	bls.n	8000c40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	e09b      	b.n	8000d78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c40:	4b40      	ldr	r3, [pc, #256]	; (8000d44 <HAL_RCC_OscConfig+0x4c4>)
 8000c42:	6a1b      	ldr	r3, [r3, #32]
 8000c44:	f003 0302 	and.w	r3, r3, #2
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d1ee      	bne.n	8000c2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000c4c:	7dfb      	ldrb	r3, [r7, #23]
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d105      	bne.n	8000c5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c52:	4b3c      	ldr	r3, [pc, #240]	; (8000d44 <HAL_RCC_OscConfig+0x4c4>)
 8000c54:	69db      	ldr	r3, [r3, #28]
 8000c56:	4a3b      	ldr	r2, [pc, #236]	; (8000d44 <HAL_RCC_OscConfig+0x4c4>)
 8000c58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	69db      	ldr	r3, [r3, #28]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	f000 8087 	beq.w	8000d76 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c68:	4b36      	ldr	r3, [pc, #216]	; (8000d44 <HAL_RCC_OscConfig+0x4c4>)
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f003 030c 	and.w	r3, r3, #12
 8000c70:	2b08      	cmp	r3, #8
 8000c72:	d061      	beq.n	8000d38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	69db      	ldr	r3, [r3, #28]
 8000c78:	2b02      	cmp	r3, #2
 8000c7a:	d146      	bne.n	8000d0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c7c:	4b33      	ldr	r3, [pc, #204]	; (8000d4c <HAL_RCC_OscConfig+0x4cc>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c82:	f7ff fcd9 	bl	8000638 <HAL_GetTick>
 8000c86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c88:	e008      	b.n	8000c9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c8a:	f7ff fcd5 	bl	8000638 <HAL_GetTick>
 8000c8e:	4602      	mov	r2, r0
 8000c90:	693b      	ldr	r3, [r7, #16]
 8000c92:	1ad3      	subs	r3, r2, r3
 8000c94:	2b02      	cmp	r3, #2
 8000c96:	d901      	bls.n	8000c9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	e06d      	b.n	8000d78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c9c:	4b29      	ldr	r3, [pc, #164]	; (8000d44 <HAL_RCC_OscConfig+0x4c4>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d1f0      	bne.n	8000c8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6a1b      	ldr	r3, [r3, #32]
 8000cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cb0:	d108      	bne.n	8000cc4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000cb2:	4b24      	ldr	r3, [pc, #144]	; (8000d44 <HAL_RCC_OscConfig+0x4c4>)
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	4921      	ldr	r1, [pc, #132]	; (8000d44 <HAL_RCC_OscConfig+0x4c4>)
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000cc4:	4b1f      	ldr	r3, [pc, #124]	; (8000d44 <HAL_RCC_OscConfig+0x4c4>)
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6a19      	ldr	r1, [r3, #32]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd4:	430b      	orrs	r3, r1
 8000cd6:	491b      	ldr	r1, [pc, #108]	; (8000d44 <HAL_RCC_OscConfig+0x4c4>)
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000cdc:	4b1b      	ldr	r3, [pc, #108]	; (8000d4c <HAL_RCC_OscConfig+0x4cc>)
 8000cde:	2201      	movs	r2, #1
 8000ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ce2:	f7ff fca9 	bl	8000638 <HAL_GetTick>
 8000ce6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ce8:	e008      	b.n	8000cfc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000cea:	f7ff fca5 	bl	8000638 <HAL_GetTick>
 8000cee:	4602      	mov	r2, r0
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	1ad3      	subs	r3, r2, r3
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d901      	bls.n	8000cfc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	e03d      	b.n	8000d78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000cfc:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <HAL_RCC_OscConfig+0x4c4>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d0f0      	beq.n	8000cea <HAL_RCC_OscConfig+0x46a>
 8000d08:	e035      	b.n	8000d76 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d0a:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <HAL_RCC_OscConfig+0x4cc>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d10:	f7ff fc92 	bl	8000638 <HAL_GetTick>
 8000d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d16:	e008      	b.n	8000d2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d18:	f7ff fc8e 	bl	8000638 <HAL_GetTick>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	d901      	bls.n	8000d2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000d26:	2303      	movs	r3, #3
 8000d28:	e026      	b.n	8000d78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <HAL_RCC_OscConfig+0x4c4>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d1f0      	bne.n	8000d18 <HAL_RCC_OscConfig+0x498>
 8000d36:	e01e      	b.n	8000d76 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	69db      	ldr	r3, [r3, #28]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d107      	bne.n	8000d50 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000d40:	2301      	movs	r3, #1
 8000d42:	e019      	b.n	8000d78 <HAL_RCC_OscConfig+0x4f8>
 8000d44:	40021000 	.word	0x40021000
 8000d48:	40007000 	.word	0x40007000
 8000d4c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000d50:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <HAL_RCC_OscConfig+0x500>)
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6a1b      	ldr	r3, [r3, #32]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d106      	bne.n	8000d72 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d001      	beq.n	8000d76 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e000      	b.n	8000d78 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000d76:	2300      	movs	r3, #0
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3718      	adds	r7, #24
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40021000 	.word	0x40021000

08000d84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d101      	bne.n	8000d98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000d94:	2301      	movs	r3, #1
 8000d96:	e0d0      	b.n	8000f3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000d98:	4b6a      	ldr	r3, [pc, #424]	; (8000f44 <HAL_RCC_ClockConfig+0x1c0>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f003 0307 	and.w	r3, r3, #7
 8000da0:	683a      	ldr	r2, [r7, #0]
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d910      	bls.n	8000dc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000da6:	4b67      	ldr	r3, [pc, #412]	; (8000f44 <HAL_RCC_ClockConfig+0x1c0>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f023 0207 	bic.w	r2, r3, #7
 8000dae:	4965      	ldr	r1, [pc, #404]	; (8000f44 <HAL_RCC_ClockConfig+0x1c0>)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000db6:	4b63      	ldr	r3, [pc, #396]	; (8000f44 <HAL_RCC_ClockConfig+0x1c0>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	683a      	ldr	r2, [r7, #0]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d001      	beq.n	8000dc8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	e0b8      	b.n	8000f3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f003 0302 	and.w	r3, r3, #2
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d020      	beq.n	8000e16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f003 0304 	and.w	r3, r3, #4
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d005      	beq.n	8000dec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000de0:	4b59      	ldr	r3, [pc, #356]	; (8000f48 <HAL_RCC_ClockConfig+0x1c4>)
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	4a58      	ldr	r2, [pc, #352]	; (8000f48 <HAL_RCC_ClockConfig+0x1c4>)
 8000de6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000dea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f003 0308 	and.w	r3, r3, #8
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d005      	beq.n	8000e04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000df8:	4b53      	ldr	r3, [pc, #332]	; (8000f48 <HAL_RCC_ClockConfig+0x1c4>)
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	4a52      	ldr	r2, [pc, #328]	; (8000f48 <HAL_RCC_ClockConfig+0x1c4>)
 8000dfe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000e02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e04:	4b50      	ldr	r3, [pc, #320]	; (8000f48 <HAL_RCC_ClockConfig+0x1c4>)
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	494d      	ldr	r1, [pc, #308]	; (8000f48 <HAL_RCC_ClockConfig+0x1c4>)
 8000e12:	4313      	orrs	r3, r2
 8000e14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d040      	beq.n	8000ea4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d107      	bne.n	8000e3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e2a:	4b47      	ldr	r3, [pc, #284]	; (8000f48 <HAL_RCC_ClockConfig+0x1c4>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d115      	bne.n	8000e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e07f      	b.n	8000f3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	d107      	bne.n	8000e52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e42:	4b41      	ldr	r3, [pc, #260]	; (8000f48 <HAL_RCC_ClockConfig+0x1c4>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d109      	bne.n	8000e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e073      	b.n	8000f3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e52:	4b3d      	ldr	r3, [pc, #244]	; (8000f48 <HAL_RCC_ClockConfig+0x1c4>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f003 0302 	and.w	r3, r3, #2
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d101      	bne.n	8000e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e06b      	b.n	8000f3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e62:	4b39      	ldr	r3, [pc, #228]	; (8000f48 <HAL_RCC_ClockConfig+0x1c4>)
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f023 0203 	bic.w	r2, r3, #3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	4936      	ldr	r1, [pc, #216]	; (8000f48 <HAL_RCC_ClockConfig+0x1c4>)
 8000e70:	4313      	orrs	r3, r2
 8000e72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000e74:	f7ff fbe0 	bl	8000638 <HAL_GetTick>
 8000e78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e7a:	e00a      	b.n	8000e92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e7c:	f7ff fbdc 	bl	8000638 <HAL_GetTick>
 8000e80:	4602      	mov	r2, r0
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d901      	bls.n	8000e92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	e053      	b.n	8000f3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e92:	4b2d      	ldr	r3, [pc, #180]	; (8000f48 <HAL_RCC_ClockConfig+0x1c4>)
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f003 020c 	and.w	r2, r3, #12
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d1eb      	bne.n	8000e7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000ea4:	4b27      	ldr	r3, [pc, #156]	; (8000f44 <HAL_RCC_ClockConfig+0x1c0>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f003 0307 	and.w	r3, r3, #7
 8000eac:	683a      	ldr	r2, [r7, #0]
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d210      	bcs.n	8000ed4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000eb2:	4b24      	ldr	r3, [pc, #144]	; (8000f44 <HAL_RCC_ClockConfig+0x1c0>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f023 0207 	bic.w	r2, r3, #7
 8000eba:	4922      	ldr	r1, [pc, #136]	; (8000f44 <HAL_RCC_ClockConfig+0x1c0>)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ec2:	4b20      	ldr	r3, [pc, #128]	; (8000f44 <HAL_RCC_ClockConfig+0x1c0>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	683a      	ldr	r2, [r7, #0]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d001      	beq.n	8000ed4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e032      	b.n	8000f3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f003 0304 	and.w	r3, r3, #4
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d008      	beq.n	8000ef2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000ee0:	4b19      	ldr	r3, [pc, #100]	; (8000f48 <HAL_RCC_ClockConfig+0x1c4>)
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	4916      	ldr	r1, [pc, #88]	; (8000f48 <HAL_RCC_ClockConfig+0x1c4>)
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f003 0308 	and.w	r3, r3, #8
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d009      	beq.n	8000f12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000efe:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <HAL_RCC_ClockConfig+0x1c4>)
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	691b      	ldr	r3, [r3, #16]
 8000f0a:	00db      	lsls	r3, r3, #3
 8000f0c:	490e      	ldr	r1, [pc, #56]	; (8000f48 <HAL_RCC_ClockConfig+0x1c4>)
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000f12:	f000 f821 	bl	8000f58 <HAL_RCC_GetSysClockFreq>
 8000f16:	4602      	mov	r2, r0
 8000f18:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <HAL_RCC_ClockConfig+0x1c4>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	091b      	lsrs	r3, r3, #4
 8000f1e:	f003 030f 	and.w	r3, r3, #15
 8000f22:	490a      	ldr	r1, [pc, #40]	; (8000f4c <HAL_RCC_ClockConfig+0x1c8>)
 8000f24:	5ccb      	ldrb	r3, [r1, r3]
 8000f26:	fa22 f303 	lsr.w	r3, r2, r3
 8000f2a:	4a09      	ldr	r2, [pc, #36]	; (8000f50 <HAL_RCC_ClockConfig+0x1cc>)
 8000f2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <HAL_RCC_ClockConfig+0x1d0>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff fb3e 	bl	80005b4 <HAL_InitTick>

  return HAL_OK;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40022000 	.word	0x40022000
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	08002998 	.word	0x08002998
 8000f50:	20000000 	.word	0x20000000
 8000f54:	20000004 	.word	0x20000004

08000f58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000f58:	b490      	push	{r4, r7}
 8000f5a:	b08a      	sub	sp, #40	; 0x28
 8000f5c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000f5e:	4b29      	ldr	r3, [pc, #164]	; (8001004 <HAL_RCC_GetSysClockFreq+0xac>)
 8000f60:	1d3c      	adds	r4, r7, #4
 8000f62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000f68:	f240 2301 	movw	r3, #513	; 0x201
 8000f6c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61fb      	str	r3, [r7, #28]
 8000f72:	2300      	movs	r3, #0
 8000f74:	61bb      	str	r3, [r7, #24]
 8000f76:	2300      	movs	r3, #0
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000f82:	4b21      	ldr	r3, [pc, #132]	; (8001008 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	f003 030c 	and.w	r3, r3, #12
 8000f8e:	2b04      	cmp	r3, #4
 8000f90:	d002      	beq.n	8000f98 <HAL_RCC_GetSysClockFreq+0x40>
 8000f92:	2b08      	cmp	r3, #8
 8000f94:	d003      	beq.n	8000f9e <HAL_RCC_GetSysClockFreq+0x46>
 8000f96:	e02b      	b.n	8000ff0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000f98:	4b1c      	ldr	r3, [pc, #112]	; (800100c <HAL_RCC_GetSysClockFreq+0xb4>)
 8000f9a:	623b      	str	r3, [r7, #32]
      break;
 8000f9c:	e02b      	b.n	8000ff6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	0c9b      	lsrs	r3, r3, #18
 8000fa2:	f003 030f 	and.w	r3, r3, #15
 8000fa6:	3328      	adds	r3, #40	; 0x28
 8000fa8:	443b      	add	r3, r7
 8000faa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000fae:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d012      	beq.n	8000fe0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000fba:	4b13      	ldr	r3, [pc, #76]	; (8001008 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	0c5b      	lsrs	r3, r3, #17
 8000fc0:	f003 0301 	and.w	r3, r3, #1
 8000fc4:	3328      	adds	r3, #40	; 0x28
 8000fc6:	443b      	add	r3, r7
 8000fc8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000fcc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	4a0e      	ldr	r2, [pc, #56]	; (800100c <HAL_RCC_GetSysClockFreq+0xb4>)
 8000fd2:	fb03 f202 	mul.w	r2, r3, r2
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24
 8000fde:	e004      	b.n	8000fea <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	4a0b      	ldr	r2, [pc, #44]	; (8001010 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000fe4:	fb02 f303 	mul.w	r3, r2, r3
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fec:	623b      	str	r3, [r7, #32]
      break;
 8000fee:	e002      	b.n	8000ff6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_RCC_GetSysClockFreq+0xb4>)
 8000ff2:	623b      	str	r3, [r7, #32]
      break;
 8000ff4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000ff6:	6a3b      	ldr	r3, [r7, #32]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3728      	adds	r7, #40	; 0x28
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bc90      	pop	{r4, r7}
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	08002978 	.word	0x08002978
 8001008:	40021000 	.word	0x40021000
 800100c:	007a1200 	.word	0x007a1200
 8001010:	003d0900 	.word	0x003d0900

08001014 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001018:	4b02      	ldr	r3, [pc, #8]	; (8001024 <HAL_RCC_GetHCLKFreq+0x10>)
 800101a:	681b      	ldr	r3, [r3, #0]
}
 800101c:	4618      	mov	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr
 8001024:	20000000 	.word	0x20000000

08001028 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800102c:	f7ff fff2 	bl	8001014 <HAL_RCC_GetHCLKFreq>
 8001030:	4602      	mov	r2, r0
 8001032:	4b05      	ldr	r3, [pc, #20]	; (8001048 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	0adb      	lsrs	r3, r3, #11
 8001038:	f003 0307 	and.w	r3, r3, #7
 800103c:	4903      	ldr	r1, [pc, #12]	; (800104c <HAL_RCC_GetPCLK2Freq+0x24>)
 800103e:	5ccb      	ldrb	r3, [r1, r3]
 8001040:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001044:	4618      	mov	r0, r3
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40021000 	.word	0x40021000
 800104c:	080029a8 	.word	0x080029a8

08001050 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001058:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <RCC_Delay+0x34>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a0a      	ldr	r2, [pc, #40]	; (8001088 <RCC_Delay+0x38>)
 800105e:	fba2 2303 	umull	r2, r3, r2, r3
 8001062:	0a5b      	lsrs	r3, r3, #9
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	fb02 f303 	mul.w	r3, r2, r3
 800106a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800106c:	bf00      	nop
  }
  while (Delay --);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	1e5a      	subs	r2, r3, #1
 8001072:	60fa      	str	r2, [r7, #12]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d1f9      	bne.n	800106c <RCC_Delay+0x1c>
}
 8001078:	bf00      	nop
 800107a:	bf00      	nop
 800107c:	3714      	adds	r7, #20
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr
 8001084:	20000000 	.word	0x20000000
 8001088:	10624dd3 	.word	0x10624dd3

0800108c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001094:	2300      	movs	r3, #0
 8001096:	613b      	str	r3, [r7, #16]
 8001098:	2300      	movs	r3, #0
 800109a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d07d      	beq.n	80011a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80010a8:	2300      	movs	r3, #0
 80010aa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010ac:	4b4f      	ldr	r3, [pc, #316]	; (80011ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80010ae:	69db      	ldr	r3, [r3, #28]
 80010b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d10d      	bne.n	80010d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010b8:	4b4c      	ldr	r3, [pc, #304]	; (80011ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80010ba:	69db      	ldr	r3, [r3, #28]
 80010bc:	4a4b      	ldr	r2, [pc, #300]	; (80011ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80010be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c2:	61d3      	str	r3, [r2, #28]
 80010c4:	4b49      	ldr	r3, [pc, #292]	; (80011ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80010c6:	69db      	ldr	r3, [r3, #28]
 80010c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010cc:	60bb      	str	r3, [r7, #8]
 80010ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010d0:	2301      	movs	r3, #1
 80010d2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010d4:	4b46      	ldr	r3, [pc, #280]	; (80011f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d118      	bne.n	8001112 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010e0:	4b43      	ldr	r3, [pc, #268]	; (80011f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a42      	ldr	r2, [pc, #264]	; (80011f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80010e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010ec:	f7ff faa4 	bl	8000638 <HAL_GetTick>
 80010f0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010f2:	e008      	b.n	8001106 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010f4:	f7ff faa0 	bl	8000638 <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	2b64      	cmp	r3, #100	; 0x64
 8001100:	d901      	bls.n	8001106 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001102:	2303      	movs	r3, #3
 8001104:	e06d      	b.n	80011e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001106:	4b3a      	ldr	r3, [pc, #232]	; (80011f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800110e:	2b00      	cmp	r3, #0
 8001110:	d0f0      	beq.n	80010f4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001112:	4b36      	ldr	r3, [pc, #216]	; (80011ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001114:	6a1b      	ldr	r3, [r3, #32]
 8001116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800111a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d02e      	beq.n	8001180 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800112a:	68fa      	ldr	r2, [r7, #12]
 800112c:	429a      	cmp	r2, r3
 800112e:	d027      	beq.n	8001180 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001130:	4b2e      	ldr	r3, [pc, #184]	; (80011ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001132:	6a1b      	ldr	r3, [r3, #32]
 8001134:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001138:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800113a:	4b2e      	ldr	r3, [pc, #184]	; (80011f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800113c:	2201      	movs	r2, #1
 800113e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001140:	4b2c      	ldr	r3, [pc, #176]	; (80011f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001146:	4a29      	ldr	r2, [pc, #164]	; (80011ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	2b00      	cmp	r3, #0
 8001154:	d014      	beq.n	8001180 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001156:	f7ff fa6f 	bl	8000638 <HAL_GetTick>
 800115a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800115c:	e00a      	b.n	8001174 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800115e:	f7ff fa6b 	bl	8000638 <HAL_GetTick>
 8001162:	4602      	mov	r2, r0
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	f241 3288 	movw	r2, #5000	; 0x1388
 800116c:	4293      	cmp	r3, r2
 800116e:	d901      	bls.n	8001174 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001170:	2303      	movs	r3, #3
 8001172:	e036      	b.n	80011e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001174:	4b1d      	ldr	r3, [pc, #116]	; (80011ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001176:	6a1b      	ldr	r3, [r3, #32]
 8001178:	f003 0302 	and.w	r3, r3, #2
 800117c:	2b00      	cmp	r3, #0
 800117e:	d0ee      	beq.n	800115e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001180:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001182:	6a1b      	ldr	r3, [r3, #32]
 8001184:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	4917      	ldr	r1, [pc, #92]	; (80011ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800118e:	4313      	orrs	r3, r2
 8001190:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001192:	7dfb      	ldrb	r3, [r7, #23]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d105      	bne.n	80011a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001198:	4b14      	ldr	r3, [pc, #80]	; (80011ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800119a:	69db      	ldr	r3, [r3, #28]
 800119c:	4a13      	ldr	r2, [pc, #76]	; (80011ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800119e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011a2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0302 	and.w	r3, r3, #2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d008      	beq.n	80011c2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80011b0:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	490b      	ldr	r1, [pc, #44]	; (80011ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80011be:	4313      	orrs	r3, r2
 80011c0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0310 	and.w	r3, r3, #16
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d008      	beq.n	80011e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80011ce:	4b07      	ldr	r3, [pc, #28]	; (80011ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	4904      	ldr	r1, [pc, #16]	; (80011ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80011dc:	4313      	orrs	r3, r2
 80011de:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3718      	adds	r7, #24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40021000 	.word	0x40021000
 80011f0:	40007000 	.word	0x40007000
 80011f4:	42420440 	.word	0x42420440

080011f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80011f8:	b590      	push	{r4, r7, lr}
 80011fa:	b08d      	sub	sp, #52	; 0x34
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001200:	4b58      	ldr	r3, [pc, #352]	; (8001364 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8001202:	f107 040c 	add.w	r4, r7, #12
 8001206:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001208:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800120c:	f240 2301 	movw	r3, #513	; 0x201
 8001210:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001212:	2300      	movs	r3, #0
 8001214:	627b      	str	r3, [r7, #36]	; 0x24
 8001216:	2300      	movs	r3, #0
 8001218:	62fb      	str	r3, [r7, #44]	; 0x2c
 800121a:	2300      	movs	r3, #0
 800121c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800121e:	2300      	movs	r3, #0
 8001220:	61fb      	str	r3, [r7, #28]
 8001222:	2300      	movs	r3, #0
 8001224:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2b10      	cmp	r3, #16
 800122a:	d00a      	beq.n	8001242 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b10      	cmp	r3, #16
 8001230:	f200 808e 	bhi.w	8001350 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d049      	beq.n	80012ce <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2b02      	cmp	r3, #2
 800123e:	d079      	beq.n	8001334 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001240:	e086      	b.n	8001350 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8001242:	4b49      	ldr	r3, [pc, #292]	; (8001368 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001248:	4b47      	ldr	r3, [pc, #284]	; (8001368 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d07f      	beq.n	8001354 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	0c9b      	lsrs	r3, r3, #18
 8001258:	f003 030f 	and.w	r3, r3, #15
 800125c:	3330      	adds	r3, #48	; 0x30
 800125e:	443b      	add	r3, r7
 8001260:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001264:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d017      	beq.n	80012a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001270:	4b3d      	ldr	r3, [pc, #244]	; (8001368 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	0c5b      	lsrs	r3, r3, #17
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	3330      	adds	r3, #48	; 0x30
 800127c:	443b      	add	r3, r7
 800127e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001282:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d00d      	beq.n	80012aa <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800128e:	4a37      	ldr	r2, [pc, #220]	; (800136c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001292:	fbb2 f2f3 	udiv	r2, r2, r3
 8001296:	6a3b      	ldr	r3, [r7, #32]
 8001298:	fb02 f303 	mul.w	r3, r2, r3
 800129c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800129e:	e004      	b.n	80012aa <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80012a0:	6a3b      	ldr	r3, [r7, #32]
 80012a2:	4a33      	ldr	r2, [pc, #204]	; (8001370 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80012a4:	fb02 f303 	mul.w	r3, r2, r3
 80012a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80012aa:	4b2f      	ldr	r3, [pc, #188]	; (8001368 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012b6:	d102      	bne.n	80012be <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 80012b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ba:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80012bc:	e04a      	b.n	8001354 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 80012be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	4a2c      	ldr	r2, [pc, #176]	; (8001374 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80012c4:	fba2 2303 	umull	r2, r3, r2, r3
 80012c8:	085b      	lsrs	r3, r3, #1
 80012ca:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80012cc:	e042      	b.n	8001354 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 80012ce:	4b26      	ldr	r3, [pc, #152]	; (8001368 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80012d0:	6a1b      	ldr	r3, [r3, #32]
 80012d2:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80012da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012de:	d108      	bne.n	80012f2 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 80012ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80012f0:	e01f      	b.n	8001332 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80012f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012fc:	d109      	bne.n	8001312 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 80012fe:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 800130a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800130e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001310:	e00f      	b.n	8001332 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001318:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800131c:	d11c      	bne.n	8001358 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800131e:	4b12      	ldr	r3, [pc, #72]	; (8001368 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d016      	beq.n	8001358 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 800132a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800132e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001330:	e012      	b.n	8001358 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8001332:	e011      	b.n	8001358 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001334:	f7ff fe78 	bl	8001028 <HAL_RCC_GetPCLK2Freq>
 8001338:	4602      	mov	r2, r0
 800133a:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	0b9b      	lsrs	r3, r3, #14
 8001340:	f003 0303 	and.w	r3, r3, #3
 8001344:	3301      	adds	r3, #1
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	fbb2 f3f3 	udiv	r3, r2, r3
 800134c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800134e:	e004      	b.n	800135a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8001350:	bf00      	nop
 8001352:	e002      	b.n	800135a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8001354:	bf00      	nop
 8001356:	e000      	b.n	800135a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8001358:	bf00      	nop
    }
  }
  return (frequency);
 800135a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800135c:	4618      	mov	r0, r3
 800135e:	3734      	adds	r7, #52	; 0x34
 8001360:	46bd      	mov	sp, r7
 8001362:	bd90      	pop	{r4, r7, pc}
 8001364:	08002988 	.word	0x08002988
 8001368:	40021000 	.word	0x40021000
 800136c:	007a1200 	.word	0x007a1200
 8001370:	003d0900 	.word	0x003d0900
 8001374:	aaaaaaab 	.word	0xaaaaaaab

08001378 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8001380:	2300      	movs	r3, #0
 8001382:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e084      	b.n	8001498 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	7c5b      	ldrb	r3, [r3, #17]
 8001392:	b2db      	uxtb	r3, r3
 8001394:	2b00      	cmp	r3, #0
 8001396:	d105      	bne.n	80013a4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff f832 	bl	8000408 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2202      	movs	r2, #2
 80013a8:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f000 fb82 	bl	8001ab4 <HAL_RTC_WaitForSynchro>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d004      	beq.n	80013c0 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2204      	movs	r2, #4
 80013ba:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e06b      	b.n	8001498 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f000 fc3b 	bl	8001c3c <RTC_EnterInitMode>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d004      	beq.n	80013d6 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2204      	movs	r2, #4
 80013d0:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e060      	b.n	8001498 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	685a      	ldr	r2, [r3, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f022 0207 	bic.w	r2, r2, #7
 80013e4:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d005      	beq.n	80013fa <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80013ee:	4b2c      	ldr	r3, [pc, #176]	; (80014a0 <HAL_RTC_Init+0x128>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a2b      	ldr	r2, [pc, #172]	; (80014a0 <HAL_RTC_Init+0x128>)
 80013f4:	f023 0301 	bic.w	r3, r3, #1
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80013fa:	4b29      	ldr	r3, [pc, #164]	; (80014a0 <HAL_RTC_Init+0x128>)
 80013fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fe:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	4926      	ldr	r1, [pc, #152]	; (80014a0 <HAL_RTC_Init+0x128>)
 8001408:	4313      	orrs	r3, r2
 800140a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001414:	d003      	beq.n	800141e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	e00e      	b.n	800143c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800141e:	2001      	movs	r0, #1
 8001420:	f7ff feea 	bl	80011f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8001424:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d104      	bne.n	8001436 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2204      	movs	r2, #4
 8001430:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e030      	b.n	8001498 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	3b01      	subs	r3, #1
 800143a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f023 010f 	bic.w	r1, r3, #15
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	0c1a      	lsrs	r2, r3, #16
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	430a      	orrs	r2, r1
 8001450:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	0c1b      	lsrs	r3, r3, #16
 800145a:	041b      	lsls	r3, r3, #16
 800145c:	68fa      	ldr	r2, [r7, #12]
 800145e:	b291      	uxth	r1, r2
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	6812      	ldr	r2, [r2, #0]
 8001464:	430b      	orrs	r3, r1
 8001466:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f000 fc0f 	bl	8001c8c <RTC_ExitInitMode>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d004      	beq.n	800147e <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2204      	movs	r2, #4
 8001478:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e00c      	b.n	8001498 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2201      	movs	r2, #1
 8001488:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2201      	movs	r2, #1
 800148e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2201      	movs	r2, #1
 8001494:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8001496:	2300      	movs	r3, #0
  }
}
 8001498:	4618      	mov	r0, r3
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40006c00 	.word	0x40006c00

080014a4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80014a4:	b590      	push	{r4, r7, lr}
 80014a6:	b087      	sub	sp, #28
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
 80014b4:	2300      	movs	r3, #0
 80014b6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d002      	beq.n	80014c4 <HAL_RTC_SetTime+0x20>
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d101      	bne.n	80014c8 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e080      	b.n	80015ca <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	7c1b      	ldrb	r3, [r3, #16]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d101      	bne.n	80014d4 <HAL_RTC_SetTime+0x30>
 80014d0:	2302      	movs	r3, #2
 80014d2:	e07a      	b.n	80015ca <HAL_RTC_SetTime+0x126>
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2201      	movs	r2, #1
 80014d8:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2202      	movs	r2, #2
 80014de:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d113      	bne.n	800150e <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	461a      	mov	r2, r3
 80014ec:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80014f0:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	785b      	ldrb	r3, [r3, #1]
 80014f8:	4619      	mov	r1, r3
 80014fa:	460b      	mov	r3, r1
 80014fc:	011b      	lsls	r3, r3, #4
 80014fe:	1a5b      	subs	r3, r3, r1
 8001500:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001502:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8001504:	68ba      	ldr	r2, [r7, #8]
 8001506:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001508:	4413      	add	r3, r2
 800150a:	617b      	str	r3, [r7, #20]
 800150c:	e01e      	b.n	800154c <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	4618      	mov	r0, r3
 8001514:	f000 fbff 	bl	8001d16 <RTC_Bcd2ToByte>
 8001518:	4603      	mov	r3, r0
 800151a:	461a      	mov	r2, r3
 800151c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001520:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	785b      	ldrb	r3, [r3, #1]
 8001528:	4618      	mov	r0, r3
 800152a:	f000 fbf4 	bl	8001d16 <RTC_Bcd2ToByte>
 800152e:	4603      	mov	r3, r0
 8001530:	461a      	mov	r2, r3
 8001532:	4613      	mov	r3, r2
 8001534:	011b      	lsls	r3, r3, #4
 8001536:	1a9b      	subs	r3, r3, r2
 8001538:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800153a:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	789b      	ldrb	r3, [r3, #2]
 8001540:	4618      	mov	r0, r3
 8001542:	f000 fbe8 	bl	8001d16 <RTC_Bcd2ToByte>
 8001546:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001548:	4423      	add	r3, r4
 800154a:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800154c:	6979      	ldr	r1, [r7, #20]
 800154e:	68f8      	ldr	r0, [r7, #12]
 8001550:	f000 fb0d 	bl	8001b6e <RTC_WriteTimeCounter>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d007      	beq.n	800156a <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	2204      	movs	r2, #4
 800155e:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2200      	movs	r2, #0
 8001564:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e02f      	b.n	80015ca <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	685a      	ldr	r2, [r3, #4]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f022 0205 	bic.w	r2, r2, #5
 8001578:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800157a:	68f8      	ldr	r0, [r7, #12]
 800157c:	f000 fb1e 	bl	8001bbc <RTC_ReadAlarmCounter>
 8001580:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001588:	d018      	beq.n	80015bc <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	429a      	cmp	r2, r3
 8001590:	d214      	bcs.n	80015bc <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001598:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800159c:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800159e:	6939      	ldr	r1, [r7, #16]
 80015a0:	68f8      	ldr	r0, [r7, #12]
 80015a2:	f000 fb24 	bl	8001bee <RTC_WriteAlarmCounter>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d007      	beq.n	80015bc <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2204      	movs	r2, #4
 80015b0:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2200      	movs	r2, #0
 80015b6:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e006      	b.n	80015ca <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2201      	movs	r2, #1
 80015c0:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2200      	movs	r2, #0
 80015c6:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80015c8:	2300      	movs	r3, #0
  }
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	371c      	adds	r7, #28
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd90      	pop	{r4, r7, pc}
	...

080015d4 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b088      	sub	sp, #32
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61bb      	str	r3, [r7, #24]
 80015e4:	2300      	movs	r3, #0
 80015e6:	61fb      	str	r3, [r7, #28]
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
 80015ec:	2300      	movs	r3, #0
 80015ee:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d002      	beq.n	80015fc <HAL_RTC_GetTime+0x28>
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d101      	bne.n	8001600 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e0b5      	b.n	800176c <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f003 0304 	and.w	r3, r3, #4
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e0ac      	b.n	800176c <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8001612:	68f8      	ldr	r0, [r7, #12]
 8001614:	f000 fa7b 	bl	8001b0e <RTC_ReadTimeCounter>
 8001618:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	4a55      	ldr	r2, [pc, #340]	; (8001774 <HAL_RTC_GetTime+0x1a0>)
 800161e:	fba2 2303 	umull	r2, r3, r2, r3
 8001622:	0adb      	lsrs	r3, r3, #11
 8001624:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	4b52      	ldr	r3, [pc, #328]	; (8001774 <HAL_RTC_GetTime+0x1a0>)
 800162a:	fba3 1302 	umull	r1, r3, r3, r2
 800162e:	0adb      	lsrs	r3, r3, #11
 8001630:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8001634:	fb01 f303 	mul.w	r3, r1, r3
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	4a4f      	ldr	r2, [pc, #316]	; (8001778 <HAL_RTC_GetTime+0x1a4>)
 800163c:	fba2 2303 	umull	r2, r3, r2, r3
 8001640:	095b      	lsrs	r3, r3, #5
 8001642:	b2da      	uxtb	r2, r3
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	4a4a      	ldr	r2, [pc, #296]	; (8001774 <HAL_RTC_GetTime+0x1a0>)
 800164c:	fba2 1203 	umull	r1, r2, r2, r3
 8001650:	0ad2      	lsrs	r2, r2, #11
 8001652:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8001656:	fb01 f202 	mul.w	r2, r1, r2
 800165a:	1a9a      	subs	r2, r3, r2
 800165c:	4b46      	ldr	r3, [pc, #280]	; (8001778 <HAL_RTC_GetTime+0x1a4>)
 800165e:	fba3 1302 	umull	r1, r3, r3, r2
 8001662:	0959      	lsrs	r1, r3, #5
 8001664:	460b      	mov	r3, r1
 8001666:	011b      	lsls	r3, r3, #4
 8001668:	1a5b      	subs	r3, r3, r1
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	1ad1      	subs	r1, r2, r3
 800166e:	b2ca      	uxtb	r2, r1
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	2b17      	cmp	r3, #23
 8001678:	d955      	bls.n	8001726 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	4a3f      	ldr	r2, [pc, #252]	; (800177c <HAL_RTC_GetTime+0x1a8>)
 800167e:	fba2 2303 	umull	r2, r3, r2, r3
 8001682:	091b      	lsrs	r3, r3, #4
 8001684:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8001686:	6939      	ldr	r1, [r7, #16]
 8001688:	4b3c      	ldr	r3, [pc, #240]	; (800177c <HAL_RTC_GetTime+0x1a8>)
 800168a:	fba3 2301 	umull	r2, r3, r3, r1
 800168e:	091a      	lsrs	r2, r3, #4
 8001690:	4613      	mov	r3, r2
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	4413      	add	r3, r2
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	1aca      	subs	r2, r1, r3
 800169a:	b2d2      	uxtb	r2, r2
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80016a0:	68f8      	ldr	r0, [r7, #12]
 80016a2:	f000 fa8b 	bl	8001bbc <RTC_ReadAlarmCounter>
 80016a6:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ae:	d008      	beq.n	80016c2 <HAL_RTC_GetTime+0xee>
 80016b0:	69fa      	ldr	r2, [r7, #28]
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d904      	bls.n	80016c2 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 80016b8:	69fa      	ldr	r2, [r7, #28]
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	61fb      	str	r3, [r7, #28]
 80016c0:	e002      	b.n	80016c8 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80016c2:	f04f 33ff 	mov.w	r3, #4294967295
 80016c6:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	4a2d      	ldr	r2, [pc, #180]	; (8001780 <HAL_RTC_GetTime+0x1ac>)
 80016cc:	fb02 f303 	mul.w	r3, r2, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80016d6:	69b9      	ldr	r1, [r7, #24]
 80016d8:	68f8      	ldr	r0, [r7, #12]
 80016da:	f000 fa48 	bl	8001b6e <RTC_WriteTimeCounter>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e041      	b.n	800176c <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ee:	d00c      	beq.n	800170a <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 80016f0:	69fa      	ldr	r2, [r7, #28]
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	4413      	add	r3, r2
 80016f6:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80016f8:	69f9      	ldr	r1, [r7, #28]
 80016fa:	68f8      	ldr	r0, [r7, #12]
 80016fc:	f000 fa77 	bl	8001bee <RTC_WriteAlarmCounter>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d00a      	beq.n	800171c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e030      	b.n	800176c <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800170a:	69f9      	ldr	r1, [r7, #28]
 800170c:	68f8      	ldr	r0, [r7, #12]
 800170e:	f000 fa6e 	bl	8001bee <RTC_WriteAlarmCounter>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e027      	b.n	800176c <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 800171c:	6979      	ldr	r1, [r7, #20]
 800171e:	68f8      	ldr	r0, [r7, #12]
 8001720:	f000 fb16 	bl	8001d50 <RTC_DateUpdate>
 8001724:	e003      	b.n	800172e <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	b2da      	uxtb	r2, r3
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d01a      	beq.n	800176a <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	f000 facf 	bl	8001cdc <RTC_ByteToBcd2>
 800173e:	4603      	mov	r3, r0
 8001740:	461a      	mov	r2, r3
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	785b      	ldrb	r3, [r3, #1]
 800174a:	4618      	mov	r0, r3
 800174c:	f000 fac6 	bl	8001cdc <RTC_ByteToBcd2>
 8001750:	4603      	mov	r3, r0
 8001752:	461a      	mov	r2, r3
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	789b      	ldrb	r3, [r3, #2]
 800175c:	4618      	mov	r0, r3
 800175e:	f000 fabd 	bl	8001cdc <RTC_ByteToBcd2>
 8001762:	4603      	mov	r3, r0
 8001764:	461a      	mov	r2, r3
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	3720      	adds	r7, #32
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	91a2b3c5 	.word	0x91a2b3c5
 8001778:	88888889 	.word	0x88888889
 800177c:	aaaaaaab 	.word	0xaaaaaaab
 8001780:	00015180 	.word	0x00015180

08001784 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b088      	sub	sp, #32
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8001790:	2300      	movs	r3, #0
 8001792:	61fb      	str	r3, [r7, #28]
 8001794:	2300      	movs	r3, #0
 8001796:	61bb      	str	r3, [r7, #24]
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d002      	beq.n	80017a8 <HAL_RTC_SetDate+0x24>
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d101      	bne.n	80017ac <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e097      	b.n	80018dc <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	7c1b      	ldrb	r3, [r3, #16]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d101      	bne.n	80017b8 <HAL_RTC_SetDate+0x34>
 80017b4:	2302      	movs	r3, #2
 80017b6:	e091      	b.n	80018dc <HAL_RTC_SetDate+0x158>
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2201      	movs	r2, #1
 80017bc:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2202      	movs	r2, #2
 80017c2:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d10c      	bne.n	80017e4 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	78da      	ldrb	r2, [r3, #3]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	785a      	ldrb	r2, [r3, #1]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	789a      	ldrb	r2, [r3, #2]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	739a      	strb	r2, [r3, #14]
 80017e2:	e01a      	b.n	800181a <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	78db      	ldrb	r3, [r3, #3]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f000 fa94 	bl	8001d16 <RTC_Bcd2ToByte>
 80017ee:	4603      	mov	r3, r0
 80017f0:	461a      	mov	r2, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	785b      	ldrb	r3, [r3, #1]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 fa8b 	bl	8001d16 <RTC_Bcd2ToByte>
 8001800:	4603      	mov	r3, r0
 8001802:	461a      	mov	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	789b      	ldrb	r3, [r3, #2]
 800180c:	4618      	mov	r0, r3
 800180e:	f000 fa82 	bl	8001d16 <RTC_Bcd2ToByte>
 8001812:	4603      	mov	r3, r0
 8001814:	461a      	mov	r2, r3
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	7bdb      	ldrb	r3, [r3, #15]
 800181e:	4618      	mov	r0, r3
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	7b59      	ldrb	r1, [r3, #13]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	7b9b      	ldrb	r3, [r3, #14]
 8001828:	461a      	mov	r2, r3
 800182a:	f000 fb6d 	bl	8001f08 <RTC_WeekDayNum>
 800182e:	4603      	mov	r3, r0
 8001830:	461a      	mov	r2, r3
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	7b1a      	ldrb	r2, [r3, #12]
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800183e:	68f8      	ldr	r0, [r7, #12]
 8001840:	f000 f965 	bl	8001b0e <RTC_ReadTimeCounter>
 8001844:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	4a26      	ldr	r2, [pc, #152]	; (80018e4 <HAL_RTC_SetDate+0x160>)
 800184a:	fba2 2303 	umull	r2, r3, r2, r3
 800184e:	0adb      	lsrs	r3, r3, #11
 8001850:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	2b18      	cmp	r3, #24
 8001856:	d93a      	bls.n	80018ce <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	4a23      	ldr	r2, [pc, #140]	; (80018e8 <HAL_RTC_SetDate+0x164>)
 800185c:	fba2 2303 	umull	r2, r3, r2, r3
 8001860:	091b      	lsrs	r3, r3, #4
 8001862:	4a22      	ldr	r2, [pc, #136]	; (80018ec <HAL_RTC_SetDate+0x168>)
 8001864:	fb02 f303 	mul.w	r3, r2, r3
 8001868:	69fa      	ldr	r2, [r7, #28]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800186e:	69f9      	ldr	r1, [r7, #28]
 8001870:	68f8      	ldr	r0, [r7, #12]
 8001872:	f000 f97c 	bl	8001b6e <RTC_WriteTimeCounter>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d007      	beq.n	800188c <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2204      	movs	r2, #4
 8001880:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2200      	movs	r2, #0
 8001886:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e027      	b.n	80018dc <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800188c:	68f8      	ldr	r0, [r7, #12]
 800188e:	f000 f995 	bl	8001bbc <RTC_ReadAlarmCounter>
 8001892:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800189a:	d018      	beq.n	80018ce <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d214      	bcs.n	80018ce <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80018aa:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80018ae:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80018b0:	69b9      	ldr	r1, [r7, #24]
 80018b2:	68f8      	ldr	r0, [r7, #12]
 80018b4:	f000 f99b 	bl	8001bee <RTC_WriteAlarmCounter>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d007      	beq.n	80018ce <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2204      	movs	r2, #4
 80018c2:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2200      	movs	r2, #0
 80018c8:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e006      	b.n	80018dc <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2201      	movs	r2, #1
 80018d2:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2200      	movs	r2, #0
 80018d8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3720      	adds	r7, #32
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	91a2b3c5 	.word	0x91a2b3c5
 80018e8:	aaaaaaab 	.word	0xaaaaaaab
 80018ec:	00015180 	.word	0x00015180

080018f0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80018f0:	b590      	push	{r4, r7, lr}
 80018f2:	b089      	sub	sp, #36	; 0x24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 80018fc:	2300      	movs	r3, #0
 80018fe:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	2100      	movs	r1, #0
 8001906:	460a      	mov	r2, r1
 8001908:	801a      	strh	r2, [r3, #0]
 800190a:	460a      	mov	r2, r1
 800190c:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d002      	beq.n	800191a <HAL_RTC_SetAlarm_IT+0x2a>
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d101      	bne.n	800191e <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e099      	b.n	8001a52 <HAL_RTC_SetAlarm_IT+0x162>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	7c1b      	ldrb	r3, [r3, #16]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d101      	bne.n	800192a <HAL_RTC_SetAlarm_IT+0x3a>
 8001926:	2302      	movs	r3, #2
 8001928:	e093      	b.n	8001a52 <HAL_RTC_SetAlarm_IT+0x162>
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2201      	movs	r2, #1
 800192e:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2202      	movs	r2, #2
 8001934:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8001936:	f107 0314 	add.w	r3, r7, #20
 800193a:	2200      	movs	r2, #0
 800193c:	4619      	mov	r1, r3
 800193e:	68f8      	ldr	r0, [r7, #12]
 8001940:	f7ff fe48 	bl	80015d4 <HAL_RTC_GetTime>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e081      	b.n	8001a52 <HAL_RTC_SetAlarm_IT+0x162>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 800194e:	7d3b      	ldrb	r3, [r7, #20]
 8001950:	461a      	mov	r2, r3
 8001952:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001956:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 800195a:	7d7b      	ldrb	r3, [r7, #21]
 800195c:	4619      	mov	r1, r3
 800195e:	460b      	mov	r3, r1
 8001960:	011b      	lsls	r3, r3, #4
 8001962:	1a5b      	subs	r3, r3, r1
 8001964:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8001966:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8001968:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 800196a:	4413      	add	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d113      	bne.n	800199c <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	461a      	mov	r2, r3
 800197a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800197e:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	785b      	ldrb	r3, [r3, #1]
 8001986:	4619      	mov	r1, r3
 8001988:	460b      	mov	r3, r1
 800198a:	011b      	lsls	r3, r3, #4
 800198c:	1a5b      	subs	r3, r3, r1
 800198e:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8001990:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8001992:	68ba      	ldr	r2, [r7, #8]
 8001994:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8001996:	4413      	add	r3, r2
 8001998:	61fb      	str	r3, [r7, #28]
 800199a:	e01e      	b.n	80019da <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f000 f9b8 	bl	8001d16 <RTC_Bcd2ToByte>
 80019a6:	4603      	mov	r3, r0
 80019a8:	461a      	mov	r2, r3
 80019aa:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80019ae:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	785b      	ldrb	r3, [r3, #1]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f000 f9ad 	bl	8001d16 <RTC_Bcd2ToByte>
 80019bc:	4603      	mov	r3, r0
 80019be:	461a      	mov	r2, r3
 80019c0:	4613      	mov	r3, r2
 80019c2:	011b      	lsls	r3, r3, #4
 80019c4:	1a9b      	subs	r3, r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80019c8:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	789b      	ldrb	r3, [r3, #2]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f000 f9a1 	bl	8001d16 <RTC_Bcd2ToByte>
 80019d4:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80019d6:	4423      	add	r3, r4
 80019d8:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 80019da:	69fa      	ldr	r2, [r7, #28]
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d205      	bcs.n	80019ee <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80019e8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80019ec:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80019ee:	69f9      	ldr	r1, [r7, #28]
 80019f0:	68f8      	ldr	r0, [r7, #12]
 80019f2:	f000 f8fc 	bl	8001bee <RTC_WriteAlarmCounter>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d007      	beq.n	8001a0c <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2204      	movs	r2, #4
 8001a00:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2200      	movs	r2, #0
 8001a06:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e022      	b.n	8001a52 <HAL_RTC_SetAlarm_IT+0x162>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	685a      	ldr	r2, [r3, #4]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f022 0202 	bic.w	r2, r2, #2
 8001a1a:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f042 0202 	orr.w	r2, r2, #2
 8001a2a:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8001a2c:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <HAL_RTC_SetAlarm_IT+0x16c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a0a      	ldr	r2, [pc, #40]	; (8001a5c <HAL_RTC_SetAlarm_IT+0x16c>)
 8001a32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a36:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8001a38:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <HAL_RTC_SetAlarm_IT+0x16c>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	4a07      	ldr	r2, [pc, #28]	; (8001a5c <HAL_RTC_SetAlarm_IT+0x16c>)
 8001a3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a42:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2201      	movs	r2, #1
 8001a48:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8001a50:	2300      	movs	r3, #0
  }
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3724      	adds	r7, #36	; 0x24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd90      	pop	{r4, r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40010400 	.word	0x40010400

08001a60 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d011      	beq.n	8001a9a <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d00a      	beq.n	8001a9a <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7fe fb61 	bl	800014c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f022 0202 	bic.w	r2, r2, #2
 8001a98:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8001a9a:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <HAL_RTC_AlarmIRQHandler+0x50>)
 8001a9c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001aa0:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	745a      	strb	r2, [r3, #17]
}
 8001aa8:	bf00      	nop
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40010400 	.word	0x40010400

08001ab4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e01d      	b.n	8001b06 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	685a      	ldr	r2, [r3, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f022 0208 	bic.w	r2, r2, #8
 8001ad8:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8001ada:	f7fe fdad 	bl	8000638 <HAL_GetTick>
 8001ade:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001ae0:	e009      	b.n	8001af6 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001ae2:	f7fe fda9 	bl	8000638 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001af0:	d901      	bls.n	8001af6 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e007      	b.n	8001b06 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f003 0308 	and.w	r3, r3, #8
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d0ee      	beq.n	8001ae2 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b087      	sub	sp, #28
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	827b      	strh	r3, [r7, #18]
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	823b      	strh	r3, [r7, #16]
 8001b1e:	2300      	movs	r3, #0
 8001b20:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8001b22:	2300      	movs	r3, #0
 8001b24:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	69db      	ldr	r3, [r3, #28]
 8001b34:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8001b3e:	8a7a      	ldrh	r2, [r7, #18]
 8001b40:	8a3b      	ldrh	r3, [r7, #16]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d008      	beq.n	8001b58 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8001b46:	8a3b      	ldrh	r3, [r7, #16]
 8001b48:	041a      	lsls	r2, r3, #16
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	69db      	ldr	r3, [r3, #28]
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	4313      	orrs	r3, r2
 8001b54:	617b      	str	r3, [r7, #20]
 8001b56:	e004      	b.n	8001b62 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8001b58:	8a7b      	ldrh	r3, [r7, #18]
 8001b5a:	041a      	lsls	r2, r3, #16
 8001b5c:	89fb      	ldrh	r3, [r7, #14]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8001b62:	697b      	ldr	r3, [r7, #20]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	371c      	adds	r7, #28
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bc80      	pop	{r7}
 8001b6c:	4770      	bx	lr

08001b6e <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b084      	sub	sp, #16
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
 8001b76:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f000 f85d 	bl	8001c3c <RTC_EnterInitMode>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d002      	beq.n	8001b8e <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	73fb      	strb	r3, [r7, #15]
 8001b8c:	e011      	b.n	8001bb2 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	0c12      	lsrs	r2, r2, #16
 8001b96:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	b292      	uxth	r2, r2
 8001ba0:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 f872 	bl	8001c8c <RTC_ExitInitMode>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	81fb      	strh	r3, [r7, #14]
 8001bc8:	2300      	movs	r3, #0
 8001bca:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6a1b      	ldr	r3, [r3, #32]
 8001bd2:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bda:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8001bdc:	89fb      	ldrh	r3, [r7, #14]
 8001bde:	041a      	lsls	r2, r3, #16
 8001be0:	89bb      	ldrh	r3, [r7, #12]
 8001be2:	4313      	orrs	r3, r2
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3714      	adds	r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bc80      	pop	{r7}
 8001bec:	4770      	bx	lr

08001bee <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b084      	sub	sp, #16
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
 8001bf6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f000 f81d 	bl	8001c3c <RTC_EnterInitMode>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d002      	beq.n	8001c0e <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	73fb      	strb	r3, [r7, #15]
 8001c0c:	e011      	b.n	8001c32 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	683a      	ldr	r2, [r7, #0]
 8001c14:	0c12      	lsrs	r2, r2, #16
 8001c16:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	b292      	uxth	r2, r2
 8001c20:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f832 	bl	8001c8c <RTC_ExitInitMode>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8001c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3710      	adds	r7, #16
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c44:	2300      	movs	r3, #0
 8001c46:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8001c48:	f7fe fcf6 	bl	8000638 <HAL_GetTick>
 8001c4c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001c4e:	e009      	b.n	8001c64 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001c50:	f7fe fcf2 	bl	8000638 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c5e:	d901      	bls.n	8001c64 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e00f      	b.n	8001c84 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f003 0320 	and.w	r3, r3, #32
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d0ee      	beq.n	8001c50 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	685a      	ldr	r2, [r3, #4]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f042 0210 	orr.w	r2, r2, #16
 8001c80:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c94:	2300      	movs	r3, #0
 8001c96:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	685a      	ldr	r2, [r3, #4]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f022 0210 	bic.w	r2, r2, #16
 8001ca6:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8001ca8:	f7fe fcc6 	bl	8000638 <HAL_GetTick>
 8001cac:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001cae:	e009      	b.n	8001cc4 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001cb0:	f7fe fcc2 	bl	8000638 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001cbe:	d901      	bls.n	8001cc4 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e007      	b.n	8001cd4 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f003 0320 	and.w	r3, r3, #32
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d0ee      	beq.n	8001cb0 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8001cea:	e005      	b.n	8001cf8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8001cf2:	79fb      	ldrb	r3, [r7, #7]
 8001cf4:	3b0a      	subs	r3, #10
 8001cf6:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	2b09      	cmp	r3, #9
 8001cfc:	d8f6      	bhi.n	8001cec <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	011b      	lsls	r3, r3, #4
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	79fb      	ldrb	r3, [r7, #7]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	b2db      	uxtb	r3, r3
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bc80      	pop	{r7}
 8001d14:	4770      	bx	lr

08001d16 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b085      	sub	sp, #20
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8001d20:	2300      	movs	r3, #0
 8001d22:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	091b      	lsrs	r3, r3, #4
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8001d36:	79fb      	ldrb	r3, [r7, #7]
 8001d38:	f003 030f 	and.w	r3, r3, #15
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	4413      	add	r3, r2
 8001d44:	b2db      	uxtb	r3, r3
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3714      	adds	r7, #20
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr

08001d50 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	617b      	str	r3, [r7, #20]
 8001d5e:	2300      	movs	r3, #0
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	2300      	movs	r3, #0
 8001d64:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8001d66:	2300      	movs	r3, #0
 8001d68:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	7bdb      	ldrb	r3, [r3, #15]
 8001d6e:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	7b5b      	ldrb	r3, [r3, #13]
 8001d74:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	7b9b      	ldrb	r3, [r3, #14]
 8001d7a:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	60bb      	str	r3, [r7, #8]
 8001d80:	e06f      	b.n	8001e62 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d011      	beq.n	8001dac <RTC_DateUpdate+0x5c>
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	2b03      	cmp	r3, #3
 8001d8c:	d00e      	beq.n	8001dac <RTC_DateUpdate+0x5c>
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	2b05      	cmp	r3, #5
 8001d92:	d00b      	beq.n	8001dac <RTC_DateUpdate+0x5c>
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	2b07      	cmp	r3, #7
 8001d98:	d008      	beq.n	8001dac <RTC_DateUpdate+0x5c>
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	2b08      	cmp	r3, #8
 8001d9e:	d005      	beq.n	8001dac <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	2b0a      	cmp	r3, #10
 8001da4:	d002      	beq.n	8001dac <RTC_DateUpdate+0x5c>
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	2b0c      	cmp	r3, #12
 8001daa:	d117      	bne.n	8001ddc <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2b1e      	cmp	r3, #30
 8001db0:	d803      	bhi.n	8001dba <RTC_DateUpdate+0x6a>
      {
        day++;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	3301      	adds	r3, #1
 8001db6:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8001db8:	e050      	b.n	8001e5c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	2b0c      	cmp	r3, #12
 8001dbe:	d005      	beq.n	8001dcc <RTC_DateUpdate+0x7c>
        {
          month++;
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	613b      	str	r3, [r7, #16]
          day = 1U;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8001dca:	e047      	b.n	8001e5c <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	613b      	str	r3, [r7, #16]
          day = 1U;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	60fb      	str	r3, [r7, #12]
          year++;
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8001dda:	e03f      	b.n	8001e5c <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	d008      	beq.n	8001df4 <RTC_DateUpdate+0xa4>
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	2b06      	cmp	r3, #6
 8001de6:	d005      	beq.n	8001df4 <RTC_DateUpdate+0xa4>
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	2b09      	cmp	r3, #9
 8001dec:	d002      	beq.n	8001df4 <RTC_DateUpdate+0xa4>
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	2b0b      	cmp	r3, #11
 8001df2:	d10c      	bne.n	8001e0e <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2b1d      	cmp	r3, #29
 8001df8:	d803      	bhi.n	8001e02 <RTC_DateUpdate+0xb2>
      {
        day++;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8001e00:	e02c      	b.n	8001e5c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	3301      	adds	r3, #1
 8001e06:	613b      	str	r3, [r7, #16]
        day = 1U;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8001e0c:	e026      	b.n	8001e5c <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d123      	bne.n	8001e5c <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2b1b      	cmp	r3, #27
 8001e18:	d803      	bhi.n	8001e22 <RTC_DateUpdate+0xd2>
      {
        day++;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	e01c      	b.n	8001e5c <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2b1c      	cmp	r3, #28
 8001e26:	d111      	bne.n	8001e4c <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f000 f839 	bl	8001ea4 <RTC_IsLeapYear>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d003      	beq.n	8001e40 <RTC_DateUpdate+0xf0>
        {
          day++;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	e00d      	b.n	8001e5c <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	3301      	adds	r3, #1
 8001e44:	613b      	str	r3, [r7, #16]
          day = 1U;
 8001e46:	2301      	movs	r3, #1
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	e007      	b.n	8001e5c <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2b1d      	cmp	r3, #29
 8001e50:	d104      	bne.n	8001e5c <RTC_DateUpdate+0x10c>
      {
        month++;
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	3301      	adds	r3, #1
 8001e56:	613b      	str	r3, [r7, #16]
        day = 1U;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	60bb      	str	r3, [r7, #8]
 8001e62:	68ba      	ldr	r2, [r7, #8]
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d38b      	bcc.n	8001d82 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	b2d2      	uxtb	r2, r2
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	6978      	ldr	r0, [r7, #20]
 8001e8e:	f000 f83b 	bl	8001f08 <RTC_WeekDayNum>
 8001e92:	4603      	mov	r3, r0
 8001e94:	461a      	mov	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	731a      	strb	r2, [r3, #12]
}
 8001e9a:	bf00      	nop
 8001e9c:	3718      	adds	r7, #24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
	...

08001ea4 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8001eae:	88fb      	ldrh	r3, [r7, #6]
 8001eb0:	f003 0303 	and.w	r3, r3, #3
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	e01d      	b.n	8001efa <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8001ebe:	88fb      	ldrh	r3, [r7, #6]
 8001ec0:	4a10      	ldr	r2, [pc, #64]	; (8001f04 <RTC_IsLeapYear+0x60>)
 8001ec2:	fba2 1203 	umull	r1, r2, r2, r3
 8001ec6:	0952      	lsrs	r2, r2, #5
 8001ec8:	2164      	movs	r1, #100	; 0x64
 8001eca:	fb01 f202 	mul.w	r2, r1, r2
 8001ece:	1a9b      	subs	r3, r3, r2
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e00f      	b.n	8001efa <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8001eda:	88fb      	ldrh	r3, [r7, #6]
 8001edc:	4a09      	ldr	r2, [pc, #36]	; (8001f04 <RTC_IsLeapYear+0x60>)
 8001ede:	fba2 1203 	umull	r1, r2, r2, r3
 8001ee2:	09d2      	lsrs	r2, r2, #7
 8001ee4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001ee8:	fb01 f202 	mul.w	r2, r1, r2
 8001eec:	1a9b      	subs	r3, r3, r2
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d101      	bne.n	8001ef8 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e000      	b.n	8001efa <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8001ef8:	2300      	movs	r3, #0
  }
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr
 8001f04:	51eb851f 	.word	0x51eb851f

08001f08 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	460b      	mov	r3, r1
 8001f12:	70fb      	strb	r3, [r7, #3]
 8001f14:	4613      	mov	r3, r2
 8001f16:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60bb      	str	r3, [r7, #8]
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001f26:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8001f28:	78fb      	ldrb	r3, [r7, #3]
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d82d      	bhi.n	8001f8a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8001f2e:	78fa      	ldrb	r2, [r7, #3]
 8001f30:	4613      	mov	r3, r2
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	4413      	add	r3, r2
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	1a9b      	subs	r3, r3, r2
 8001f3a:	4a2c      	ldr	r2, [pc, #176]	; (8001fec <RTC_WeekDayNum+0xe4>)
 8001f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f40:	085a      	lsrs	r2, r3, #1
 8001f42:	78bb      	ldrb	r3, [r7, #2]
 8001f44:	441a      	add	r2, r3
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	441a      	add	r2, r3
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	089b      	lsrs	r3, r3, #2
 8001f50:	441a      	add	r2, r3
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	3b01      	subs	r3, #1
 8001f56:	4926      	ldr	r1, [pc, #152]	; (8001ff0 <RTC_WeekDayNum+0xe8>)
 8001f58:	fba1 1303 	umull	r1, r3, r1, r3
 8001f5c:	095b      	lsrs	r3, r3, #5
 8001f5e:	1ad2      	subs	r2, r2, r3
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	3b01      	subs	r3, #1
 8001f64:	4922      	ldr	r1, [pc, #136]	; (8001ff0 <RTC_WeekDayNum+0xe8>)
 8001f66:	fba1 1303 	umull	r1, r3, r1, r3
 8001f6a:	09db      	lsrs	r3, r3, #7
 8001f6c:	4413      	add	r3, r2
 8001f6e:	1d1a      	adds	r2, r3, #4
 8001f70:	4b20      	ldr	r3, [pc, #128]	; (8001ff4 <RTC_WeekDayNum+0xec>)
 8001f72:	fba3 1302 	umull	r1, r3, r3, r2
 8001f76:	1ad1      	subs	r1, r2, r3
 8001f78:	0849      	lsrs	r1, r1, #1
 8001f7a:	440b      	add	r3, r1
 8001f7c:	0899      	lsrs	r1, r3, #2
 8001f7e:	460b      	mov	r3, r1
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	1a5b      	subs	r3, r3, r1
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	e029      	b.n	8001fde <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8001f8a:	78fa      	ldrb	r2, [r7, #3]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	4413      	add	r3, r2
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	1a9b      	subs	r3, r3, r2
 8001f96:	4a15      	ldr	r2, [pc, #84]	; (8001fec <RTC_WeekDayNum+0xe4>)
 8001f98:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9c:	085a      	lsrs	r2, r3, #1
 8001f9e:	78bb      	ldrb	r3, [r7, #2]
 8001fa0:	441a      	add	r2, r3
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	441a      	add	r2, r3
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	089b      	lsrs	r3, r3, #2
 8001faa:	441a      	add	r2, r3
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	4910      	ldr	r1, [pc, #64]	; (8001ff0 <RTC_WeekDayNum+0xe8>)
 8001fb0:	fba1 1303 	umull	r1, r3, r1, r3
 8001fb4:	095b      	lsrs	r3, r3, #5
 8001fb6:	1ad2      	subs	r2, r2, r3
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	490d      	ldr	r1, [pc, #52]	; (8001ff0 <RTC_WeekDayNum+0xe8>)
 8001fbc:	fba1 1303 	umull	r1, r3, r1, r3
 8001fc0:	09db      	lsrs	r3, r3, #7
 8001fc2:	4413      	add	r3, r2
 8001fc4:	1c9a      	adds	r2, r3, #2
 8001fc6:	4b0b      	ldr	r3, [pc, #44]	; (8001ff4 <RTC_WeekDayNum+0xec>)
 8001fc8:	fba3 1302 	umull	r1, r3, r3, r2
 8001fcc:	1ad1      	subs	r1, r2, r3
 8001fce:	0849      	lsrs	r1, r1, #1
 8001fd0:	440b      	add	r3, r1
 8001fd2:	0899      	lsrs	r1, r3, #2
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	1a5b      	subs	r3, r3, r1
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	b2db      	uxtb	r3, r3
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3714      	adds	r7, #20
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bc80      	pop	{r7}
 8001fea:	4770      	bx	lr
 8001fec:	38e38e39 	.word	0x38e38e39
 8001ff0:	51eb851f 	.word	0x51eb851f
 8001ff4:	24924925 	.word	0x24924925

08001ff8 <__errno>:
 8001ff8:	4b01      	ldr	r3, [pc, #4]	; (8002000 <__errno+0x8>)
 8001ffa:	6818      	ldr	r0, [r3, #0]
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	2000000c 	.word	0x2000000c

08002004 <__libc_init_array>:
 8002004:	b570      	push	{r4, r5, r6, lr}
 8002006:	2600      	movs	r6, #0
 8002008:	4d0c      	ldr	r5, [pc, #48]	; (800203c <__libc_init_array+0x38>)
 800200a:	4c0d      	ldr	r4, [pc, #52]	; (8002040 <__libc_init_array+0x3c>)
 800200c:	1b64      	subs	r4, r4, r5
 800200e:	10a4      	asrs	r4, r4, #2
 8002010:	42a6      	cmp	r6, r4
 8002012:	d109      	bne.n	8002028 <__libc_init_array+0x24>
 8002014:	f000 fc9c 	bl	8002950 <_init>
 8002018:	2600      	movs	r6, #0
 800201a:	4d0a      	ldr	r5, [pc, #40]	; (8002044 <__libc_init_array+0x40>)
 800201c:	4c0a      	ldr	r4, [pc, #40]	; (8002048 <__libc_init_array+0x44>)
 800201e:	1b64      	subs	r4, r4, r5
 8002020:	10a4      	asrs	r4, r4, #2
 8002022:	42a6      	cmp	r6, r4
 8002024:	d105      	bne.n	8002032 <__libc_init_array+0x2e>
 8002026:	bd70      	pop	{r4, r5, r6, pc}
 8002028:	f855 3b04 	ldr.w	r3, [r5], #4
 800202c:	4798      	blx	r3
 800202e:	3601      	adds	r6, #1
 8002030:	e7ee      	b.n	8002010 <__libc_init_array+0xc>
 8002032:	f855 3b04 	ldr.w	r3, [r5], #4
 8002036:	4798      	blx	r3
 8002038:	3601      	adds	r6, #1
 800203a:	e7f2      	b.n	8002022 <__libc_init_array+0x1e>
 800203c:	080029e4 	.word	0x080029e4
 8002040:	080029e4 	.word	0x080029e4
 8002044:	080029e4 	.word	0x080029e4
 8002048:	080029e8 	.word	0x080029e8

0800204c <memset>:
 800204c:	4603      	mov	r3, r0
 800204e:	4402      	add	r2, r0
 8002050:	4293      	cmp	r3, r2
 8002052:	d100      	bne.n	8002056 <memset+0xa>
 8002054:	4770      	bx	lr
 8002056:	f803 1b01 	strb.w	r1, [r3], #1
 800205a:	e7f9      	b.n	8002050 <memset+0x4>

0800205c <siprintf>:
 800205c:	b40e      	push	{r1, r2, r3}
 800205e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002062:	b500      	push	{lr}
 8002064:	b09c      	sub	sp, #112	; 0x70
 8002066:	ab1d      	add	r3, sp, #116	; 0x74
 8002068:	9002      	str	r0, [sp, #8]
 800206a:	9006      	str	r0, [sp, #24]
 800206c:	9107      	str	r1, [sp, #28]
 800206e:	9104      	str	r1, [sp, #16]
 8002070:	4808      	ldr	r0, [pc, #32]	; (8002094 <siprintf+0x38>)
 8002072:	4909      	ldr	r1, [pc, #36]	; (8002098 <siprintf+0x3c>)
 8002074:	f853 2b04 	ldr.w	r2, [r3], #4
 8002078:	9105      	str	r1, [sp, #20]
 800207a:	6800      	ldr	r0, [r0, #0]
 800207c:	a902      	add	r1, sp, #8
 800207e:	9301      	str	r3, [sp, #4]
 8002080:	f000 f868 	bl	8002154 <_svfiprintf_r>
 8002084:	2200      	movs	r2, #0
 8002086:	9b02      	ldr	r3, [sp, #8]
 8002088:	701a      	strb	r2, [r3, #0]
 800208a:	b01c      	add	sp, #112	; 0x70
 800208c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002090:	b003      	add	sp, #12
 8002092:	4770      	bx	lr
 8002094:	2000000c 	.word	0x2000000c
 8002098:	ffff0208 	.word	0xffff0208

0800209c <__ssputs_r>:
 800209c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80020a0:	688e      	ldr	r6, [r1, #8]
 80020a2:	4682      	mov	sl, r0
 80020a4:	429e      	cmp	r6, r3
 80020a6:	460c      	mov	r4, r1
 80020a8:	4690      	mov	r8, r2
 80020aa:	461f      	mov	r7, r3
 80020ac:	d838      	bhi.n	8002120 <__ssputs_r+0x84>
 80020ae:	898a      	ldrh	r2, [r1, #12]
 80020b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80020b4:	d032      	beq.n	800211c <__ssputs_r+0x80>
 80020b6:	6825      	ldr	r5, [r4, #0]
 80020b8:	6909      	ldr	r1, [r1, #16]
 80020ba:	3301      	adds	r3, #1
 80020bc:	eba5 0901 	sub.w	r9, r5, r1
 80020c0:	6965      	ldr	r5, [r4, #20]
 80020c2:	444b      	add	r3, r9
 80020c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80020c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80020cc:	106d      	asrs	r5, r5, #1
 80020ce:	429d      	cmp	r5, r3
 80020d0:	bf38      	it	cc
 80020d2:	461d      	movcc	r5, r3
 80020d4:	0553      	lsls	r3, r2, #21
 80020d6:	d531      	bpl.n	800213c <__ssputs_r+0xa0>
 80020d8:	4629      	mov	r1, r5
 80020da:	f000 fb6f 	bl	80027bc <_malloc_r>
 80020de:	4606      	mov	r6, r0
 80020e0:	b950      	cbnz	r0, 80020f8 <__ssputs_r+0x5c>
 80020e2:	230c      	movs	r3, #12
 80020e4:	f04f 30ff 	mov.w	r0, #4294967295
 80020e8:	f8ca 3000 	str.w	r3, [sl]
 80020ec:	89a3      	ldrh	r3, [r4, #12]
 80020ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020f2:	81a3      	strh	r3, [r4, #12]
 80020f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020f8:	464a      	mov	r2, r9
 80020fa:	6921      	ldr	r1, [r4, #16]
 80020fc:	f000 face 	bl	800269c <memcpy>
 8002100:	89a3      	ldrh	r3, [r4, #12]
 8002102:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002106:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800210a:	81a3      	strh	r3, [r4, #12]
 800210c:	6126      	str	r6, [r4, #16]
 800210e:	444e      	add	r6, r9
 8002110:	6026      	str	r6, [r4, #0]
 8002112:	463e      	mov	r6, r7
 8002114:	6165      	str	r5, [r4, #20]
 8002116:	eba5 0509 	sub.w	r5, r5, r9
 800211a:	60a5      	str	r5, [r4, #8]
 800211c:	42be      	cmp	r6, r7
 800211e:	d900      	bls.n	8002122 <__ssputs_r+0x86>
 8002120:	463e      	mov	r6, r7
 8002122:	4632      	mov	r2, r6
 8002124:	4641      	mov	r1, r8
 8002126:	6820      	ldr	r0, [r4, #0]
 8002128:	f000 fac6 	bl	80026b8 <memmove>
 800212c:	68a3      	ldr	r3, [r4, #8]
 800212e:	2000      	movs	r0, #0
 8002130:	1b9b      	subs	r3, r3, r6
 8002132:	60a3      	str	r3, [r4, #8]
 8002134:	6823      	ldr	r3, [r4, #0]
 8002136:	4433      	add	r3, r6
 8002138:	6023      	str	r3, [r4, #0]
 800213a:	e7db      	b.n	80020f4 <__ssputs_r+0x58>
 800213c:	462a      	mov	r2, r5
 800213e:	f000 fbb1 	bl	80028a4 <_realloc_r>
 8002142:	4606      	mov	r6, r0
 8002144:	2800      	cmp	r0, #0
 8002146:	d1e1      	bne.n	800210c <__ssputs_r+0x70>
 8002148:	4650      	mov	r0, sl
 800214a:	6921      	ldr	r1, [r4, #16]
 800214c:	f000 face 	bl	80026ec <_free_r>
 8002150:	e7c7      	b.n	80020e2 <__ssputs_r+0x46>
	...

08002154 <_svfiprintf_r>:
 8002154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002158:	4698      	mov	r8, r3
 800215a:	898b      	ldrh	r3, [r1, #12]
 800215c:	4607      	mov	r7, r0
 800215e:	061b      	lsls	r3, r3, #24
 8002160:	460d      	mov	r5, r1
 8002162:	4614      	mov	r4, r2
 8002164:	b09d      	sub	sp, #116	; 0x74
 8002166:	d50e      	bpl.n	8002186 <_svfiprintf_r+0x32>
 8002168:	690b      	ldr	r3, [r1, #16]
 800216a:	b963      	cbnz	r3, 8002186 <_svfiprintf_r+0x32>
 800216c:	2140      	movs	r1, #64	; 0x40
 800216e:	f000 fb25 	bl	80027bc <_malloc_r>
 8002172:	6028      	str	r0, [r5, #0]
 8002174:	6128      	str	r0, [r5, #16]
 8002176:	b920      	cbnz	r0, 8002182 <_svfiprintf_r+0x2e>
 8002178:	230c      	movs	r3, #12
 800217a:	603b      	str	r3, [r7, #0]
 800217c:	f04f 30ff 	mov.w	r0, #4294967295
 8002180:	e0d1      	b.n	8002326 <_svfiprintf_r+0x1d2>
 8002182:	2340      	movs	r3, #64	; 0x40
 8002184:	616b      	str	r3, [r5, #20]
 8002186:	2300      	movs	r3, #0
 8002188:	9309      	str	r3, [sp, #36]	; 0x24
 800218a:	2320      	movs	r3, #32
 800218c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002190:	2330      	movs	r3, #48	; 0x30
 8002192:	f04f 0901 	mov.w	r9, #1
 8002196:	f8cd 800c 	str.w	r8, [sp, #12]
 800219a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002340 <_svfiprintf_r+0x1ec>
 800219e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80021a2:	4623      	mov	r3, r4
 80021a4:	469a      	mov	sl, r3
 80021a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80021aa:	b10a      	cbz	r2, 80021b0 <_svfiprintf_r+0x5c>
 80021ac:	2a25      	cmp	r2, #37	; 0x25
 80021ae:	d1f9      	bne.n	80021a4 <_svfiprintf_r+0x50>
 80021b0:	ebba 0b04 	subs.w	fp, sl, r4
 80021b4:	d00b      	beq.n	80021ce <_svfiprintf_r+0x7a>
 80021b6:	465b      	mov	r3, fp
 80021b8:	4622      	mov	r2, r4
 80021ba:	4629      	mov	r1, r5
 80021bc:	4638      	mov	r0, r7
 80021be:	f7ff ff6d 	bl	800209c <__ssputs_r>
 80021c2:	3001      	adds	r0, #1
 80021c4:	f000 80aa 	beq.w	800231c <_svfiprintf_r+0x1c8>
 80021c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80021ca:	445a      	add	r2, fp
 80021cc:	9209      	str	r2, [sp, #36]	; 0x24
 80021ce:	f89a 3000 	ldrb.w	r3, [sl]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 80a2 	beq.w	800231c <_svfiprintf_r+0x1c8>
 80021d8:	2300      	movs	r3, #0
 80021da:	f04f 32ff 	mov.w	r2, #4294967295
 80021de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80021e2:	f10a 0a01 	add.w	sl, sl, #1
 80021e6:	9304      	str	r3, [sp, #16]
 80021e8:	9307      	str	r3, [sp, #28]
 80021ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80021ee:	931a      	str	r3, [sp, #104]	; 0x68
 80021f0:	4654      	mov	r4, sl
 80021f2:	2205      	movs	r2, #5
 80021f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80021f8:	4851      	ldr	r0, [pc, #324]	; (8002340 <_svfiprintf_r+0x1ec>)
 80021fa:	f000 fa41 	bl	8002680 <memchr>
 80021fe:	9a04      	ldr	r2, [sp, #16]
 8002200:	b9d8      	cbnz	r0, 800223a <_svfiprintf_r+0xe6>
 8002202:	06d0      	lsls	r0, r2, #27
 8002204:	bf44      	itt	mi
 8002206:	2320      	movmi	r3, #32
 8002208:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800220c:	0711      	lsls	r1, r2, #28
 800220e:	bf44      	itt	mi
 8002210:	232b      	movmi	r3, #43	; 0x2b
 8002212:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002216:	f89a 3000 	ldrb.w	r3, [sl]
 800221a:	2b2a      	cmp	r3, #42	; 0x2a
 800221c:	d015      	beq.n	800224a <_svfiprintf_r+0xf6>
 800221e:	4654      	mov	r4, sl
 8002220:	2000      	movs	r0, #0
 8002222:	f04f 0c0a 	mov.w	ip, #10
 8002226:	9a07      	ldr	r2, [sp, #28]
 8002228:	4621      	mov	r1, r4
 800222a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800222e:	3b30      	subs	r3, #48	; 0x30
 8002230:	2b09      	cmp	r3, #9
 8002232:	d94e      	bls.n	80022d2 <_svfiprintf_r+0x17e>
 8002234:	b1b0      	cbz	r0, 8002264 <_svfiprintf_r+0x110>
 8002236:	9207      	str	r2, [sp, #28]
 8002238:	e014      	b.n	8002264 <_svfiprintf_r+0x110>
 800223a:	eba0 0308 	sub.w	r3, r0, r8
 800223e:	fa09 f303 	lsl.w	r3, r9, r3
 8002242:	4313      	orrs	r3, r2
 8002244:	46a2      	mov	sl, r4
 8002246:	9304      	str	r3, [sp, #16]
 8002248:	e7d2      	b.n	80021f0 <_svfiprintf_r+0x9c>
 800224a:	9b03      	ldr	r3, [sp, #12]
 800224c:	1d19      	adds	r1, r3, #4
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	9103      	str	r1, [sp, #12]
 8002252:	2b00      	cmp	r3, #0
 8002254:	bfbb      	ittet	lt
 8002256:	425b      	neglt	r3, r3
 8002258:	f042 0202 	orrlt.w	r2, r2, #2
 800225c:	9307      	strge	r3, [sp, #28]
 800225e:	9307      	strlt	r3, [sp, #28]
 8002260:	bfb8      	it	lt
 8002262:	9204      	strlt	r2, [sp, #16]
 8002264:	7823      	ldrb	r3, [r4, #0]
 8002266:	2b2e      	cmp	r3, #46	; 0x2e
 8002268:	d10c      	bne.n	8002284 <_svfiprintf_r+0x130>
 800226a:	7863      	ldrb	r3, [r4, #1]
 800226c:	2b2a      	cmp	r3, #42	; 0x2a
 800226e:	d135      	bne.n	80022dc <_svfiprintf_r+0x188>
 8002270:	9b03      	ldr	r3, [sp, #12]
 8002272:	3402      	adds	r4, #2
 8002274:	1d1a      	adds	r2, r3, #4
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	9203      	str	r2, [sp, #12]
 800227a:	2b00      	cmp	r3, #0
 800227c:	bfb8      	it	lt
 800227e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002282:	9305      	str	r3, [sp, #20]
 8002284:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002344 <_svfiprintf_r+0x1f0>
 8002288:	2203      	movs	r2, #3
 800228a:	4650      	mov	r0, sl
 800228c:	7821      	ldrb	r1, [r4, #0]
 800228e:	f000 f9f7 	bl	8002680 <memchr>
 8002292:	b140      	cbz	r0, 80022a6 <_svfiprintf_r+0x152>
 8002294:	2340      	movs	r3, #64	; 0x40
 8002296:	eba0 000a 	sub.w	r0, r0, sl
 800229a:	fa03 f000 	lsl.w	r0, r3, r0
 800229e:	9b04      	ldr	r3, [sp, #16]
 80022a0:	3401      	adds	r4, #1
 80022a2:	4303      	orrs	r3, r0
 80022a4:	9304      	str	r3, [sp, #16]
 80022a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80022aa:	2206      	movs	r2, #6
 80022ac:	4826      	ldr	r0, [pc, #152]	; (8002348 <_svfiprintf_r+0x1f4>)
 80022ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80022b2:	f000 f9e5 	bl	8002680 <memchr>
 80022b6:	2800      	cmp	r0, #0
 80022b8:	d038      	beq.n	800232c <_svfiprintf_r+0x1d8>
 80022ba:	4b24      	ldr	r3, [pc, #144]	; (800234c <_svfiprintf_r+0x1f8>)
 80022bc:	bb1b      	cbnz	r3, 8002306 <_svfiprintf_r+0x1b2>
 80022be:	9b03      	ldr	r3, [sp, #12]
 80022c0:	3307      	adds	r3, #7
 80022c2:	f023 0307 	bic.w	r3, r3, #7
 80022c6:	3308      	adds	r3, #8
 80022c8:	9303      	str	r3, [sp, #12]
 80022ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80022cc:	4433      	add	r3, r6
 80022ce:	9309      	str	r3, [sp, #36]	; 0x24
 80022d0:	e767      	b.n	80021a2 <_svfiprintf_r+0x4e>
 80022d2:	460c      	mov	r4, r1
 80022d4:	2001      	movs	r0, #1
 80022d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80022da:	e7a5      	b.n	8002228 <_svfiprintf_r+0xd4>
 80022dc:	2300      	movs	r3, #0
 80022de:	f04f 0c0a 	mov.w	ip, #10
 80022e2:	4619      	mov	r1, r3
 80022e4:	3401      	adds	r4, #1
 80022e6:	9305      	str	r3, [sp, #20]
 80022e8:	4620      	mov	r0, r4
 80022ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80022ee:	3a30      	subs	r2, #48	; 0x30
 80022f0:	2a09      	cmp	r2, #9
 80022f2:	d903      	bls.n	80022fc <_svfiprintf_r+0x1a8>
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d0c5      	beq.n	8002284 <_svfiprintf_r+0x130>
 80022f8:	9105      	str	r1, [sp, #20]
 80022fa:	e7c3      	b.n	8002284 <_svfiprintf_r+0x130>
 80022fc:	4604      	mov	r4, r0
 80022fe:	2301      	movs	r3, #1
 8002300:	fb0c 2101 	mla	r1, ip, r1, r2
 8002304:	e7f0      	b.n	80022e8 <_svfiprintf_r+0x194>
 8002306:	ab03      	add	r3, sp, #12
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	462a      	mov	r2, r5
 800230c:	4638      	mov	r0, r7
 800230e:	4b10      	ldr	r3, [pc, #64]	; (8002350 <_svfiprintf_r+0x1fc>)
 8002310:	a904      	add	r1, sp, #16
 8002312:	f3af 8000 	nop.w
 8002316:	1c42      	adds	r2, r0, #1
 8002318:	4606      	mov	r6, r0
 800231a:	d1d6      	bne.n	80022ca <_svfiprintf_r+0x176>
 800231c:	89ab      	ldrh	r3, [r5, #12]
 800231e:	065b      	lsls	r3, r3, #25
 8002320:	f53f af2c 	bmi.w	800217c <_svfiprintf_r+0x28>
 8002324:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002326:	b01d      	add	sp, #116	; 0x74
 8002328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800232c:	ab03      	add	r3, sp, #12
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	462a      	mov	r2, r5
 8002332:	4638      	mov	r0, r7
 8002334:	4b06      	ldr	r3, [pc, #24]	; (8002350 <_svfiprintf_r+0x1fc>)
 8002336:	a904      	add	r1, sp, #16
 8002338:	f000 f87c 	bl	8002434 <_printf_i>
 800233c:	e7eb      	b.n	8002316 <_svfiprintf_r+0x1c2>
 800233e:	bf00      	nop
 8002340:	080029b0 	.word	0x080029b0
 8002344:	080029b6 	.word	0x080029b6
 8002348:	080029ba 	.word	0x080029ba
 800234c:	00000000 	.word	0x00000000
 8002350:	0800209d 	.word	0x0800209d

08002354 <_printf_common>:
 8002354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002358:	4616      	mov	r6, r2
 800235a:	4699      	mov	r9, r3
 800235c:	688a      	ldr	r2, [r1, #8]
 800235e:	690b      	ldr	r3, [r1, #16]
 8002360:	4607      	mov	r7, r0
 8002362:	4293      	cmp	r3, r2
 8002364:	bfb8      	it	lt
 8002366:	4613      	movlt	r3, r2
 8002368:	6033      	str	r3, [r6, #0]
 800236a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800236e:	460c      	mov	r4, r1
 8002370:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002374:	b10a      	cbz	r2, 800237a <_printf_common+0x26>
 8002376:	3301      	adds	r3, #1
 8002378:	6033      	str	r3, [r6, #0]
 800237a:	6823      	ldr	r3, [r4, #0]
 800237c:	0699      	lsls	r1, r3, #26
 800237e:	bf42      	ittt	mi
 8002380:	6833      	ldrmi	r3, [r6, #0]
 8002382:	3302      	addmi	r3, #2
 8002384:	6033      	strmi	r3, [r6, #0]
 8002386:	6825      	ldr	r5, [r4, #0]
 8002388:	f015 0506 	ands.w	r5, r5, #6
 800238c:	d106      	bne.n	800239c <_printf_common+0x48>
 800238e:	f104 0a19 	add.w	sl, r4, #25
 8002392:	68e3      	ldr	r3, [r4, #12]
 8002394:	6832      	ldr	r2, [r6, #0]
 8002396:	1a9b      	subs	r3, r3, r2
 8002398:	42ab      	cmp	r3, r5
 800239a:	dc28      	bgt.n	80023ee <_printf_common+0x9a>
 800239c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80023a0:	1e13      	subs	r3, r2, #0
 80023a2:	6822      	ldr	r2, [r4, #0]
 80023a4:	bf18      	it	ne
 80023a6:	2301      	movne	r3, #1
 80023a8:	0692      	lsls	r2, r2, #26
 80023aa:	d42d      	bmi.n	8002408 <_printf_common+0xb4>
 80023ac:	4649      	mov	r1, r9
 80023ae:	4638      	mov	r0, r7
 80023b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80023b4:	47c0      	blx	r8
 80023b6:	3001      	adds	r0, #1
 80023b8:	d020      	beq.n	80023fc <_printf_common+0xa8>
 80023ba:	6823      	ldr	r3, [r4, #0]
 80023bc:	68e5      	ldr	r5, [r4, #12]
 80023be:	f003 0306 	and.w	r3, r3, #6
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	bf18      	it	ne
 80023c6:	2500      	movne	r5, #0
 80023c8:	6832      	ldr	r2, [r6, #0]
 80023ca:	f04f 0600 	mov.w	r6, #0
 80023ce:	68a3      	ldr	r3, [r4, #8]
 80023d0:	bf08      	it	eq
 80023d2:	1aad      	subeq	r5, r5, r2
 80023d4:	6922      	ldr	r2, [r4, #16]
 80023d6:	bf08      	it	eq
 80023d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80023dc:	4293      	cmp	r3, r2
 80023de:	bfc4      	itt	gt
 80023e0:	1a9b      	subgt	r3, r3, r2
 80023e2:	18ed      	addgt	r5, r5, r3
 80023e4:	341a      	adds	r4, #26
 80023e6:	42b5      	cmp	r5, r6
 80023e8:	d11a      	bne.n	8002420 <_printf_common+0xcc>
 80023ea:	2000      	movs	r0, #0
 80023ec:	e008      	b.n	8002400 <_printf_common+0xac>
 80023ee:	2301      	movs	r3, #1
 80023f0:	4652      	mov	r2, sl
 80023f2:	4649      	mov	r1, r9
 80023f4:	4638      	mov	r0, r7
 80023f6:	47c0      	blx	r8
 80023f8:	3001      	adds	r0, #1
 80023fa:	d103      	bne.n	8002404 <_printf_common+0xb0>
 80023fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002404:	3501      	adds	r5, #1
 8002406:	e7c4      	b.n	8002392 <_printf_common+0x3e>
 8002408:	2030      	movs	r0, #48	; 0x30
 800240a:	18e1      	adds	r1, r4, r3
 800240c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002410:	1c5a      	adds	r2, r3, #1
 8002412:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002416:	4422      	add	r2, r4
 8002418:	3302      	adds	r3, #2
 800241a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800241e:	e7c5      	b.n	80023ac <_printf_common+0x58>
 8002420:	2301      	movs	r3, #1
 8002422:	4622      	mov	r2, r4
 8002424:	4649      	mov	r1, r9
 8002426:	4638      	mov	r0, r7
 8002428:	47c0      	blx	r8
 800242a:	3001      	adds	r0, #1
 800242c:	d0e6      	beq.n	80023fc <_printf_common+0xa8>
 800242e:	3601      	adds	r6, #1
 8002430:	e7d9      	b.n	80023e6 <_printf_common+0x92>
	...

08002434 <_printf_i>:
 8002434:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002438:	7e0f      	ldrb	r7, [r1, #24]
 800243a:	4691      	mov	r9, r2
 800243c:	2f78      	cmp	r7, #120	; 0x78
 800243e:	4680      	mov	r8, r0
 8002440:	460c      	mov	r4, r1
 8002442:	469a      	mov	sl, r3
 8002444:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002446:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800244a:	d807      	bhi.n	800245c <_printf_i+0x28>
 800244c:	2f62      	cmp	r7, #98	; 0x62
 800244e:	d80a      	bhi.n	8002466 <_printf_i+0x32>
 8002450:	2f00      	cmp	r7, #0
 8002452:	f000 80d9 	beq.w	8002608 <_printf_i+0x1d4>
 8002456:	2f58      	cmp	r7, #88	; 0x58
 8002458:	f000 80a4 	beq.w	80025a4 <_printf_i+0x170>
 800245c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002460:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002464:	e03a      	b.n	80024dc <_printf_i+0xa8>
 8002466:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800246a:	2b15      	cmp	r3, #21
 800246c:	d8f6      	bhi.n	800245c <_printf_i+0x28>
 800246e:	a101      	add	r1, pc, #4	; (adr r1, 8002474 <_printf_i+0x40>)
 8002470:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002474:	080024cd 	.word	0x080024cd
 8002478:	080024e1 	.word	0x080024e1
 800247c:	0800245d 	.word	0x0800245d
 8002480:	0800245d 	.word	0x0800245d
 8002484:	0800245d 	.word	0x0800245d
 8002488:	0800245d 	.word	0x0800245d
 800248c:	080024e1 	.word	0x080024e1
 8002490:	0800245d 	.word	0x0800245d
 8002494:	0800245d 	.word	0x0800245d
 8002498:	0800245d 	.word	0x0800245d
 800249c:	0800245d 	.word	0x0800245d
 80024a0:	080025ef 	.word	0x080025ef
 80024a4:	08002511 	.word	0x08002511
 80024a8:	080025d1 	.word	0x080025d1
 80024ac:	0800245d 	.word	0x0800245d
 80024b0:	0800245d 	.word	0x0800245d
 80024b4:	08002611 	.word	0x08002611
 80024b8:	0800245d 	.word	0x0800245d
 80024bc:	08002511 	.word	0x08002511
 80024c0:	0800245d 	.word	0x0800245d
 80024c4:	0800245d 	.word	0x0800245d
 80024c8:	080025d9 	.word	0x080025d9
 80024cc:	682b      	ldr	r3, [r5, #0]
 80024ce:	1d1a      	adds	r2, r3, #4
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	602a      	str	r2, [r5, #0]
 80024d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80024d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80024dc:	2301      	movs	r3, #1
 80024de:	e0a4      	b.n	800262a <_printf_i+0x1f6>
 80024e0:	6820      	ldr	r0, [r4, #0]
 80024e2:	6829      	ldr	r1, [r5, #0]
 80024e4:	0606      	lsls	r6, r0, #24
 80024e6:	f101 0304 	add.w	r3, r1, #4
 80024ea:	d50a      	bpl.n	8002502 <_printf_i+0xce>
 80024ec:	680e      	ldr	r6, [r1, #0]
 80024ee:	602b      	str	r3, [r5, #0]
 80024f0:	2e00      	cmp	r6, #0
 80024f2:	da03      	bge.n	80024fc <_printf_i+0xc8>
 80024f4:	232d      	movs	r3, #45	; 0x2d
 80024f6:	4276      	negs	r6, r6
 80024f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80024fc:	230a      	movs	r3, #10
 80024fe:	485e      	ldr	r0, [pc, #376]	; (8002678 <_printf_i+0x244>)
 8002500:	e019      	b.n	8002536 <_printf_i+0x102>
 8002502:	680e      	ldr	r6, [r1, #0]
 8002504:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002508:	602b      	str	r3, [r5, #0]
 800250a:	bf18      	it	ne
 800250c:	b236      	sxthne	r6, r6
 800250e:	e7ef      	b.n	80024f0 <_printf_i+0xbc>
 8002510:	682b      	ldr	r3, [r5, #0]
 8002512:	6820      	ldr	r0, [r4, #0]
 8002514:	1d19      	adds	r1, r3, #4
 8002516:	6029      	str	r1, [r5, #0]
 8002518:	0601      	lsls	r1, r0, #24
 800251a:	d501      	bpl.n	8002520 <_printf_i+0xec>
 800251c:	681e      	ldr	r6, [r3, #0]
 800251e:	e002      	b.n	8002526 <_printf_i+0xf2>
 8002520:	0646      	lsls	r6, r0, #25
 8002522:	d5fb      	bpl.n	800251c <_printf_i+0xe8>
 8002524:	881e      	ldrh	r6, [r3, #0]
 8002526:	2f6f      	cmp	r7, #111	; 0x6f
 8002528:	bf0c      	ite	eq
 800252a:	2308      	moveq	r3, #8
 800252c:	230a      	movne	r3, #10
 800252e:	4852      	ldr	r0, [pc, #328]	; (8002678 <_printf_i+0x244>)
 8002530:	2100      	movs	r1, #0
 8002532:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002536:	6865      	ldr	r5, [r4, #4]
 8002538:	2d00      	cmp	r5, #0
 800253a:	bfa8      	it	ge
 800253c:	6821      	ldrge	r1, [r4, #0]
 800253e:	60a5      	str	r5, [r4, #8]
 8002540:	bfa4      	itt	ge
 8002542:	f021 0104 	bicge.w	r1, r1, #4
 8002546:	6021      	strge	r1, [r4, #0]
 8002548:	b90e      	cbnz	r6, 800254e <_printf_i+0x11a>
 800254a:	2d00      	cmp	r5, #0
 800254c:	d04d      	beq.n	80025ea <_printf_i+0x1b6>
 800254e:	4615      	mov	r5, r2
 8002550:	fbb6 f1f3 	udiv	r1, r6, r3
 8002554:	fb03 6711 	mls	r7, r3, r1, r6
 8002558:	5dc7      	ldrb	r7, [r0, r7]
 800255a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800255e:	4637      	mov	r7, r6
 8002560:	42bb      	cmp	r3, r7
 8002562:	460e      	mov	r6, r1
 8002564:	d9f4      	bls.n	8002550 <_printf_i+0x11c>
 8002566:	2b08      	cmp	r3, #8
 8002568:	d10b      	bne.n	8002582 <_printf_i+0x14e>
 800256a:	6823      	ldr	r3, [r4, #0]
 800256c:	07de      	lsls	r6, r3, #31
 800256e:	d508      	bpl.n	8002582 <_printf_i+0x14e>
 8002570:	6923      	ldr	r3, [r4, #16]
 8002572:	6861      	ldr	r1, [r4, #4]
 8002574:	4299      	cmp	r1, r3
 8002576:	bfde      	ittt	le
 8002578:	2330      	movle	r3, #48	; 0x30
 800257a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800257e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002582:	1b52      	subs	r2, r2, r5
 8002584:	6122      	str	r2, [r4, #16]
 8002586:	464b      	mov	r3, r9
 8002588:	4621      	mov	r1, r4
 800258a:	4640      	mov	r0, r8
 800258c:	f8cd a000 	str.w	sl, [sp]
 8002590:	aa03      	add	r2, sp, #12
 8002592:	f7ff fedf 	bl	8002354 <_printf_common>
 8002596:	3001      	adds	r0, #1
 8002598:	d14c      	bne.n	8002634 <_printf_i+0x200>
 800259a:	f04f 30ff 	mov.w	r0, #4294967295
 800259e:	b004      	add	sp, #16
 80025a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025a4:	4834      	ldr	r0, [pc, #208]	; (8002678 <_printf_i+0x244>)
 80025a6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80025aa:	6829      	ldr	r1, [r5, #0]
 80025ac:	6823      	ldr	r3, [r4, #0]
 80025ae:	f851 6b04 	ldr.w	r6, [r1], #4
 80025b2:	6029      	str	r1, [r5, #0]
 80025b4:	061d      	lsls	r5, r3, #24
 80025b6:	d514      	bpl.n	80025e2 <_printf_i+0x1ae>
 80025b8:	07df      	lsls	r7, r3, #31
 80025ba:	bf44      	itt	mi
 80025bc:	f043 0320 	orrmi.w	r3, r3, #32
 80025c0:	6023      	strmi	r3, [r4, #0]
 80025c2:	b91e      	cbnz	r6, 80025cc <_printf_i+0x198>
 80025c4:	6823      	ldr	r3, [r4, #0]
 80025c6:	f023 0320 	bic.w	r3, r3, #32
 80025ca:	6023      	str	r3, [r4, #0]
 80025cc:	2310      	movs	r3, #16
 80025ce:	e7af      	b.n	8002530 <_printf_i+0xfc>
 80025d0:	6823      	ldr	r3, [r4, #0]
 80025d2:	f043 0320 	orr.w	r3, r3, #32
 80025d6:	6023      	str	r3, [r4, #0]
 80025d8:	2378      	movs	r3, #120	; 0x78
 80025da:	4828      	ldr	r0, [pc, #160]	; (800267c <_printf_i+0x248>)
 80025dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80025e0:	e7e3      	b.n	80025aa <_printf_i+0x176>
 80025e2:	0659      	lsls	r1, r3, #25
 80025e4:	bf48      	it	mi
 80025e6:	b2b6      	uxthmi	r6, r6
 80025e8:	e7e6      	b.n	80025b8 <_printf_i+0x184>
 80025ea:	4615      	mov	r5, r2
 80025ec:	e7bb      	b.n	8002566 <_printf_i+0x132>
 80025ee:	682b      	ldr	r3, [r5, #0]
 80025f0:	6826      	ldr	r6, [r4, #0]
 80025f2:	1d18      	adds	r0, r3, #4
 80025f4:	6961      	ldr	r1, [r4, #20]
 80025f6:	6028      	str	r0, [r5, #0]
 80025f8:	0635      	lsls	r5, r6, #24
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	d501      	bpl.n	8002602 <_printf_i+0x1ce>
 80025fe:	6019      	str	r1, [r3, #0]
 8002600:	e002      	b.n	8002608 <_printf_i+0x1d4>
 8002602:	0670      	lsls	r0, r6, #25
 8002604:	d5fb      	bpl.n	80025fe <_printf_i+0x1ca>
 8002606:	8019      	strh	r1, [r3, #0]
 8002608:	2300      	movs	r3, #0
 800260a:	4615      	mov	r5, r2
 800260c:	6123      	str	r3, [r4, #16]
 800260e:	e7ba      	b.n	8002586 <_printf_i+0x152>
 8002610:	682b      	ldr	r3, [r5, #0]
 8002612:	2100      	movs	r1, #0
 8002614:	1d1a      	adds	r2, r3, #4
 8002616:	602a      	str	r2, [r5, #0]
 8002618:	681d      	ldr	r5, [r3, #0]
 800261a:	6862      	ldr	r2, [r4, #4]
 800261c:	4628      	mov	r0, r5
 800261e:	f000 f82f 	bl	8002680 <memchr>
 8002622:	b108      	cbz	r0, 8002628 <_printf_i+0x1f4>
 8002624:	1b40      	subs	r0, r0, r5
 8002626:	6060      	str	r0, [r4, #4]
 8002628:	6863      	ldr	r3, [r4, #4]
 800262a:	6123      	str	r3, [r4, #16]
 800262c:	2300      	movs	r3, #0
 800262e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002632:	e7a8      	b.n	8002586 <_printf_i+0x152>
 8002634:	462a      	mov	r2, r5
 8002636:	4649      	mov	r1, r9
 8002638:	4640      	mov	r0, r8
 800263a:	6923      	ldr	r3, [r4, #16]
 800263c:	47d0      	blx	sl
 800263e:	3001      	adds	r0, #1
 8002640:	d0ab      	beq.n	800259a <_printf_i+0x166>
 8002642:	6823      	ldr	r3, [r4, #0]
 8002644:	079b      	lsls	r3, r3, #30
 8002646:	d413      	bmi.n	8002670 <_printf_i+0x23c>
 8002648:	68e0      	ldr	r0, [r4, #12]
 800264a:	9b03      	ldr	r3, [sp, #12]
 800264c:	4298      	cmp	r0, r3
 800264e:	bfb8      	it	lt
 8002650:	4618      	movlt	r0, r3
 8002652:	e7a4      	b.n	800259e <_printf_i+0x16a>
 8002654:	2301      	movs	r3, #1
 8002656:	4632      	mov	r2, r6
 8002658:	4649      	mov	r1, r9
 800265a:	4640      	mov	r0, r8
 800265c:	47d0      	blx	sl
 800265e:	3001      	adds	r0, #1
 8002660:	d09b      	beq.n	800259a <_printf_i+0x166>
 8002662:	3501      	adds	r5, #1
 8002664:	68e3      	ldr	r3, [r4, #12]
 8002666:	9903      	ldr	r1, [sp, #12]
 8002668:	1a5b      	subs	r3, r3, r1
 800266a:	42ab      	cmp	r3, r5
 800266c:	dcf2      	bgt.n	8002654 <_printf_i+0x220>
 800266e:	e7eb      	b.n	8002648 <_printf_i+0x214>
 8002670:	2500      	movs	r5, #0
 8002672:	f104 0619 	add.w	r6, r4, #25
 8002676:	e7f5      	b.n	8002664 <_printf_i+0x230>
 8002678:	080029c1 	.word	0x080029c1
 800267c:	080029d2 	.word	0x080029d2

08002680 <memchr>:
 8002680:	4603      	mov	r3, r0
 8002682:	b510      	push	{r4, lr}
 8002684:	b2c9      	uxtb	r1, r1
 8002686:	4402      	add	r2, r0
 8002688:	4293      	cmp	r3, r2
 800268a:	4618      	mov	r0, r3
 800268c:	d101      	bne.n	8002692 <memchr+0x12>
 800268e:	2000      	movs	r0, #0
 8002690:	e003      	b.n	800269a <memchr+0x1a>
 8002692:	7804      	ldrb	r4, [r0, #0]
 8002694:	3301      	adds	r3, #1
 8002696:	428c      	cmp	r4, r1
 8002698:	d1f6      	bne.n	8002688 <memchr+0x8>
 800269a:	bd10      	pop	{r4, pc}

0800269c <memcpy>:
 800269c:	440a      	add	r2, r1
 800269e:	4291      	cmp	r1, r2
 80026a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80026a4:	d100      	bne.n	80026a8 <memcpy+0xc>
 80026a6:	4770      	bx	lr
 80026a8:	b510      	push	{r4, lr}
 80026aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80026ae:	4291      	cmp	r1, r2
 80026b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80026b4:	d1f9      	bne.n	80026aa <memcpy+0xe>
 80026b6:	bd10      	pop	{r4, pc}

080026b8 <memmove>:
 80026b8:	4288      	cmp	r0, r1
 80026ba:	b510      	push	{r4, lr}
 80026bc:	eb01 0402 	add.w	r4, r1, r2
 80026c0:	d902      	bls.n	80026c8 <memmove+0x10>
 80026c2:	4284      	cmp	r4, r0
 80026c4:	4623      	mov	r3, r4
 80026c6:	d807      	bhi.n	80026d8 <memmove+0x20>
 80026c8:	1e43      	subs	r3, r0, #1
 80026ca:	42a1      	cmp	r1, r4
 80026cc:	d008      	beq.n	80026e0 <memmove+0x28>
 80026ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80026d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80026d6:	e7f8      	b.n	80026ca <memmove+0x12>
 80026d8:	4601      	mov	r1, r0
 80026da:	4402      	add	r2, r0
 80026dc:	428a      	cmp	r2, r1
 80026de:	d100      	bne.n	80026e2 <memmove+0x2a>
 80026e0:	bd10      	pop	{r4, pc}
 80026e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80026e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80026ea:	e7f7      	b.n	80026dc <memmove+0x24>

080026ec <_free_r>:
 80026ec:	b538      	push	{r3, r4, r5, lr}
 80026ee:	4605      	mov	r5, r0
 80026f0:	2900      	cmp	r1, #0
 80026f2:	d040      	beq.n	8002776 <_free_r+0x8a>
 80026f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80026f8:	1f0c      	subs	r4, r1, #4
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	bfb8      	it	lt
 80026fe:	18e4      	addlt	r4, r4, r3
 8002700:	f000 f910 	bl	8002924 <__malloc_lock>
 8002704:	4a1c      	ldr	r2, [pc, #112]	; (8002778 <_free_r+0x8c>)
 8002706:	6813      	ldr	r3, [r2, #0]
 8002708:	b933      	cbnz	r3, 8002718 <_free_r+0x2c>
 800270a:	6063      	str	r3, [r4, #4]
 800270c:	6014      	str	r4, [r2, #0]
 800270e:	4628      	mov	r0, r5
 8002710:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002714:	f000 b90c 	b.w	8002930 <__malloc_unlock>
 8002718:	42a3      	cmp	r3, r4
 800271a:	d908      	bls.n	800272e <_free_r+0x42>
 800271c:	6820      	ldr	r0, [r4, #0]
 800271e:	1821      	adds	r1, r4, r0
 8002720:	428b      	cmp	r3, r1
 8002722:	bf01      	itttt	eq
 8002724:	6819      	ldreq	r1, [r3, #0]
 8002726:	685b      	ldreq	r3, [r3, #4]
 8002728:	1809      	addeq	r1, r1, r0
 800272a:	6021      	streq	r1, [r4, #0]
 800272c:	e7ed      	b.n	800270a <_free_r+0x1e>
 800272e:	461a      	mov	r2, r3
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	b10b      	cbz	r3, 8002738 <_free_r+0x4c>
 8002734:	42a3      	cmp	r3, r4
 8002736:	d9fa      	bls.n	800272e <_free_r+0x42>
 8002738:	6811      	ldr	r1, [r2, #0]
 800273a:	1850      	adds	r0, r2, r1
 800273c:	42a0      	cmp	r0, r4
 800273e:	d10b      	bne.n	8002758 <_free_r+0x6c>
 8002740:	6820      	ldr	r0, [r4, #0]
 8002742:	4401      	add	r1, r0
 8002744:	1850      	adds	r0, r2, r1
 8002746:	4283      	cmp	r3, r0
 8002748:	6011      	str	r1, [r2, #0]
 800274a:	d1e0      	bne.n	800270e <_free_r+0x22>
 800274c:	6818      	ldr	r0, [r3, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	4401      	add	r1, r0
 8002752:	6011      	str	r1, [r2, #0]
 8002754:	6053      	str	r3, [r2, #4]
 8002756:	e7da      	b.n	800270e <_free_r+0x22>
 8002758:	d902      	bls.n	8002760 <_free_r+0x74>
 800275a:	230c      	movs	r3, #12
 800275c:	602b      	str	r3, [r5, #0]
 800275e:	e7d6      	b.n	800270e <_free_r+0x22>
 8002760:	6820      	ldr	r0, [r4, #0]
 8002762:	1821      	adds	r1, r4, r0
 8002764:	428b      	cmp	r3, r1
 8002766:	bf01      	itttt	eq
 8002768:	6819      	ldreq	r1, [r3, #0]
 800276a:	685b      	ldreq	r3, [r3, #4]
 800276c:	1809      	addeq	r1, r1, r0
 800276e:	6021      	streq	r1, [r4, #0]
 8002770:	6063      	str	r3, [r4, #4]
 8002772:	6054      	str	r4, [r2, #4]
 8002774:	e7cb      	b.n	800270e <_free_r+0x22>
 8002776:	bd38      	pop	{r3, r4, r5, pc}
 8002778:	200000b8 	.word	0x200000b8

0800277c <sbrk_aligned>:
 800277c:	b570      	push	{r4, r5, r6, lr}
 800277e:	4e0e      	ldr	r6, [pc, #56]	; (80027b8 <sbrk_aligned+0x3c>)
 8002780:	460c      	mov	r4, r1
 8002782:	6831      	ldr	r1, [r6, #0]
 8002784:	4605      	mov	r5, r0
 8002786:	b911      	cbnz	r1, 800278e <sbrk_aligned+0x12>
 8002788:	f000 f8bc 	bl	8002904 <_sbrk_r>
 800278c:	6030      	str	r0, [r6, #0]
 800278e:	4621      	mov	r1, r4
 8002790:	4628      	mov	r0, r5
 8002792:	f000 f8b7 	bl	8002904 <_sbrk_r>
 8002796:	1c43      	adds	r3, r0, #1
 8002798:	d00a      	beq.n	80027b0 <sbrk_aligned+0x34>
 800279a:	1cc4      	adds	r4, r0, #3
 800279c:	f024 0403 	bic.w	r4, r4, #3
 80027a0:	42a0      	cmp	r0, r4
 80027a2:	d007      	beq.n	80027b4 <sbrk_aligned+0x38>
 80027a4:	1a21      	subs	r1, r4, r0
 80027a6:	4628      	mov	r0, r5
 80027a8:	f000 f8ac 	bl	8002904 <_sbrk_r>
 80027ac:	3001      	adds	r0, #1
 80027ae:	d101      	bne.n	80027b4 <sbrk_aligned+0x38>
 80027b0:	f04f 34ff 	mov.w	r4, #4294967295
 80027b4:	4620      	mov	r0, r4
 80027b6:	bd70      	pop	{r4, r5, r6, pc}
 80027b8:	200000bc 	.word	0x200000bc

080027bc <_malloc_r>:
 80027bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027c0:	1ccd      	adds	r5, r1, #3
 80027c2:	f025 0503 	bic.w	r5, r5, #3
 80027c6:	3508      	adds	r5, #8
 80027c8:	2d0c      	cmp	r5, #12
 80027ca:	bf38      	it	cc
 80027cc:	250c      	movcc	r5, #12
 80027ce:	2d00      	cmp	r5, #0
 80027d0:	4607      	mov	r7, r0
 80027d2:	db01      	blt.n	80027d8 <_malloc_r+0x1c>
 80027d4:	42a9      	cmp	r1, r5
 80027d6:	d905      	bls.n	80027e4 <_malloc_r+0x28>
 80027d8:	230c      	movs	r3, #12
 80027da:	2600      	movs	r6, #0
 80027dc:	603b      	str	r3, [r7, #0]
 80027de:	4630      	mov	r0, r6
 80027e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80027e4:	4e2e      	ldr	r6, [pc, #184]	; (80028a0 <_malloc_r+0xe4>)
 80027e6:	f000 f89d 	bl	8002924 <__malloc_lock>
 80027ea:	6833      	ldr	r3, [r6, #0]
 80027ec:	461c      	mov	r4, r3
 80027ee:	bb34      	cbnz	r4, 800283e <_malloc_r+0x82>
 80027f0:	4629      	mov	r1, r5
 80027f2:	4638      	mov	r0, r7
 80027f4:	f7ff ffc2 	bl	800277c <sbrk_aligned>
 80027f8:	1c43      	adds	r3, r0, #1
 80027fa:	4604      	mov	r4, r0
 80027fc:	d14d      	bne.n	800289a <_malloc_r+0xde>
 80027fe:	6834      	ldr	r4, [r6, #0]
 8002800:	4626      	mov	r6, r4
 8002802:	2e00      	cmp	r6, #0
 8002804:	d140      	bne.n	8002888 <_malloc_r+0xcc>
 8002806:	6823      	ldr	r3, [r4, #0]
 8002808:	4631      	mov	r1, r6
 800280a:	4638      	mov	r0, r7
 800280c:	eb04 0803 	add.w	r8, r4, r3
 8002810:	f000 f878 	bl	8002904 <_sbrk_r>
 8002814:	4580      	cmp	r8, r0
 8002816:	d13a      	bne.n	800288e <_malloc_r+0xd2>
 8002818:	6821      	ldr	r1, [r4, #0]
 800281a:	3503      	adds	r5, #3
 800281c:	1a6d      	subs	r5, r5, r1
 800281e:	f025 0503 	bic.w	r5, r5, #3
 8002822:	3508      	adds	r5, #8
 8002824:	2d0c      	cmp	r5, #12
 8002826:	bf38      	it	cc
 8002828:	250c      	movcc	r5, #12
 800282a:	4638      	mov	r0, r7
 800282c:	4629      	mov	r1, r5
 800282e:	f7ff ffa5 	bl	800277c <sbrk_aligned>
 8002832:	3001      	adds	r0, #1
 8002834:	d02b      	beq.n	800288e <_malloc_r+0xd2>
 8002836:	6823      	ldr	r3, [r4, #0]
 8002838:	442b      	add	r3, r5
 800283a:	6023      	str	r3, [r4, #0]
 800283c:	e00e      	b.n	800285c <_malloc_r+0xa0>
 800283e:	6822      	ldr	r2, [r4, #0]
 8002840:	1b52      	subs	r2, r2, r5
 8002842:	d41e      	bmi.n	8002882 <_malloc_r+0xc6>
 8002844:	2a0b      	cmp	r2, #11
 8002846:	d916      	bls.n	8002876 <_malloc_r+0xba>
 8002848:	1961      	adds	r1, r4, r5
 800284a:	42a3      	cmp	r3, r4
 800284c:	6025      	str	r5, [r4, #0]
 800284e:	bf18      	it	ne
 8002850:	6059      	strne	r1, [r3, #4]
 8002852:	6863      	ldr	r3, [r4, #4]
 8002854:	bf08      	it	eq
 8002856:	6031      	streq	r1, [r6, #0]
 8002858:	5162      	str	r2, [r4, r5]
 800285a:	604b      	str	r3, [r1, #4]
 800285c:	4638      	mov	r0, r7
 800285e:	f104 060b 	add.w	r6, r4, #11
 8002862:	f000 f865 	bl	8002930 <__malloc_unlock>
 8002866:	f026 0607 	bic.w	r6, r6, #7
 800286a:	1d23      	adds	r3, r4, #4
 800286c:	1af2      	subs	r2, r6, r3
 800286e:	d0b6      	beq.n	80027de <_malloc_r+0x22>
 8002870:	1b9b      	subs	r3, r3, r6
 8002872:	50a3      	str	r3, [r4, r2]
 8002874:	e7b3      	b.n	80027de <_malloc_r+0x22>
 8002876:	6862      	ldr	r2, [r4, #4]
 8002878:	42a3      	cmp	r3, r4
 800287a:	bf0c      	ite	eq
 800287c:	6032      	streq	r2, [r6, #0]
 800287e:	605a      	strne	r2, [r3, #4]
 8002880:	e7ec      	b.n	800285c <_malloc_r+0xa0>
 8002882:	4623      	mov	r3, r4
 8002884:	6864      	ldr	r4, [r4, #4]
 8002886:	e7b2      	b.n	80027ee <_malloc_r+0x32>
 8002888:	4634      	mov	r4, r6
 800288a:	6876      	ldr	r6, [r6, #4]
 800288c:	e7b9      	b.n	8002802 <_malloc_r+0x46>
 800288e:	230c      	movs	r3, #12
 8002890:	4638      	mov	r0, r7
 8002892:	603b      	str	r3, [r7, #0]
 8002894:	f000 f84c 	bl	8002930 <__malloc_unlock>
 8002898:	e7a1      	b.n	80027de <_malloc_r+0x22>
 800289a:	6025      	str	r5, [r4, #0]
 800289c:	e7de      	b.n	800285c <_malloc_r+0xa0>
 800289e:	bf00      	nop
 80028a0:	200000b8 	.word	0x200000b8

080028a4 <_realloc_r>:
 80028a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028a8:	4680      	mov	r8, r0
 80028aa:	4614      	mov	r4, r2
 80028ac:	460e      	mov	r6, r1
 80028ae:	b921      	cbnz	r1, 80028ba <_realloc_r+0x16>
 80028b0:	4611      	mov	r1, r2
 80028b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80028b6:	f7ff bf81 	b.w	80027bc <_malloc_r>
 80028ba:	b92a      	cbnz	r2, 80028c8 <_realloc_r+0x24>
 80028bc:	f7ff ff16 	bl	80026ec <_free_r>
 80028c0:	4625      	mov	r5, r4
 80028c2:	4628      	mov	r0, r5
 80028c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028c8:	f000 f838 	bl	800293c <_malloc_usable_size_r>
 80028cc:	4284      	cmp	r4, r0
 80028ce:	4607      	mov	r7, r0
 80028d0:	d802      	bhi.n	80028d8 <_realloc_r+0x34>
 80028d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80028d6:	d812      	bhi.n	80028fe <_realloc_r+0x5a>
 80028d8:	4621      	mov	r1, r4
 80028da:	4640      	mov	r0, r8
 80028dc:	f7ff ff6e 	bl	80027bc <_malloc_r>
 80028e0:	4605      	mov	r5, r0
 80028e2:	2800      	cmp	r0, #0
 80028e4:	d0ed      	beq.n	80028c2 <_realloc_r+0x1e>
 80028e6:	42bc      	cmp	r4, r7
 80028e8:	4622      	mov	r2, r4
 80028ea:	4631      	mov	r1, r6
 80028ec:	bf28      	it	cs
 80028ee:	463a      	movcs	r2, r7
 80028f0:	f7ff fed4 	bl	800269c <memcpy>
 80028f4:	4631      	mov	r1, r6
 80028f6:	4640      	mov	r0, r8
 80028f8:	f7ff fef8 	bl	80026ec <_free_r>
 80028fc:	e7e1      	b.n	80028c2 <_realloc_r+0x1e>
 80028fe:	4635      	mov	r5, r6
 8002900:	e7df      	b.n	80028c2 <_realloc_r+0x1e>
	...

08002904 <_sbrk_r>:
 8002904:	b538      	push	{r3, r4, r5, lr}
 8002906:	2300      	movs	r3, #0
 8002908:	4d05      	ldr	r5, [pc, #20]	; (8002920 <_sbrk_r+0x1c>)
 800290a:	4604      	mov	r4, r0
 800290c:	4608      	mov	r0, r1
 800290e:	602b      	str	r3, [r5, #0]
 8002910:	f7fd fdd8 	bl	80004c4 <_sbrk>
 8002914:	1c43      	adds	r3, r0, #1
 8002916:	d102      	bne.n	800291e <_sbrk_r+0x1a>
 8002918:	682b      	ldr	r3, [r5, #0]
 800291a:	b103      	cbz	r3, 800291e <_sbrk_r+0x1a>
 800291c:	6023      	str	r3, [r4, #0]
 800291e:	bd38      	pop	{r3, r4, r5, pc}
 8002920:	200000c0 	.word	0x200000c0

08002924 <__malloc_lock>:
 8002924:	4801      	ldr	r0, [pc, #4]	; (800292c <__malloc_lock+0x8>)
 8002926:	f000 b811 	b.w	800294c <__retarget_lock_acquire_recursive>
 800292a:	bf00      	nop
 800292c:	200000c4 	.word	0x200000c4

08002930 <__malloc_unlock>:
 8002930:	4801      	ldr	r0, [pc, #4]	; (8002938 <__malloc_unlock+0x8>)
 8002932:	f000 b80c 	b.w	800294e <__retarget_lock_release_recursive>
 8002936:	bf00      	nop
 8002938:	200000c4 	.word	0x200000c4

0800293c <_malloc_usable_size_r>:
 800293c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002940:	1f18      	subs	r0, r3, #4
 8002942:	2b00      	cmp	r3, #0
 8002944:	bfbc      	itt	lt
 8002946:	580b      	ldrlt	r3, [r1, r0]
 8002948:	18c0      	addlt	r0, r0, r3
 800294a:	4770      	bx	lr

0800294c <__retarget_lock_acquire_recursive>:
 800294c:	4770      	bx	lr

0800294e <__retarget_lock_release_recursive>:
 800294e:	4770      	bx	lr

08002950 <_init>:
 8002950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002952:	bf00      	nop
 8002954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002956:	bc08      	pop	{r3}
 8002958:	469e      	mov	lr, r3
 800295a:	4770      	bx	lr

0800295c <_fini>:
 800295c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800295e:	bf00      	nop
 8002960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002962:	bc08      	pop	{r3}
 8002964:	469e      	mov	lr, r3
 8002966:	4770      	bx	lr
