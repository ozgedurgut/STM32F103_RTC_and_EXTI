
Stm32f103_rtc_and_exti.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cb0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08002dbc  08002dbc  00012dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e38  08002e38  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002e38  08002e38  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e38  08002e38  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e38  08002e38  00012e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e3c  08002e3c  00012e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002e40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000070  08002eb0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  08002eb0  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004db1  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001578  00000000  00000000  00024e4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005f8  00000000  00000000  000263c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000530  00000000  00000000  000269c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000171bf  00000000  00000000  00026ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000710d  00000000  00000000  0003e0af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000822ad  00000000  00000000  000451bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c7469  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019b8  00000000  00000000  000c74bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002da4 	.word	0x08002da4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002da4 	.word	0x08002da4

0800014c <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin){
 8000156:	88fb      	ldrh	r3, [r7, #6]
 8000158:	2b04      	cmp	r3, #4
 800015a:	d01a      	beq.n	8000192 <HAL_GPIO_EXTI_Callback+0x46>
 800015c:	2b04      	cmp	r3, #4
 800015e:	dc4b      	bgt.n	80001f8 <HAL_GPIO_EXTI_Callback+0xac>
 8000160:	2b01      	cmp	r3, #1
 8000162:	d002      	beq.n	800016a <HAL_GPIO_EXTI_Callback+0x1e>
 8000164:	2b02      	cmp	r3, #2
 8000166:	d00a      	beq.n	800017e <HAL_GPIO_EXTI_Callback+0x32>
		button1=0;
		button2=1;
		break;
	}

}
 8000168:	e046      	b.n	80001f8 <HAL_GPIO_EXTI_Callback+0xac>
		button0=1;
 800016a:	4b25      	ldr	r3, [pc, #148]	; (8000200 <HAL_GPIO_EXTI_Callback+0xb4>)
 800016c:	2201      	movs	r2, #1
 800016e:	701a      	strb	r2, [r3, #0]
		button1=0;
 8000170:	4b24      	ldr	r3, [pc, #144]	; (8000204 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000172:	2200      	movs	r2, #0
 8000174:	701a      	strb	r2, [r3, #0]
		button2=0;
 8000176:	4b24      	ldr	r3, [pc, #144]	; (8000208 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000178:	2200      	movs	r2, #0
 800017a:	701a      	strb	r2, [r3, #0]
		break;
 800017c:	e03c      	b.n	80001f8 <HAL_GPIO_EXTI_Callback+0xac>
		button0=0;
 800017e:	4b20      	ldr	r3, [pc, #128]	; (8000200 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000180:	2200      	movs	r2, #0
 8000182:	701a      	strb	r2, [r3, #0]
		button1=1;
 8000184:	4b1f      	ldr	r3, [pc, #124]	; (8000204 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000186:	2201      	movs	r2, #1
 8000188:	701a      	strb	r2, [r3, #0]
		button2=0;
 800018a:	4b1f      	ldr	r3, [pc, #124]	; (8000208 <HAL_GPIO_EXTI_Callback+0xbc>)
 800018c:	2200      	movs	r2, #0
 800018e:	701a      	strb	r2, [r3, #0]
		break;
 8000190:	e032      	b.n	80001f8 <HAL_GPIO_EXTI_Callback+0xac>
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000192:	2200      	movs	r2, #0
 8000194:	491d      	ldr	r1, [pc, #116]	; (800020c <HAL_GPIO_EXTI_Callback+0xc0>)
 8000196:	481e      	ldr	r0, [pc, #120]	; (8000210 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000198:	f001 fcd4 	bl	8001b44 <HAL_RTC_GetTime>
		sprintf(firstTime,"%02d.%02d.%02d",sTime.Hours,sTime.Minutes,sTime.Seconds);
 800019c:	4b1b      	ldr	r3, [pc, #108]	; (800020c <HAL_GPIO_EXTI_Callback+0xc0>)
 800019e:	781b      	ldrb	r3, [r3, #0]
 80001a0:	461a      	mov	r2, r3
 80001a2:	4b1a      	ldr	r3, [pc, #104]	; (800020c <HAL_GPIO_EXTI_Callback+0xc0>)
 80001a4:	785b      	ldrb	r3, [r3, #1]
 80001a6:	4619      	mov	r1, r3
 80001a8:	4b18      	ldr	r3, [pc, #96]	; (800020c <HAL_GPIO_EXTI_Callback+0xc0>)
 80001aa:	789b      	ldrb	r3, [r3, #2]
 80001ac:	9300      	str	r3, [sp, #0]
 80001ae:	460b      	mov	r3, r1
 80001b0:	4918      	ldr	r1, [pc, #96]	; (8000214 <HAL_GPIO_EXTI_Callback+0xc8>)
 80001b2:	4819      	ldr	r0, [pc, #100]	; (8000218 <HAL_GPIO_EXTI_Callback+0xcc>)
 80001b4:	f002 f97c 	bl	80024b0 <siprintf>
		firstTimeInSeconds = sTime.Seconds + sTime.Minutes * 60 + sTime.Hours * 60 * 60;
 80001b8:	4b14      	ldr	r3, [pc, #80]	; (800020c <HAL_GPIO_EXTI_Callback+0xc0>)
 80001ba:	789b      	ldrb	r3, [r3, #2]
 80001bc:	4619      	mov	r1, r3
 80001be:	4b13      	ldr	r3, [pc, #76]	; (800020c <HAL_GPIO_EXTI_Callback+0xc0>)
 80001c0:	785b      	ldrb	r3, [r3, #1]
 80001c2:	461a      	mov	r2, r3
 80001c4:	4613      	mov	r3, r2
 80001c6:	011b      	lsls	r3, r3, #4
 80001c8:	1a9b      	subs	r3, r3, r2
 80001ca:	009b      	lsls	r3, r3, #2
 80001cc:	18ca      	adds	r2, r1, r3
 80001ce:	4b0f      	ldr	r3, [pc, #60]	; (800020c <HAL_GPIO_EXTI_Callback+0xc0>)
 80001d0:	781b      	ldrb	r3, [r3, #0]
 80001d2:	4619      	mov	r1, r3
 80001d4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80001d8:	fb01 f303 	mul.w	r3, r1, r3
 80001dc:	4413      	add	r3, r2
 80001de:	461a      	mov	r2, r3
 80001e0:	4b0e      	ldr	r3, [pc, #56]	; (800021c <HAL_GPIO_EXTI_Callback+0xd0>)
 80001e2:	601a      	str	r2, [r3, #0]
		button0=0;
 80001e4:	4b06      	ldr	r3, [pc, #24]	; (8000200 <HAL_GPIO_EXTI_Callback+0xb4>)
 80001e6:	2200      	movs	r2, #0
 80001e8:	701a      	strb	r2, [r3, #0]
		button1=0;
 80001ea:	4b06      	ldr	r3, [pc, #24]	; (8000204 <HAL_GPIO_EXTI_Callback+0xb8>)
 80001ec:	2200      	movs	r2, #0
 80001ee:	701a      	strb	r2, [r3, #0]
		button2=1;
 80001f0:	4b05      	ldr	r3, [pc, #20]	; (8000208 <HAL_GPIO_EXTI_Callback+0xbc>)
 80001f2:	2201      	movs	r2, #1
 80001f4:	701a      	strb	r2, [r3, #0]
		break;
 80001f6:	bf00      	nop
}
 80001f8:	bf00      	nop
 80001fa:	3708      	adds	r7, #8
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bd80      	pop	{r7, pc}
 8000200:	200000ad 	.word	0x200000ad
 8000204:	200000ae 	.word	0x200000ae
 8000208:	200000af 	.word	0x200000af
 800020c:	200000d0 	.word	0x200000d0
 8000210:	200000bc 	.word	0x200000bc
 8000214:	08002dbc 	.word	0x08002dbc
 8000218:	20000098 	.word	0x20000098
 800021c:	200000b4 	.word	0x200000b4

08000220 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000226:	f000 fab3 	bl	8000790 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800022a:	f000 f895 	bl	8000358 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800022e:	f000 f93b 	bl	80004a8 <MX_GPIO_Init>
	MX_RTC_Init();
 8000232:	f000 f8ef 	bl	8000414 <MX_RTC_Init>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000236:	2200      	movs	r2, #0
 8000238:	493c      	ldr	r1, [pc, #240]	; (800032c <main+0x10c>)
 800023a:	483d      	ldr	r0, [pc, #244]	; (8000330 <main+0x110>)
 800023c:	f001 fc82 	bl	8001b44 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN);
 8000240:	2200      	movs	r2, #0
 8000242:	493c      	ldr	r1, [pc, #240]	; (8000334 <main+0x114>)
 8000244:	483a      	ldr	r0, [pc, #232]	; (8000330 <main+0x110>)
 8000246:	f001 fe0b 	bl	8001e60 <HAL_RTC_GetDate>
		sprintf(date,"%02d.%02d.%02d",DateToUpdate.Date,DateToUpdate.Month,DateToUpdate.Year);
 800024a:	4b3a      	ldr	r3, [pc, #232]	; (8000334 <main+0x114>)
 800024c:	789b      	ldrb	r3, [r3, #2]
 800024e:	461a      	mov	r2, r3
 8000250:	4b38      	ldr	r3, [pc, #224]	; (8000334 <main+0x114>)
 8000252:	785b      	ldrb	r3, [r3, #1]
 8000254:	4619      	mov	r1, r3
 8000256:	4b37      	ldr	r3, [pc, #220]	; (8000334 <main+0x114>)
 8000258:	78db      	ldrb	r3, [r3, #3]
 800025a:	9300      	str	r3, [sp, #0]
 800025c:	460b      	mov	r3, r1
 800025e:	4936      	ldr	r1, [pc, #216]	; (8000338 <main+0x118>)
 8000260:	4836      	ldr	r0, [pc, #216]	; (800033c <main+0x11c>)
 8000262:	f002 f925 	bl	80024b0 <siprintf>
		sprintf(time,"%02d.%02d.%02d",sTime.Hours,sTime.Minutes,sTime.Seconds);
 8000266:	4b31      	ldr	r3, [pc, #196]	; (800032c <main+0x10c>)
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	461a      	mov	r2, r3
 800026c:	4b2f      	ldr	r3, [pc, #188]	; (800032c <main+0x10c>)
 800026e:	785b      	ldrb	r3, [r3, #1]
 8000270:	4619      	mov	r1, r3
 8000272:	4b2e      	ldr	r3, [pc, #184]	; (800032c <main+0x10c>)
 8000274:	789b      	ldrb	r3, [r3, #2]
 8000276:	9300      	str	r3, [sp, #0]
 8000278:	460b      	mov	r3, r1
 800027a:	492f      	ldr	r1, [pc, #188]	; (8000338 <main+0x118>)
 800027c:	4830      	ldr	r0, [pc, #192]	; (8000340 <main+0x120>)
 800027e:	f002 f917 	bl	80024b0 <siprintf>

		currentTimeInSeconds = sTime.Seconds + sTime.Minutes * 60 + sTime.Hours * 60 * 60;
 8000282:	4b2a      	ldr	r3, [pc, #168]	; (800032c <main+0x10c>)
 8000284:	789b      	ldrb	r3, [r3, #2]
 8000286:	4619      	mov	r1, r3
 8000288:	4b28      	ldr	r3, [pc, #160]	; (800032c <main+0x10c>)
 800028a:	785b      	ldrb	r3, [r3, #1]
 800028c:	461a      	mov	r2, r3
 800028e:	4613      	mov	r3, r2
 8000290:	011b      	lsls	r3, r3, #4
 8000292:	1a9b      	subs	r3, r3, r2
 8000294:	009b      	lsls	r3, r3, #2
 8000296:	18ca      	adds	r2, r1, r3
 8000298:	4b24      	ldr	r3, [pc, #144]	; (800032c <main+0x10c>)
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	4619      	mov	r1, r3
 800029e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80002a2:	fb01 f303 	mul.w	r3, r1, r3
 80002a6:	4413      	add	r3, r2
 80002a8:	461a      	mov	r2, r3
 80002aa:	4b26      	ldr	r3, [pc, #152]	; (8000344 <main+0x124>)
 80002ac:	601a      	str	r2, [r3, #0]


		if(button2==1){
 80002ae:	4b26      	ldr	r3, [pc, #152]	; (8000348 <main+0x128>)
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d0bf      	beq.n	8000236 <main+0x16>
			if(currentTimeInSeconds - firstTimeInSeconds >= 5){
 80002b6:	4b23      	ldr	r3, [pc, #140]	; (8000344 <main+0x124>)
 80002b8:	681a      	ldr	r2, [r3, #0]
 80002ba:	4b24      	ldr	r3, [pc, #144]	; (800034c <main+0x12c>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	1ad3      	subs	r3, r2, r3
 80002c0:	2b04      	cmp	r3, #4
 80002c2:	d926      	bls.n	8000312 <main+0xf2>
				firstTimeInSeconds = currentTimeInSeconds;
 80002c4:	4b1f      	ldr	r3, [pc, #124]	; (8000344 <main+0x124>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a20      	ldr	r2, [pc, #128]	; (800034c <main+0x12c>)
 80002ca:	6013      	str	r3, [r2, #0]
				if(timeOK){
 80002cc:	4b20      	ldr	r3, [pc, #128]	; (8000350 <main+0x130>)
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d00f      	beq.n	80002f4 <main+0xd4>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80002d4:	2200      	movs	r2, #0
 80002d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002da:	481e      	ldr	r0, [pc, #120]	; (8000354 <main+0x134>)
 80002dc:	f000 fd4c 	bl	8000d78 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80002e0:	2201      	movs	r2, #1
 80002e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002e6:	481b      	ldr	r0, [pc, #108]	; (8000354 <main+0x134>)
 80002e8:	f000 fd46 	bl	8000d78 <HAL_GPIO_WritePin>
					timeOK=0;
 80002ec:	4b18      	ldr	r3, [pc, #96]	; (8000350 <main+0x130>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	701a      	strb	r2, [r3, #0]
 80002f2:	e00e      	b.n	8000312 <main+0xf2>
				}
				else {
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80002f4:	2201      	movs	r2, #1
 80002f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002fa:	4816      	ldr	r0, [pc, #88]	; (8000354 <main+0x134>)
 80002fc:	f000 fd3c 	bl	8000d78 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000300:	2200      	movs	r2, #0
 8000302:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000306:	4813      	ldr	r0, [pc, #76]	; (8000354 <main+0x134>)
 8000308:	f000 fd36 	bl	8000d78 <HAL_GPIO_WritePin>
					timeOK=1;
 800030c:	4b10      	ldr	r3, [pc, #64]	; (8000350 <main+0x130>)
 800030e:	2201      	movs	r2, #1
 8000310:	701a      	strb	r2, [r3, #0]
				}
			}

			if(currentTimeInSeconds - firstTimeInSeconds >= 10){
 8000312:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <main+0x124>)
 8000314:	681a      	ldr	r2, [r3, #0]
 8000316:	4b0d      	ldr	r3, [pc, #52]	; (800034c <main+0x12c>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	1ad3      	subs	r3, r2, r3
 800031c:	2b09      	cmp	r3, #9
 800031e:	d98a      	bls.n	8000236 <main+0x16>
				firstTimeInSeconds = currentTimeInSeconds;
 8000320:	4b08      	ldr	r3, [pc, #32]	; (8000344 <main+0x124>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a09      	ldr	r2, [pc, #36]	; (800034c <main+0x12c>)
 8000326:	6013      	str	r3, [r2, #0]
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000328:	e785      	b.n	8000236 <main+0x16>
 800032a:	bf00      	nop
 800032c:	200000d0 	.word	0x200000d0
 8000330:	200000bc 	.word	0x200000bc
 8000334:	200000d4 	.word	0x200000d4
 8000338:	08002dbc 	.word	0x08002dbc
 800033c:	200000a4 	.word	0x200000a4
 8000340:	2000008c 	.word	0x2000008c
 8000344:	200000b8 	.word	0x200000b8
 8000348:	200000af 	.word	0x200000af
 800034c:	200000b4 	.word	0x200000b4
 8000350:	200000b0 	.word	0x200000b0
 8000354:	40010800 	.word	0x40010800

08000358 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b094      	sub	sp, #80	; 0x50
 800035c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800035e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000362:	2228      	movs	r2, #40	; 0x28
 8000364:	2100      	movs	r1, #0
 8000366:	4618      	mov	r0, r3
 8000368:	f002 f89a 	bl	80024a0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800036c:	f107 0314 	add.w	r3, r7, #20
 8000370:	2200      	movs	r2, #0
 8000372:	601a      	str	r2, [r3, #0]
 8000374:	605a      	str	r2, [r3, #4]
 8000376:	609a      	str	r2, [r3, #8]
 8000378:	60da      	str	r2, [r3, #12]
 800037a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800037c:	1d3b      	adds	r3, r7, #4
 800037e:	2200      	movs	r2, #0
 8000380:	601a      	str	r2, [r3, #0]
 8000382:	605a      	str	r2, [r3, #4]
 8000384:	609a      	str	r2, [r3, #8]
 8000386:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000388:	2309      	movs	r3, #9
 800038a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800038c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000390:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000392:	2300      	movs	r3, #0
 8000394:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000396:	2301      	movs	r3, #1
 8000398:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800039a:	2301      	movs	r3, #1
 800039c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800039e:	2302      	movs	r3, #2
 80003a0:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003a6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003a8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003ac:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003b2:	4618      	mov	r0, r3
 80003b4:	f000 fd1c 	bl	8000df0 <HAL_RCC_OscConfig>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <SystemClock_Config+0x6a>
	{
		Error_Handler();
 80003be:	f000 f8ed 	bl	800059c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c2:	230f      	movs	r3, #15
 80003c4:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003c6:	2302      	movs	r3, #2
 80003c8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ca:	2300      	movs	r3, #0
 80003cc:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003d2:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003d4:	2300      	movs	r3, #0
 80003d6:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003d8:	f107 0314 	add.w	r3, r7, #20
 80003dc:	2102      	movs	r1, #2
 80003de:	4618      	mov	r0, r3
 80003e0:	f000 ff88 	bl	80012f4 <HAL_RCC_ClockConfig>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <SystemClock_Config+0x96>
	{
		Error_Handler();
 80003ea:	f000 f8d7 	bl	800059c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80003ee:	2301      	movs	r3, #1
 80003f0:	607b      	str	r3, [r7, #4]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80003f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80003f6:	60bb      	str	r3, [r7, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003f8:	1d3b      	adds	r3, r7, #4
 80003fa:	4618      	mov	r0, r3
 80003fc:	f001 f8fe 	bl	80015fc <HAL_RCCEx_PeriphCLKConfig>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <SystemClock_Config+0xb2>
	{
		Error_Handler();
 8000406:	f000 f8c9 	bl	800059c <Error_Handler>
	}
}
 800040a:	bf00      	nop
 800040c:	3750      	adds	r7, #80	; 0x50
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
	...

08000414 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = {0};
 800041a:	1d3b      	adds	r3, r7, #4
 800041c:	2100      	movs	r1, #0
 800041e:	460a      	mov	r2, r1
 8000420:	801a      	strh	r2, [r3, #0]
 8000422:	460a      	mov	r2, r1
 8000424:	709a      	strb	r2, [r3, #2]
	RTC_DateTypeDef DateToUpdate = {0};
 8000426:	2300      	movs	r3, #0
 8000428:	603b      	str	r3, [r7, #0]

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 800042a:	4b1d      	ldr	r3, [pc, #116]	; (80004a0 <MX_RTC_Init+0x8c>)
 800042c:	4a1d      	ldr	r2, [pc, #116]	; (80004a4 <MX_RTC_Init+0x90>)
 800042e:	601a      	str	r2, [r3, #0]
	hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000430:	4b1b      	ldr	r3, [pc, #108]	; (80004a0 <MX_RTC_Init+0x8c>)
 8000432:	f04f 32ff 	mov.w	r2, #4294967295
 8000436:	605a      	str	r2, [r3, #4]
	hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000438:	4b19      	ldr	r3, [pc, #100]	; (80004a0 <MX_RTC_Init+0x8c>)
 800043a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800043e:	609a      	str	r2, [r3, #8]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000440:	4817      	ldr	r0, [pc, #92]	; (80004a0 <MX_RTC_Init+0x8c>)
 8000442:	f001 fa51 	bl	80018e8 <HAL_RTC_Init>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <MX_RTC_Init+0x3c>
	{
		Error_Handler();
 800044c:	f000 f8a6 	bl	800059c <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 13;
 8000450:	230d      	movs	r3, #13
 8000452:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 50;
 8000454:	2332      	movs	r3, #50	; 0x32
 8000456:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0;
 8000458:	2300      	movs	r3, #0
 800045a:	71bb      	strb	r3, [r7, #6]

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800045c:	1d3b      	adds	r3, r7, #4
 800045e:	2200      	movs	r2, #0
 8000460:	4619      	mov	r1, r3
 8000462:	480f      	ldr	r0, [pc, #60]	; (80004a0 <MX_RTC_Init+0x8c>)
 8000464:	f001 fad6 	bl	8001a14 <HAL_RTC_SetTime>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <MX_RTC_Init+0x5e>
	{
		Error_Handler();
 800046e:	f000 f895 	bl	800059c <Error_Handler>
	}
	DateToUpdate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8000472:	2302      	movs	r3, #2
 8000474:	703b      	strb	r3, [r7, #0]
	DateToUpdate.Month = RTC_MONTH_FEBRUARY;
 8000476:	2302      	movs	r3, #2
 8000478:	707b      	strb	r3, [r7, #1]
	DateToUpdate.Date = 14;
 800047a:	230e      	movs	r3, #14
 800047c:	70bb      	strb	r3, [r7, #2]
	DateToUpdate.Year = 23;
 800047e:	2317      	movs	r3, #23
 8000480:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 8000482:	463b      	mov	r3, r7
 8000484:	2200      	movs	r2, #0
 8000486:	4619      	mov	r1, r3
 8000488:	4805      	ldr	r0, [pc, #20]	; (80004a0 <MX_RTC_Init+0x8c>)
 800048a:	f001 fc33 	bl	8001cf4 <HAL_RTC_SetDate>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d001      	beq.n	8000498 <MX_RTC_Init+0x84>
	{
		Error_Handler();
 8000494:	f000 f882 	bl	800059c <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8000498:	bf00      	nop
 800049a:	3708      	adds	r7, #8
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	200000bc 	.word	0x200000bc
 80004a4:	40002800 	.word	0x40002800

080004a8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b088      	sub	sp, #32
 80004ac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ae:	f107 0310 	add.w	r3, r7, #16
 80004b2:	2200      	movs	r2, #0
 80004b4:	601a      	str	r2, [r3, #0]
 80004b6:	605a      	str	r2, [r3, #4]
 80004b8:	609a      	str	r2, [r3, #8]
 80004ba:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80004bc:	4b34      	ldr	r3, [pc, #208]	; (8000590 <MX_GPIO_Init+0xe8>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	4a33      	ldr	r2, [pc, #204]	; (8000590 <MX_GPIO_Init+0xe8>)
 80004c2:	f043 0310 	orr.w	r3, r3, #16
 80004c6:	6193      	str	r3, [r2, #24]
 80004c8:	4b31      	ldr	r3, [pc, #196]	; (8000590 <MX_GPIO_Init+0xe8>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	f003 0310 	and.w	r3, r3, #16
 80004d0:	60fb      	str	r3, [r7, #12]
 80004d2:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80004d4:	4b2e      	ldr	r3, [pc, #184]	; (8000590 <MX_GPIO_Init+0xe8>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	4a2d      	ldr	r2, [pc, #180]	; (8000590 <MX_GPIO_Init+0xe8>)
 80004da:	f043 0320 	orr.w	r3, r3, #32
 80004de:	6193      	str	r3, [r2, #24]
 80004e0:	4b2b      	ldr	r3, [pc, #172]	; (8000590 <MX_GPIO_Init+0xe8>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	f003 0320 	and.w	r3, r3, #32
 80004e8:	60bb      	str	r3, [r7, #8]
 80004ea:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80004ec:	4b28      	ldr	r3, [pc, #160]	; (8000590 <MX_GPIO_Init+0xe8>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	4a27      	ldr	r2, [pc, #156]	; (8000590 <MX_GPIO_Init+0xe8>)
 80004f2:	f043 0304 	orr.w	r3, r3, #4
 80004f6:	6193      	str	r3, [r2, #24]
 80004f8:	4b25      	ldr	r3, [pc, #148]	; (8000590 <MX_GPIO_Init+0xe8>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	f003 0304 	and.w	r3, r3, #4
 8000500:	607b      	str	r3, [r7, #4]
 8000502:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000504:	2200      	movs	r2, #0
 8000506:	f44f 7140 	mov.w	r1, #768	; 0x300
 800050a:	4822      	ldr	r0, [pc, #136]	; (8000594 <MX_GPIO_Init+0xec>)
 800050c:	f000 fc34 	bl	8000d78 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PA0 PA1 PA2 PA3 */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000510:	230f      	movs	r3, #15
 8000512:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000514:	4b20      	ldr	r3, [pc, #128]	; (8000598 <MX_GPIO_Init+0xf0>)
 8000516:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000518:	2302      	movs	r3, #2
 800051a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800051c:	f107 0310 	add.w	r3, r7, #16
 8000520:	4619      	mov	r1, r3
 8000522:	481c      	ldr	r0, [pc, #112]	; (8000594 <MX_GPIO_Init+0xec>)
 8000524:	f000 faa4 	bl	8000a70 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA8 PA9 */
	GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000528:	f44f 7340 	mov.w	r3, #768	; 0x300
 800052c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052e:	2301      	movs	r3, #1
 8000530:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000532:	2300      	movs	r3, #0
 8000534:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000536:	2302      	movs	r3, #2
 8000538:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800053a:	f107 0310 	add.w	r3, r7, #16
 800053e:	4619      	mov	r1, r3
 8000540:	4814      	ldr	r0, [pc, #80]	; (8000594 <MX_GPIO_Init+0xec>)
 8000542:	f000 fa95 	bl	8000a70 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000546:	2200      	movs	r2, #0
 8000548:	2100      	movs	r1, #0
 800054a:	2006      	movs	r0, #6
 800054c:	f000 fa59 	bl	8000a02 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000550:	2006      	movs	r0, #6
 8000552:	f000 fa72 	bl	8000a3a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000556:	2200      	movs	r2, #0
 8000558:	2100      	movs	r1, #0
 800055a:	2007      	movs	r0, #7
 800055c:	f000 fa51 	bl	8000a02 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000560:	2007      	movs	r0, #7
 8000562:	f000 fa6a 	bl	8000a3a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000566:	2200      	movs	r2, #0
 8000568:	2100      	movs	r1, #0
 800056a:	2008      	movs	r0, #8
 800056c:	f000 fa49 	bl	8000a02 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000570:	2008      	movs	r0, #8
 8000572:	f000 fa62 	bl	8000a3a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000576:	2200      	movs	r2, #0
 8000578:	2100      	movs	r1, #0
 800057a:	2009      	movs	r0, #9
 800057c:	f000 fa41 	bl	8000a02 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000580:	2009      	movs	r0, #9
 8000582:	f000 fa5a 	bl	8000a3a <HAL_NVIC_EnableIRQ>

}
 8000586:	bf00      	nop
 8000588:	3720      	adds	r7, #32
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	40021000 	.word	0x40021000
 8000594:	40010800 	.word	0x40010800
 8000598:	10110000 	.word	0x10110000

0800059c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a0:	b672      	cpsid	i
}
 80005a2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80005a4:	e7fe      	b.n	80005a4 <Error_Handler+0x8>
	...

080005a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b085      	sub	sp, #20
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005ae:	4b15      	ldr	r3, [pc, #84]	; (8000604 <HAL_MspInit+0x5c>)
 80005b0:	699b      	ldr	r3, [r3, #24]
 80005b2:	4a14      	ldr	r2, [pc, #80]	; (8000604 <HAL_MspInit+0x5c>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	6193      	str	r3, [r2, #24]
 80005ba:	4b12      	ldr	r3, [pc, #72]	; (8000604 <HAL_MspInit+0x5c>)
 80005bc:	699b      	ldr	r3, [r3, #24]
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c6:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <HAL_MspInit+0x5c>)
 80005c8:	69db      	ldr	r3, [r3, #28]
 80005ca:	4a0e      	ldr	r2, [pc, #56]	; (8000604 <HAL_MspInit+0x5c>)
 80005cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d0:	61d3      	str	r3, [r2, #28]
 80005d2:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <HAL_MspInit+0x5c>)
 80005d4:	69db      	ldr	r3, [r3, #28]
 80005d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005de:	4b0a      	ldr	r3, [pc, #40]	; (8000608 <HAL_MspInit+0x60>)
 80005e0:	685b      	ldr	r3, [r3, #4]
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	4a04      	ldr	r2, [pc, #16]	; (8000608 <HAL_MspInit+0x60>)
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr
 8000604:	40021000 	.word	0x40021000
 8000608:	40010000 	.word	0x40010000

0800060c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a0b      	ldr	r2, [pc, #44]	; (8000648 <HAL_RTC_MspInit+0x3c>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d110      	bne.n	8000640 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800061e:	f000 fbdb 	bl	8000dd8 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000622:	4b0a      	ldr	r3, [pc, #40]	; (800064c <HAL_RTC_MspInit+0x40>)
 8000624:	69db      	ldr	r3, [r3, #28]
 8000626:	4a09      	ldr	r2, [pc, #36]	; (800064c <HAL_RTC_MspInit+0x40>)
 8000628:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800062c:	61d3      	str	r3, [r2, #28]
 800062e:	4b07      	ldr	r3, [pc, #28]	; (800064c <HAL_RTC_MspInit+0x40>)
 8000630:	69db      	ldr	r3, [r3, #28]
 8000632:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800063a:	4b05      	ldr	r3, [pc, #20]	; (8000650 <HAL_RTC_MspInit+0x44>)
 800063c:	2201      	movs	r2, #1
 800063e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000640:	bf00      	nop
 8000642:	3710      	adds	r7, #16
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40002800 	.word	0x40002800
 800064c:	40021000 	.word	0x40021000
 8000650:	4242043c 	.word	0x4242043c

08000654 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000658:	e7fe      	b.n	8000658 <NMI_Handler+0x4>

0800065a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800065a:	b480      	push	{r7}
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800065e:	e7fe      	b.n	800065e <HardFault_Handler+0x4>

08000660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000664:	e7fe      	b.n	8000664 <MemManage_Handler+0x4>

08000666 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800066a:	e7fe      	b.n	800066a <BusFault_Handler+0x4>

0800066c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000670:	e7fe      	b.n	8000670 <UsageFault_Handler+0x4>

08000672 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000672:	b480      	push	{r7}
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000676:	bf00      	nop
 8000678:	46bd      	mov	sp, r7
 800067a:	bc80      	pop	{r7}
 800067c:	4770      	bx	lr

0800067e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr

0800068a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800068a:	b480      	push	{r7}
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800068e:	bf00      	nop
 8000690:	46bd      	mov	sp, r7
 8000692:	bc80      	pop	{r7}
 8000694:	4770      	bx	lr

08000696 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000696:	b580      	push	{r7, lr}
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800069a:	f000 f8bf 	bl	800081c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80006a6:	2001      	movs	r0, #1
 80006a8:	f000 fb7e 	bl	8000da8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80006b4:	2002      	movs	r0, #2
 80006b6:	f000 fb77 	bl	8000da8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}

080006be <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80006c2:	2004      	movs	r0, #4
 80006c4:	f000 fb70 	bl	8000da8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}

080006cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b086      	sub	sp, #24
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006d4:	4a14      	ldr	r2, [pc, #80]	; (8000728 <_sbrk+0x5c>)
 80006d6:	4b15      	ldr	r3, [pc, #84]	; (800072c <_sbrk+0x60>)
 80006d8:	1ad3      	subs	r3, r2, r3
 80006da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006e0:	4b13      	ldr	r3, [pc, #76]	; (8000730 <_sbrk+0x64>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d102      	bne.n	80006ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006e8:	4b11      	ldr	r3, [pc, #68]	; (8000730 <_sbrk+0x64>)
 80006ea:	4a12      	ldr	r2, [pc, #72]	; (8000734 <_sbrk+0x68>)
 80006ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006ee:	4b10      	ldr	r3, [pc, #64]	; (8000730 <_sbrk+0x64>)
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4413      	add	r3, r2
 80006f6:	693a      	ldr	r2, [r7, #16]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d207      	bcs.n	800070c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006fc:	f001 fea6 	bl	800244c <__errno>
 8000700:	4603      	mov	r3, r0
 8000702:	220c      	movs	r2, #12
 8000704:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000706:	f04f 33ff 	mov.w	r3, #4294967295
 800070a:	e009      	b.n	8000720 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800070c:	4b08      	ldr	r3, [pc, #32]	; (8000730 <_sbrk+0x64>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000712:	4b07      	ldr	r3, [pc, #28]	; (8000730 <_sbrk+0x64>)
 8000714:	681a      	ldr	r2, [r3, #0]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	4413      	add	r3, r2
 800071a:	4a05      	ldr	r2, [pc, #20]	; (8000730 <_sbrk+0x64>)
 800071c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800071e:	68fb      	ldr	r3, [r7, #12]
}
 8000720:	4618      	mov	r0, r3
 8000722:	3718      	adds	r7, #24
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20005000 	.word	0x20005000
 800072c:	00000400 	.word	0x00000400
 8000730:	200000d8 	.word	0x200000d8
 8000734:	200000f0 	.word	0x200000f0

08000738 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800073c:	bf00      	nop
 800073e:	46bd      	mov	sp, r7
 8000740:	bc80      	pop	{r7}
 8000742:	4770      	bx	lr

08000744 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000744:	480c      	ldr	r0, [pc, #48]	; (8000778 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000746:	490d      	ldr	r1, [pc, #52]	; (800077c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000748:	4a0d      	ldr	r2, [pc, #52]	; (8000780 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800074a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800074c:	e002      	b.n	8000754 <LoopCopyDataInit>

0800074e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800074e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000752:	3304      	adds	r3, #4

08000754 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000758:	d3f9      	bcc.n	800074e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800075a:	4a0a      	ldr	r2, [pc, #40]	; (8000784 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800075c:	4c0a      	ldr	r4, [pc, #40]	; (8000788 <LoopFillZerobss+0x22>)
  movs r3, #0
 800075e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000760:	e001      	b.n	8000766 <LoopFillZerobss>

08000762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000764:	3204      	adds	r2, #4

08000766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000768:	d3fb      	bcc.n	8000762 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800076a:	f7ff ffe5 	bl	8000738 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800076e:	f001 fe73 	bl	8002458 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000772:	f7ff fd55 	bl	8000220 <main>
  bx lr
 8000776:	4770      	bx	lr
  ldr r0, =_sdata
 8000778:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800077c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000780:	08002e40 	.word	0x08002e40
  ldr r2, =_sbss
 8000784:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000788:	200000f0 	.word	0x200000f0

0800078c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800078c:	e7fe      	b.n	800078c <ADC1_2_IRQHandler>
	...

08000790 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000794:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <HAL_Init+0x28>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a07      	ldr	r2, [pc, #28]	; (80007b8 <HAL_Init+0x28>)
 800079a:	f043 0310 	orr.w	r3, r3, #16
 800079e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007a0:	2003      	movs	r0, #3
 80007a2:	f000 f923 	bl	80009ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007a6:	200f      	movs	r0, #15
 80007a8:	f000 f808 	bl	80007bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007ac:	f7ff fefc 	bl	80005a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007b0:	2300      	movs	r3, #0
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40022000 	.word	0x40022000

080007bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007c4:	4b12      	ldr	r3, [pc, #72]	; (8000810 <HAL_InitTick+0x54>)
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	4b12      	ldr	r3, [pc, #72]	; (8000814 <HAL_InitTick+0x58>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	4619      	mov	r1, r3
 80007ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007da:	4618      	mov	r0, r3
 80007dc:	f000 f93b 	bl	8000a56 <HAL_SYSTICK_Config>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007e6:	2301      	movs	r3, #1
 80007e8:	e00e      	b.n	8000808 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2b0f      	cmp	r3, #15
 80007ee:	d80a      	bhi.n	8000806 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007f0:	2200      	movs	r2, #0
 80007f2:	6879      	ldr	r1, [r7, #4]
 80007f4:	f04f 30ff 	mov.w	r0, #4294967295
 80007f8:	f000 f903 	bl	8000a02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007fc:	4a06      	ldr	r2, [pc, #24]	; (8000818 <HAL_InitTick+0x5c>)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000802:	2300      	movs	r3, #0
 8000804:	e000      	b.n	8000808 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000806:	2301      	movs	r3, #1
}
 8000808:	4618      	mov	r0, r3
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000000 	.word	0x20000000
 8000814:	20000008 	.word	0x20000008
 8000818:	20000004 	.word	0x20000004

0800081c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000820:	4b05      	ldr	r3, [pc, #20]	; (8000838 <HAL_IncTick+0x1c>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	461a      	mov	r2, r3
 8000826:	4b05      	ldr	r3, [pc, #20]	; (800083c <HAL_IncTick+0x20>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4413      	add	r3, r2
 800082c:	4a03      	ldr	r2, [pc, #12]	; (800083c <HAL_IncTick+0x20>)
 800082e:	6013      	str	r3, [r2, #0]
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr
 8000838:	20000008 	.word	0x20000008
 800083c:	200000dc 	.word	0x200000dc

08000840 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  return uwTick;
 8000844:	4b02      	ldr	r3, [pc, #8]	; (8000850 <HAL_GetTick+0x10>)
 8000846:	681b      	ldr	r3, [r3, #0]
}
 8000848:	4618      	mov	r0, r3
 800084a:	46bd      	mov	sp, r7
 800084c:	bc80      	pop	{r7}
 800084e:	4770      	bx	lr
 8000850:	200000dc 	.word	0x200000dc

08000854 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	f003 0307 	and.w	r3, r3, #7
 8000862:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000864:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <__NVIC_SetPriorityGrouping+0x44>)
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800086a:	68ba      	ldr	r2, [r7, #8]
 800086c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000870:	4013      	ands	r3, r2
 8000872:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800087c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000884:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000886:	4a04      	ldr	r2, [pc, #16]	; (8000898 <__NVIC_SetPriorityGrouping+0x44>)
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	60d3      	str	r3, [r2, #12]
}
 800088c:	bf00      	nop
 800088e:	3714      	adds	r7, #20
 8000890:	46bd      	mov	sp, r7
 8000892:	bc80      	pop	{r7}
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008a0:	4b04      	ldr	r3, [pc, #16]	; (80008b4 <__NVIC_GetPriorityGrouping+0x18>)
 80008a2:	68db      	ldr	r3, [r3, #12]
 80008a4:	0a1b      	lsrs	r3, r3, #8
 80008a6:	f003 0307 	and.w	r3, r3, #7
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bc80      	pop	{r7}
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	e000ed00 	.word	0xe000ed00

080008b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	db0b      	blt.n	80008e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	f003 021f 	and.w	r2, r3, #31
 80008d0:	4906      	ldr	r1, [pc, #24]	; (80008ec <__NVIC_EnableIRQ+0x34>)
 80008d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d6:	095b      	lsrs	r3, r3, #5
 80008d8:	2001      	movs	r0, #1
 80008da:	fa00 f202 	lsl.w	r2, r0, r2
 80008de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008e2:	bf00      	nop
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr
 80008ec:	e000e100 	.word	0xe000e100

080008f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	6039      	str	r1, [r7, #0]
 80008fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000900:	2b00      	cmp	r3, #0
 8000902:	db0a      	blt.n	800091a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	b2da      	uxtb	r2, r3
 8000908:	490c      	ldr	r1, [pc, #48]	; (800093c <__NVIC_SetPriority+0x4c>)
 800090a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090e:	0112      	lsls	r2, r2, #4
 8000910:	b2d2      	uxtb	r2, r2
 8000912:	440b      	add	r3, r1
 8000914:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000918:	e00a      	b.n	8000930 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	b2da      	uxtb	r2, r3
 800091e:	4908      	ldr	r1, [pc, #32]	; (8000940 <__NVIC_SetPriority+0x50>)
 8000920:	79fb      	ldrb	r3, [r7, #7]
 8000922:	f003 030f 	and.w	r3, r3, #15
 8000926:	3b04      	subs	r3, #4
 8000928:	0112      	lsls	r2, r2, #4
 800092a:	b2d2      	uxtb	r2, r2
 800092c:	440b      	add	r3, r1
 800092e:	761a      	strb	r2, [r3, #24]
}
 8000930:	bf00      	nop
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	bc80      	pop	{r7}
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	e000e100 	.word	0xe000e100
 8000940:	e000ed00 	.word	0xe000ed00

08000944 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000944:	b480      	push	{r7}
 8000946:	b089      	sub	sp, #36	; 0x24
 8000948:	af00      	add	r7, sp, #0
 800094a:	60f8      	str	r0, [r7, #12]
 800094c:	60b9      	str	r1, [r7, #8]
 800094e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	f003 0307 	and.w	r3, r3, #7
 8000956:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000958:	69fb      	ldr	r3, [r7, #28]
 800095a:	f1c3 0307 	rsb	r3, r3, #7
 800095e:	2b04      	cmp	r3, #4
 8000960:	bf28      	it	cs
 8000962:	2304      	movcs	r3, #4
 8000964:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	3304      	adds	r3, #4
 800096a:	2b06      	cmp	r3, #6
 800096c:	d902      	bls.n	8000974 <NVIC_EncodePriority+0x30>
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	3b03      	subs	r3, #3
 8000972:	e000      	b.n	8000976 <NVIC_EncodePriority+0x32>
 8000974:	2300      	movs	r3, #0
 8000976:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000978:	f04f 32ff 	mov.w	r2, #4294967295
 800097c:	69bb      	ldr	r3, [r7, #24]
 800097e:	fa02 f303 	lsl.w	r3, r2, r3
 8000982:	43da      	mvns	r2, r3
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	401a      	ands	r2, r3
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800098c:	f04f 31ff 	mov.w	r1, #4294967295
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	fa01 f303 	lsl.w	r3, r1, r3
 8000996:	43d9      	mvns	r1, r3
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800099c:	4313      	orrs	r3, r2
         );
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3724      	adds	r7, #36	; 0x24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr

080009a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	3b01      	subs	r3, #1
 80009b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009b8:	d301      	bcc.n	80009be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ba:	2301      	movs	r3, #1
 80009bc:	e00f      	b.n	80009de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009be:	4a0a      	ldr	r2, [pc, #40]	; (80009e8 <SysTick_Config+0x40>)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	3b01      	subs	r3, #1
 80009c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009c6:	210f      	movs	r1, #15
 80009c8:	f04f 30ff 	mov.w	r0, #4294967295
 80009cc:	f7ff ff90 	bl	80008f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009d0:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <SysTick_Config+0x40>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009d6:	4b04      	ldr	r3, [pc, #16]	; (80009e8 <SysTick_Config+0x40>)
 80009d8:	2207      	movs	r2, #7
 80009da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009dc:	2300      	movs	r3, #0
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	e000e010 	.word	0xe000e010

080009ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	f7ff ff2d 	bl	8000854 <__NVIC_SetPriorityGrouping>
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b086      	sub	sp, #24
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	4603      	mov	r3, r0
 8000a0a:	60b9      	str	r1, [r7, #8]
 8000a0c:	607a      	str	r2, [r7, #4]
 8000a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a14:	f7ff ff42 	bl	800089c <__NVIC_GetPriorityGrouping>
 8000a18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a1a:	687a      	ldr	r2, [r7, #4]
 8000a1c:	68b9      	ldr	r1, [r7, #8]
 8000a1e:	6978      	ldr	r0, [r7, #20]
 8000a20:	f7ff ff90 	bl	8000944 <NVIC_EncodePriority>
 8000a24:	4602      	mov	r2, r0
 8000a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a2a:	4611      	mov	r1, r2
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff ff5f 	bl	80008f0 <__NVIC_SetPriority>
}
 8000a32:	bf00      	nop
 8000a34:	3718      	adds	r7, #24
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b082      	sub	sp, #8
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	4603      	mov	r3, r0
 8000a42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff ff35 	bl	80008b8 <__NVIC_EnableIRQ>
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b082      	sub	sp, #8
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f7ff ffa2 	bl	80009a8 <SysTick_Config>
 8000a64:	4603      	mov	r3, r0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b08b      	sub	sp, #44	; 0x2c
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a82:	e169      	b.n	8000d58 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a84:	2201      	movs	r2, #1
 8000a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a88:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	69fa      	ldr	r2, [r7, #28]
 8000a94:	4013      	ands	r3, r2
 8000a96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a98:	69ba      	ldr	r2, [r7, #24]
 8000a9a:	69fb      	ldr	r3, [r7, #28]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	f040 8158 	bne.w	8000d52 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	4a9a      	ldr	r2, [pc, #616]	; (8000d10 <HAL_GPIO_Init+0x2a0>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d05e      	beq.n	8000b6a <HAL_GPIO_Init+0xfa>
 8000aac:	4a98      	ldr	r2, [pc, #608]	; (8000d10 <HAL_GPIO_Init+0x2a0>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d875      	bhi.n	8000b9e <HAL_GPIO_Init+0x12e>
 8000ab2:	4a98      	ldr	r2, [pc, #608]	; (8000d14 <HAL_GPIO_Init+0x2a4>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d058      	beq.n	8000b6a <HAL_GPIO_Init+0xfa>
 8000ab8:	4a96      	ldr	r2, [pc, #600]	; (8000d14 <HAL_GPIO_Init+0x2a4>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d86f      	bhi.n	8000b9e <HAL_GPIO_Init+0x12e>
 8000abe:	4a96      	ldr	r2, [pc, #600]	; (8000d18 <HAL_GPIO_Init+0x2a8>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d052      	beq.n	8000b6a <HAL_GPIO_Init+0xfa>
 8000ac4:	4a94      	ldr	r2, [pc, #592]	; (8000d18 <HAL_GPIO_Init+0x2a8>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d869      	bhi.n	8000b9e <HAL_GPIO_Init+0x12e>
 8000aca:	4a94      	ldr	r2, [pc, #592]	; (8000d1c <HAL_GPIO_Init+0x2ac>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d04c      	beq.n	8000b6a <HAL_GPIO_Init+0xfa>
 8000ad0:	4a92      	ldr	r2, [pc, #584]	; (8000d1c <HAL_GPIO_Init+0x2ac>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d863      	bhi.n	8000b9e <HAL_GPIO_Init+0x12e>
 8000ad6:	4a92      	ldr	r2, [pc, #584]	; (8000d20 <HAL_GPIO_Init+0x2b0>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d046      	beq.n	8000b6a <HAL_GPIO_Init+0xfa>
 8000adc:	4a90      	ldr	r2, [pc, #576]	; (8000d20 <HAL_GPIO_Init+0x2b0>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d85d      	bhi.n	8000b9e <HAL_GPIO_Init+0x12e>
 8000ae2:	2b12      	cmp	r3, #18
 8000ae4:	d82a      	bhi.n	8000b3c <HAL_GPIO_Init+0xcc>
 8000ae6:	2b12      	cmp	r3, #18
 8000ae8:	d859      	bhi.n	8000b9e <HAL_GPIO_Init+0x12e>
 8000aea:	a201      	add	r2, pc, #4	; (adr r2, 8000af0 <HAL_GPIO_Init+0x80>)
 8000aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000af0:	08000b6b 	.word	0x08000b6b
 8000af4:	08000b45 	.word	0x08000b45
 8000af8:	08000b57 	.word	0x08000b57
 8000afc:	08000b99 	.word	0x08000b99
 8000b00:	08000b9f 	.word	0x08000b9f
 8000b04:	08000b9f 	.word	0x08000b9f
 8000b08:	08000b9f 	.word	0x08000b9f
 8000b0c:	08000b9f 	.word	0x08000b9f
 8000b10:	08000b9f 	.word	0x08000b9f
 8000b14:	08000b9f 	.word	0x08000b9f
 8000b18:	08000b9f 	.word	0x08000b9f
 8000b1c:	08000b9f 	.word	0x08000b9f
 8000b20:	08000b9f 	.word	0x08000b9f
 8000b24:	08000b9f 	.word	0x08000b9f
 8000b28:	08000b9f 	.word	0x08000b9f
 8000b2c:	08000b9f 	.word	0x08000b9f
 8000b30:	08000b9f 	.word	0x08000b9f
 8000b34:	08000b4d 	.word	0x08000b4d
 8000b38:	08000b61 	.word	0x08000b61
 8000b3c:	4a79      	ldr	r2, [pc, #484]	; (8000d24 <HAL_GPIO_Init+0x2b4>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d013      	beq.n	8000b6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b42:	e02c      	b.n	8000b9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	623b      	str	r3, [r7, #32]
          break;
 8000b4a:	e029      	b.n	8000ba0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	3304      	adds	r3, #4
 8000b52:	623b      	str	r3, [r7, #32]
          break;
 8000b54:	e024      	b.n	8000ba0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	68db      	ldr	r3, [r3, #12]
 8000b5a:	3308      	adds	r3, #8
 8000b5c:	623b      	str	r3, [r7, #32]
          break;
 8000b5e:	e01f      	b.n	8000ba0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	330c      	adds	r3, #12
 8000b66:	623b      	str	r3, [r7, #32]
          break;
 8000b68:	e01a      	b.n	8000ba0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d102      	bne.n	8000b78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b72:	2304      	movs	r3, #4
 8000b74:	623b      	str	r3, [r7, #32]
          break;
 8000b76:	e013      	b.n	8000ba0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	689b      	ldr	r3, [r3, #8]
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d105      	bne.n	8000b8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b80:	2308      	movs	r3, #8
 8000b82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	69fa      	ldr	r2, [r7, #28]
 8000b88:	611a      	str	r2, [r3, #16]
          break;
 8000b8a:	e009      	b.n	8000ba0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b8c:	2308      	movs	r3, #8
 8000b8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	69fa      	ldr	r2, [r7, #28]
 8000b94:	615a      	str	r2, [r3, #20]
          break;
 8000b96:	e003      	b.n	8000ba0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	623b      	str	r3, [r7, #32]
          break;
 8000b9c:	e000      	b.n	8000ba0 <HAL_GPIO_Init+0x130>
          break;
 8000b9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ba0:	69bb      	ldr	r3, [r7, #24]
 8000ba2:	2bff      	cmp	r3, #255	; 0xff
 8000ba4:	d801      	bhi.n	8000baa <HAL_GPIO_Init+0x13a>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	e001      	b.n	8000bae <HAL_GPIO_Init+0x13e>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	3304      	adds	r3, #4
 8000bae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000bb0:	69bb      	ldr	r3, [r7, #24]
 8000bb2:	2bff      	cmp	r3, #255	; 0xff
 8000bb4:	d802      	bhi.n	8000bbc <HAL_GPIO_Init+0x14c>
 8000bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	e002      	b.n	8000bc2 <HAL_GPIO_Init+0x152>
 8000bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bbe:	3b08      	subs	r3, #8
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	210f      	movs	r1, #15
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd0:	43db      	mvns	r3, r3
 8000bd2:	401a      	ands	r2, r3
 8000bd4:	6a39      	ldr	r1, [r7, #32]
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bdc:	431a      	orrs	r2, r3
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	f000 80b1 	beq.w	8000d52 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bf0:	4b4d      	ldr	r3, [pc, #308]	; (8000d28 <HAL_GPIO_Init+0x2b8>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	4a4c      	ldr	r2, [pc, #304]	; (8000d28 <HAL_GPIO_Init+0x2b8>)
 8000bf6:	f043 0301 	orr.w	r3, r3, #1
 8000bfa:	6193      	str	r3, [r2, #24]
 8000bfc:	4b4a      	ldr	r3, [pc, #296]	; (8000d28 <HAL_GPIO_Init+0x2b8>)
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	f003 0301 	and.w	r3, r3, #1
 8000c04:	60bb      	str	r3, [r7, #8]
 8000c06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c08:	4a48      	ldr	r2, [pc, #288]	; (8000d2c <HAL_GPIO_Init+0x2bc>)
 8000c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c0c:	089b      	lsrs	r3, r3, #2
 8000c0e:	3302      	adds	r3, #2
 8000c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c18:	f003 0303 	and.w	r3, r3, #3
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	220f      	movs	r2, #15
 8000c20:	fa02 f303 	lsl.w	r3, r2, r3
 8000c24:	43db      	mvns	r3, r3
 8000c26:	68fa      	ldr	r2, [r7, #12]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4a40      	ldr	r2, [pc, #256]	; (8000d30 <HAL_GPIO_Init+0x2c0>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d013      	beq.n	8000c5c <HAL_GPIO_Init+0x1ec>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4a3f      	ldr	r2, [pc, #252]	; (8000d34 <HAL_GPIO_Init+0x2c4>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d00d      	beq.n	8000c58 <HAL_GPIO_Init+0x1e8>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4a3e      	ldr	r2, [pc, #248]	; (8000d38 <HAL_GPIO_Init+0x2c8>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d007      	beq.n	8000c54 <HAL_GPIO_Init+0x1e4>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4a3d      	ldr	r2, [pc, #244]	; (8000d3c <HAL_GPIO_Init+0x2cc>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d101      	bne.n	8000c50 <HAL_GPIO_Init+0x1e0>
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	e006      	b.n	8000c5e <HAL_GPIO_Init+0x1ee>
 8000c50:	2304      	movs	r3, #4
 8000c52:	e004      	b.n	8000c5e <HAL_GPIO_Init+0x1ee>
 8000c54:	2302      	movs	r3, #2
 8000c56:	e002      	b.n	8000c5e <HAL_GPIO_Init+0x1ee>
 8000c58:	2301      	movs	r3, #1
 8000c5a:	e000      	b.n	8000c5e <HAL_GPIO_Init+0x1ee>
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c60:	f002 0203 	and.w	r2, r2, #3
 8000c64:	0092      	lsls	r2, r2, #2
 8000c66:	4093      	lsls	r3, r2
 8000c68:	68fa      	ldr	r2, [r7, #12]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c6e:	492f      	ldr	r1, [pc, #188]	; (8000d2c <HAL_GPIO_Init+0x2bc>)
 8000c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c72:	089b      	lsrs	r3, r3, #2
 8000c74:	3302      	adds	r3, #2
 8000c76:	68fa      	ldr	r2, [r7, #12]
 8000c78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d006      	beq.n	8000c96 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c88:	4b2d      	ldr	r3, [pc, #180]	; (8000d40 <HAL_GPIO_Init+0x2d0>)
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	492c      	ldr	r1, [pc, #176]	; (8000d40 <HAL_GPIO_Init+0x2d0>)
 8000c8e:	69bb      	ldr	r3, [r7, #24]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	600b      	str	r3, [r1, #0]
 8000c94:	e006      	b.n	8000ca4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c96:	4b2a      	ldr	r3, [pc, #168]	; (8000d40 <HAL_GPIO_Init+0x2d0>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	69bb      	ldr	r3, [r7, #24]
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	4928      	ldr	r1, [pc, #160]	; (8000d40 <HAL_GPIO_Init+0x2d0>)
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d006      	beq.n	8000cbe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000cb0:	4b23      	ldr	r3, [pc, #140]	; (8000d40 <HAL_GPIO_Init+0x2d0>)
 8000cb2:	685a      	ldr	r2, [r3, #4]
 8000cb4:	4922      	ldr	r1, [pc, #136]	; (8000d40 <HAL_GPIO_Init+0x2d0>)
 8000cb6:	69bb      	ldr	r3, [r7, #24]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	604b      	str	r3, [r1, #4]
 8000cbc:	e006      	b.n	8000ccc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cbe:	4b20      	ldr	r3, [pc, #128]	; (8000d40 <HAL_GPIO_Init+0x2d0>)
 8000cc0:	685a      	ldr	r2, [r3, #4]
 8000cc2:	69bb      	ldr	r3, [r7, #24]
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	491e      	ldr	r1, [pc, #120]	; (8000d40 <HAL_GPIO_Init+0x2d0>)
 8000cc8:	4013      	ands	r3, r2
 8000cca:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d006      	beq.n	8000ce6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cd8:	4b19      	ldr	r3, [pc, #100]	; (8000d40 <HAL_GPIO_Init+0x2d0>)
 8000cda:	689a      	ldr	r2, [r3, #8]
 8000cdc:	4918      	ldr	r1, [pc, #96]	; (8000d40 <HAL_GPIO_Init+0x2d0>)
 8000cde:	69bb      	ldr	r3, [r7, #24]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	608b      	str	r3, [r1, #8]
 8000ce4:	e006      	b.n	8000cf4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ce6:	4b16      	ldr	r3, [pc, #88]	; (8000d40 <HAL_GPIO_Init+0x2d0>)
 8000ce8:	689a      	ldr	r2, [r3, #8]
 8000cea:	69bb      	ldr	r3, [r7, #24]
 8000cec:	43db      	mvns	r3, r3
 8000cee:	4914      	ldr	r1, [pc, #80]	; (8000d40 <HAL_GPIO_Init+0x2d0>)
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d021      	beq.n	8000d44 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d00:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <HAL_GPIO_Init+0x2d0>)
 8000d02:	68da      	ldr	r2, [r3, #12]
 8000d04:	490e      	ldr	r1, [pc, #56]	; (8000d40 <HAL_GPIO_Init+0x2d0>)
 8000d06:	69bb      	ldr	r3, [r7, #24]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	60cb      	str	r3, [r1, #12]
 8000d0c:	e021      	b.n	8000d52 <HAL_GPIO_Init+0x2e2>
 8000d0e:	bf00      	nop
 8000d10:	10320000 	.word	0x10320000
 8000d14:	10310000 	.word	0x10310000
 8000d18:	10220000 	.word	0x10220000
 8000d1c:	10210000 	.word	0x10210000
 8000d20:	10120000 	.word	0x10120000
 8000d24:	10110000 	.word	0x10110000
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	40010000 	.word	0x40010000
 8000d30:	40010800 	.word	0x40010800
 8000d34:	40010c00 	.word	0x40010c00
 8000d38:	40011000 	.word	0x40011000
 8000d3c:	40011400 	.word	0x40011400
 8000d40:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d44:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <HAL_GPIO_Init+0x304>)
 8000d46:	68da      	ldr	r2, [r3, #12]
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	4909      	ldr	r1, [pc, #36]	; (8000d74 <HAL_GPIO_Init+0x304>)
 8000d4e:	4013      	ands	r3, r2
 8000d50:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d54:	3301      	adds	r3, #1
 8000d56:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f47f ae8e 	bne.w	8000a84 <HAL_GPIO_Init+0x14>
  }
}
 8000d68:	bf00      	nop
 8000d6a:	bf00      	nop
 8000d6c:	372c      	adds	r7, #44	; 0x2c
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr
 8000d74:	40010400 	.word	0x40010400

08000d78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	460b      	mov	r3, r1
 8000d82:	807b      	strh	r3, [r7, #2]
 8000d84:	4613      	mov	r3, r2
 8000d86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d88:	787b      	ldrb	r3, [r7, #1]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d003      	beq.n	8000d96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d8e:	887a      	ldrh	r2, [r7, #2]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d94:	e003      	b.n	8000d9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d96:	887b      	ldrh	r3, [r7, #2]
 8000d98:	041a      	lsls	r2, r3, #16
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	611a      	str	r2, [r3, #16]
}
 8000d9e:	bf00      	nop
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr

08000da8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000db2:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000db4:	695a      	ldr	r2, [r3, #20]
 8000db6:	88fb      	ldrh	r3, [r7, #6]
 8000db8:	4013      	ands	r3, r2
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d006      	beq.n	8000dcc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000dbe:	4a05      	ldr	r2, [pc, #20]	; (8000dd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000dc0:	88fb      	ldrh	r3, [r7, #6]
 8000dc2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000dc4:	88fb      	ldrh	r3, [r7, #6]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff f9c0 	bl	800014c <HAL_GPIO_EXTI_Callback>
  }
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40010400 	.word	0x40010400

08000dd8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8000ddc:	4b03      	ldr	r3, [pc, #12]	; (8000dec <HAL_PWR_EnableBkUpAccess+0x14>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	601a      	str	r2, [r3, #0]
}
 8000de2:	bf00      	nop
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bc80      	pop	{r7}
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	420e0020 	.word	0x420e0020

08000df0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d101      	bne.n	8000e02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e272      	b.n	80012e8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	f000 8087 	beq.w	8000f1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e10:	4b92      	ldr	r3, [pc, #584]	; (800105c <HAL_RCC_OscConfig+0x26c>)
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f003 030c 	and.w	r3, r3, #12
 8000e18:	2b04      	cmp	r3, #4
 8000e1a:	d00c      	beq.n	8000e36 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e1c:	4b8f      	ldr	r3, [pc, #572]	; (800105c <HAL_RCC_OscConfig+0x26c>)
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f003 030c 	and.w	r3, r3, #12
 8000e24:	2b08      	cmp	r3, #8
 8000e26:	d112      	bne.n	8000e4e <HAL_RCC_OscConfig+0x5e>
 8000e28:	4b8c      	ldr	r3, [pc, #560]	; (800105c <HAL_RCC_OscConfig+0x26c>)
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e34:	d10b      	bne.n	8000e4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e36:	4b89      	ldr	r3, [pc, #548]	; (800105c <HAL_RCC_OscConfig+0x26c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d06c      	beq.n	8000f1c <HAL_RCC_OscConfig+0x12c>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d168      	bne.n	8000f1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e24c      	b.n	80012e8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e56:	d106      	bne.n	8000e66 <HAL_RCC_OscConfig+0x76>
 8000e58:	4b80      	ldr	r3, [pc, #512]	; (800105c <HAL_RCC_OscConfig+0x26c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a7f      	ldr	r2, [pc, #508]	; (800105c <HAL_RCC_OscConfig+0x26c>)
 8000e5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e62:	6013      	str	r3, [r2, #0]
 8000e64:	e02e      	b.n	8000ec4 <HAL_RCC_OscConfig+0xd4>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d10c      	bne.n	8000e88 <HAL_RCC_OscConfig+0x98>
 8000e6e:	4b7b      	ldr	r3, [pc, #492]	; (800105c <HAL_RCC_OscConfig+0x26c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a7a      	ldr	r2, [pc, #488]	; (800105c <HAL_RCC_OscConfig+0x26c>)
 8000e74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e78:	6013      	str	r3, [r2, #0]
 8000e7a:	4b78      	ldr	r3, [pc, #480]	; (800105c <HAL_RCC_OscConfig+0x26c>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a77      	ldr	r2, [pc, #476]	; (800105c <HAL_RCC_OscConfig+0x26c>)
 8000e80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e84:	6013      	str	r3, [r2, #0]
 8000e86:	e01d      	b.n	8000ec4 <HAL_RCC_OscConfig+0xd4>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e90:	d10c      	bne.n	8000eac <HAL_RCC_OscConfig+0xbc>
 8000e92:	4b72      	ldr	r3, [pc, #456]	; (800105c <HAL_RCC_OscConfig+0x26c>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a71      	ldr	r2, [pc, #452]	; (800105c <HAL_RCC_OscConfig+0x26c>)
 8000e98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e9c:	6013      	str	r3, [r2, #0]
 8000e9e:	4b6f      	ldr	r3, [pc, #444]	; (800105c <HAL_RCC_OscConfig+0x26c>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a6e      	ldr	r2, [pc, #440]	; (800105c <HAL_RCC_OscConfig+0x26c>)
 8000ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ea8:	6013      	str	r3, [r2, #0]
 8000eaa:	e00b      	b.n	8000ec4 <HAL_RCC_OscConfig+0xd4>
 8000eac:	4b6b      	ldr	r3, [pc, #428]	; (800105c <HAL_RCC_OscConfig+0x26c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a6a      	ldr	r2, [pc, #424]	; (800105c <HAL_RCC_OscConfig+0x26c>)
 8000eb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eb6:	6013      	str	r3, [r2, #0]
 8000eb8:	4b68      	ldr	r3, [pc, #416]	; (800105c <HAL_RCC_OscConfig+0x26c>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a67      	ldr	r2, [pc, #412]	; (800105c <HAL_RCC_OscConfig+0x26c>)
 8000ebe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ec2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d013      	beq.n	8000ef4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ecc:	f7ff fcb8 	bl	8000840 <HAL_GetTick>
 8000ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ed2:	e008      	b.n	8000ee6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ed4:	f7ff fcb4 	bl	8000840 <HAL_GetTick>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	2b64      	cmp	r3, #100	; 0x64
 8000ee0:	d901      	bls.n	8000ee6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	e200      	b.n	80012e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ee6:	4b5d      	ldr	r3, [pc, #372]	; (800105c <HAL_RCC_OscConfig+0x26c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d0f0      	beq.n	8000ed4 <HAL_RCC_OscConfig+0xe4>
 8000ef2:	e014      	b.n	8000f1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ef4:	f7ff fca4 	bl	8000840 <HAL_GetTick>
 8000ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000efa:	e008      	b.n	8000f0e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000efc:	f7ff fca0 	bl	8000840 <HAL_GetTick>
 8000f00:	4602      	mov	r2, r0
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	2b64      	cmp	r3, #100	; 0x64
 8000f08:	d901      	bls.n	8000f0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e1ec      	b.n	80012e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f0e:	4b53      	ldr	r3, [pc, #332]	; (800105c <HAL_RCC_OscConfig+0x26c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d1f0      	bne.n	8000efc <HAL_RCC_OscConfig+0x10c>
 8000f1a:	e000      	b.n	8000f1e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f003 0302 	and.w	r3, r3, #2
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d063      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f2a:	4b4c      	ldr	r3, [pc, #304]	; (800105c <HAL_RCC_OscConfig+0x26c>)
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f003 030c 	and.w	r3, r3, #12
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d00b      	beq.n	8000f4e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f36:	4b49      	ldr	r3, [pc, #292]	; (800105c <HAL_RCC_OscConfig+0x26c>)
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f003 030c 	and.w	r3, r3, #12
 8000f3e:	2b08      	cmp	r3, #8
 8000f40:	d11c      	bne.n	8000f7c <HAL_RCC_OscConfig+0x18c>
 8000f42:	4b46      	ldr	r3, [pc, #280]	; (800105c <HAL_RCC_OscConfig+0x26c>)
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d116      	bne.n	8000f7c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f4e:	4b43      	ldr	r3, [pc, #268]	; (800105c <HAL_RCC_OscConfig+0x26c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d005      	beq.n	8000f66 <HAL_RCC_OscConfig+0x176>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	691b      	ldr	r3, [r3, #16]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d001      	beq.n	8000f66 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e1c0      	b.n	80012e8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f66:	4b3d      	ldr	r3, [pc, #244]	; (800105c <HAL_RCC_OscConfig+0x26c>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	695b      	ldr	r3, [r3, #20]
 8000f72:	00db      	lsls	r3, r3, #3
 8000f74:	4939      	ldr	r1, [pc, #228]	; (800105c <HAL_RCC_OscConfig+0x26c>)
 8000f76:	4313      	orrs	r3, r2
 8000f78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f7a:	e03a      	b.n	8000ff2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	691b      	ldr	r3, [r3, #16]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d020      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f84:	4b36      	ldr	r3, [pc, #216]	; (8001060 <HAL_RCC_OscConfig+0x270>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f8a:	f7ff fc59 	bl	8000840 <HAL_GetTick>
 8000f8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f90:	e008      	b.n	8000fa4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f92:	f7ff fc55 	bl	8000840 <HAL_GetTick>
 8000f96:	4602      	mov	r2, r0
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d901      	bls.n	8000fa4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	e1a1      	b.n	80012e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fa4:	4b2d      	ldr	r3, [pc, #180]	; (800105c <HAL_RCC_OscConfig+0x26c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f003 0302 	and.w	r3, r3, #2
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d0f0      	beq.n	8000f92 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fb0:	4b2a      	ldr	r3, [pc, #168]	; (800105c <HAL_RCC_OscConfig+0x26c>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	695b      	ldr	r3, [r3, #20]
 8000fbc:	00db      	lsls	r3, r3, #3
 8000fbe:	4927      	ldr	r1, [pc, #156]	; (800105c <HAL_RCC_OscConfig+0x26c>)
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	600b      	str	r3, [r1, #0]
 8000fc4:	e015      	b.n	8000ff2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fc6:	4b26      	ldr	r3, [pc, #152]	; (8001060 <HAL_RCC_OscConfig+0x270>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fcc:	f7ff fc38 	bl	8000840 <HAL_GetTick>
 8000fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fd2:	e008      	b.n	8000fe6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fd4:	f7ff fc34 	bl	8000840 <HAL_GetTick>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d901      	bls.n	8000fe6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	e180      	b.n	80012e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fe6:	4b1d      	ldr	r3, [pc, #116]	; (800105c <HAL_RCC_OscConfig+0x26c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d1f0      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f003 0308 	and.w	r3, r3, #8
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d03a      	beq.n	8001074 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	699b      	ldr	r3, [r3, #24]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d019      	beq.n	800103a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001006:	4b17      	ldr	r3, [pc, #92]	; (8001064 <HAL_RCC_OscConfig+0x274>)
 8001008:	2201      	movs	r2, #1
 800100a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800100c:	f7ff fc18 	bl	8000840 <HAL_GetTick>
 8001010:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001012:	e008      	b.n	8001026 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001014:	f7ff fc14 	bl	8000840 <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	2b02      	cmp	r3, #2
 8001020:	d901      	bls.n	8001026 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001022:	2303      	movs	r3, #3
 8001024:	e160      	b.n	80012e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001026:	4b0d      	ldr	r3, [pc, #52]	; (800105c <HAL_RCC_OscConfig+0x26c>)
 8001028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	2b00      	cmp	r3, #0
 8001030:	d0f0      	beq.n	8001014 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f000 fac4 	bl	80015c0 <RCC_Delay>
 8001038:	e01c      	b.n	8001074 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800103a:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <HAL_RCC_OscConfig+0x274>)
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001040:	f7ff fbfe 	bl	8000840 <HAL_GetTick>
 8001044:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001046:	e00f      	b.n	8001068 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001048:	f7ff fbfa 	bl	8000840 <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	2b02      	cmp	r3, #2
 8001054:	d908      	bls.n	8001068 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001056:	2303      	movs	r3, #3
 8001058:	e146      	b.n	80012e8 <HAL_RCC_OscConfig+0x4f8>
 800105a:	bf00      	nop
 800105c:	40021000 	.word	0x40021000
 8001060:	42420000 	.word	0x42420000
 8001064:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001068:	4b92      	ldr	r3, [pc, #584]	; (80012b4 <HAL_RCC_OscConfig+0x4c4>)
 800106a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106c:	f003 0302 	and.w	r3, r3, #2
 8001070:	2b00      	cmp	r3, #0
 8001072:	d1e9      	bne.n	8001048 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 0304 	and.w	r3, r3, #4
 800107c:	2b00      	cmp	r3, #0
 800107e:	f000 80a6 	beq.w	80011ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001082:	2300      	movs	r3, #0
 8001084:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001086:	4b8b      	ldr	r3, [pc, #556]	; (80012b4 <HAL_RCC_OscConfig+0x4c4>)
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d10d      	bne.n	80010ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001092:	4b88      	ldr	r3, [pc, #544]	; (80012b4 <HAL_RCC_OscConfig+0x4c4>)
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	4a87      	ldr	r2, [pc, #540]	; (80012b4 <HAL_RCC_OscConfig+0x4c4>)
 8001098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800109c:	61d3      	str	r3, [r2, #28]
 800109e:	4b85      	ldr	r3, [pc, #532]	; (80012b4 <HAL_RCC_OscConfig+0x4c4>)
 80010a0:	69db      	ldr	r3, [r3, #28]
 80010a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010aa:	2301      	movs	r3, #1
 80010ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ae:	4b82      	ldr	r3, [pc, #520]	; (80012b8 <HAL_RCC_OscConfig+0x4c8>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d118      	bne.n	80010ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010ba:	4b7f      	ldr	r3, [pc, #508]	; (80012b8 <HAL_RCC_OscConfig+0x4c8>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a7e      	ldr	r2, [pc, #504]	; (80012b8 <HAL_RCC_OscConfig+0x4c8>)
 80010c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010c6:	f7ff fbbb 	bl	8000840 <HAL_GetTick>
 80010ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010cc:	e008      	b.n	80010e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010ce:	f7ff fbb7 	bl	8000840 <HAL_GetTick>
 80010d2:	4602      	mov	r2, r0
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	2b64      	cmp	r3, #100	; 0x64
 80010da:	d901      	bls.n	80010e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80010dc:	2303      	movs	r3, #3
 80010de:	e103      	b.n	80012e8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010e0:	4b75      	ldr	r3, [pc, #468]	; (80012b8 <HAL_RCC_OscConfig+0x4c8>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d0f0      	beq.n	80010ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d106      	bne.n	8001102 <HAL_RCC_OscConfig+0x312>
 80010f4:	4b6f      	ldr	r3, [pc, #444]	; (80012b4 <HAL_RCC_OscConfig+0x4c4>)
 80010f6:	6a1b      	ldr	r3, [r3, #32]
 80010f8:	4a6e      	ldr	r2, [pc, #440]	; (80012b4 <HAL_RCC_OscConfig+0x4c4>)
 80010fa:	f043 0301 	orr.w	r3, r3, #1
 80010fe:	6213      	str	r3, [r2, #32]
 8001100:	e02d      	b.n	800115e <HAL_RCC_OscConfig+0x36e>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d10c      	bne.n	8001124 <HAL_RCC_OscConfig+0x334>
 800110a:	4b6a      	ldr	r3, [pc, #424]	; (80012b4 <HAL_RCC_OscConfig+0x4c4>)
 800110c:	6a1b      	ldr	r3, [r3, #32]
 800110e:	4a69      	ldr	r2, [pc, #420]	; (80012b4 <HAL_RCC_OscConfig+0x4c4>)
 8001110:	f023 0301 	bic.w	r3, r3, #1
 8001114:	6213      	str	r3, [r2, #32]
 8001116:	4b67      	ldr	r3, [pc, #412]	; (80012b4 <HAL_RCC_OscConfig+0x4c4>)
 8001118:	6a1b      	ldr	r3, [r3, #32]
 800111a:	4a66      	ldr	r2, [pc, #408]	; (80012b4 <HAL_RCC_OscConfig+0x4c4>)
 800111c:	f023 0304 	bic.w	r3, r3, #4
 8001120:	6213      	str	r3, [r2, #32]
 8001122:	e01c      	b.n	800115e <HAL_RCC_OscConfig+0x36e>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	2b05      	cmp	r3, #5
 800112a:	d10c      	bne.n	8001146 <HAL_RCC_OscConfig+0x356>
 800112c:	4b61      	ldr	r3, [pc, #388]	; (80012b4 <HAL_RCC_OscConfig+0x4c4>)
 800112e:	6a1b      	ldr	r3, [r3, #32]
 8001130:	4a60      	ldr	r2, [pc, #384]	; (80012b4 <HAL_RCC_OscConfig+0x4c4>)
 8001132:	f043 0304 	orr.w	r3, r3, #4
 8001136:	6213      	str	r3, [r2, #32]
 8001138:	4b5e      	ldr	r3, [pc, #376]	; (80012b4 <HAL_RCC_OscConfig+0x4c4>)
 800113a:	6a1b      	ldr	r3, [r3, #32]
 800113c:	4a5d      	ldr	r2, [pc, #372]	; (80012b4 <HAL_RCC_OscConfig+0x4c4>)
 800113e:	f043 0301 	orr.w	r3, r3, #1
 8001142:	6213      	str	r3, [r2, #32]
 8001144:	e00b      	b.n	800115e <HAL_RCC_OscConfig+0x36e>
 8001146:	4b5b      	ldr	r3, [pc, #364]	; (80012b4 <HAL_RCC_OscConfig+0x4c4>)
 8001148:	6a1b      	ldr	r3, [r3, #32]
 800114a:	4a5a      	ldr	r2, [pc, #360]	; (80012b4 <HAL_RCC_OscConfig+0x4c4>)
 800114c:	f023 0301 	bic.w	r3, r3, #1
 8001150:	6213      	str	r3, [r2, #32]
 8001152:	4b58      	ldr	r3, [pc, #352]	; (80012b4 <HAL_RCC_OscConfig+0x4c4>)
 8001154:	6a1b      	ldr	r3, [r3, #32]
 8001156:	4a57      	ldr	r2, [pc, #348]	; (80012b4 <HAL_RCC_OscConfig+0x4c4>)
 8001158:	f023 0304 	bic.w	r3, r3, #4
 800115c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d015      	beq.n	8001192 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001166:	f7ff fb6b 	bl	8000840 <HAL_GetTick>
 800116a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800116c:	e00a      	b.n	8001184 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800116e:	f7ff fb67 	bl	8000840 <HAL_GetTick>
 8001172:	4602      	mov	r2, r0
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	f241 3288 	movw	r2, #5000	; 0x1388
 800117c:	4293      	cmp	r3, r2
 800117e:	d901      	bls.n	8001184 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001180:	2303      	movs	r3, #3
 8001182:	e0b1      	b.n	80012e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001184:	4b4b      	ldr	r3, [pc, #300]	; (80012b4 <HAL_RCC_OscConfig+0x4c4>)
 8001186:	6a1b      	ldr	r3, [r3, #32]
 8001188:	f003 0302 	and.w	r3, r3, #2
 800118c:	2b00      	cmp	r3, #0
 800118e:	d0ee      	beq.n	800116e <HAL_RCC_OscConfig+0x37e>
 8001190:	e014      	b.n	80011bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001192:	f7ff fb55 	bl	8000840 <HAL_GetTick>
 8001196:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001198:	e00a      	b.n	80011b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800119a:	f7ff fb51 	bl	8000840 <HAL_GetTick>
 800119e:	4602      	mov	r2, r0
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d901      	bls.n	80011b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	e09b      	b.n	80012e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011b0:	4b40      	ldr	r3, [pc, #256]	; (80012b4 <HAL_RCC_OscConfig+0x4c4>)
 80011b2:	6a1b      	ldr	r3, [r3, #32]
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d1ee      	bne.n	800119a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80011bc:	7dfb      	ldrb	r3, [r7, #23]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d105      	bne.n	80011ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011c2:	4b3c      	ldr	r3, [pc, #240]	; (80012b4 <HAL_RCC_OscConfig+0x4c4>)
 80011c4:	69db      	ldr	r3, [r3, #28]
 80011c6:	4a3b      	ldr	r2, [pc, #236]	; (80012b4 <HAL_RCC_OscConfig+0x4c4>)
 80011c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	69db      	ldr	r3, [r3, #28]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	f000 8087 	beq.w	80012e6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011d8:	4b36      	ldr	r3, [pc, #216]	; (80012b4 <HAL_RCC_OscConfig+0x4c4>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 030c 	and.w	r3, r3, #12
 80011e0:	2b08      	cmp	r3, #8
 80011e2:	d061      	beq.n	80012a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	69db      	ldr	r3, [r3, #28]
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d146      	bne.n	800127a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011ec:	4b33      	ldr	r3, [pc, #204]	; (80012bc <HAL_RCC_OscConfig+0x4cc>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f2:	f7ff fb25 	bl	8000840 <HAL_GetTick>
 80011f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011f8:	e008      	b.n	800120c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011fa:	f7ff fb21 	bl	8000840 <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d901      	bls.n	800120c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e06d      	b.n	80012e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800120c:	4b29      	ldr	r3, [pc, #164]	; (80012b4 <HAL_RCC_OscConfig+0x4c4>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d1f0      	bne.n	80011fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6a1b      	ldr	r3, [r3, #32]
 800121c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001220:	d108      	bne.n	8001234 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001222:	4b24      	ldr	r3, [pc, #144]	; (80012b4 <HAL_RCC_OscConfig+0x4c4>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	4921      	ldr	r1, [pc, #132]	; (80012b4 <HAL_RCC_OscConfig+0x4c4>)
 8001230:	4313      	orrs	r3, r2
 8001232:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001234:	4b1f      	ldr	r3, [pc, #124]	; (80012b4 <HAL_RCC_OscConfig+0x4c4>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6a19      	ldr	r1, [r3, #32]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001244:	430b      	orrs	r3, r1
 8001246:	491b      	ldr	r1, [pc, #108]	; (80012b4 <HAL_RCC_OscConfig+0x4c4>)
 8001248:	4313      	orrs	r3, r2
 800124a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800124c:	4b1b      	ldr	r3, [pc, #108]	; (80012bc <HAL_RCC_OscConfig+0x4cc>)
 800124e:	2201      	movs	r2, #1
 8001250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001252:	f7ff faf5 	bl	8000840 <HAL_GetTick>
 8001256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001258:	e008      	b.n	800126c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800125a:	f7ff faf1 	bl	8000840 <HAL_GetTick>
 800125e:	4602      	mov	r2, r0
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	2b02      	cmp	r3, #2
 8001266:	d901      	bls.n	800126c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001268:	2303      	movs	r3, #3
 800126a:	e03d      	b.n	80012e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800126c:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <HAL_RCC_OscConfig+0x4c4>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d0f0      	beq.n	800125a <HAL_RCC_OscConfig+0x46a>
 8001278:	e035      	b.n	80012e6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800127a:	4b10      	ldr	r3, [pc, #64]	; (80012bc <HAL_RCC_OscConfig+0x4cc>)
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001280:	f7ff fade 	bl	8000840 <HAL_GetTick>
 8001284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001288:	f7ff fada 	bl	8000840 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b02      	cmp	r3, #2
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e026      	b.n	80012e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800129a:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <HAL_RCC_OscConfig+0x4c4>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1f0      	bne.n	8001288 <HAL_RCC_OscConfig+0x498>
 80012a6:	e01e      	b.n	80012e6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	69db      	ldr	r3, [r3, #28]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d107      	bne.n	80012c0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e019      	b.n	80012e8 <HAL_RCC_OscConfig+0x4f8>
 80012b4:	40021000 	.word	0x40021000
 80012b8:	40007000 	.word	0x40007000
 80012bc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80012c0:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <HAL_RCC_OscConfig+0x500>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a1b      	ldr	r3, [r3, #32]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d106      	bne.n	80012e2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012de:	429a      	cmp	r2, r3
 80012e0:	d001      	beq.n	80012e6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e000      	b.n	80012e8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40021000 	.word	0x40021000

080012f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d101      	bne.n	8001308 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e0d0      	b.n	80014aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001308:	4b6a      	ldr	r3, [pc, #424]	; (80014b4 <HAL_RCC_ClockConfig+0x1c0>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0307 	and.w	r3, r3, #7
 8001310:	683a      	ldr	r2, [r7, #0]
 8001312:	429a      	cmp	r2, r3
 8001314:	d910      	bls.n	8001338 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001316:	4b67      	ldr	r3, [pc, #412]	; (80014b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f023 0207 	bic.w	r2, r3, #7
 800131e:	4965      	ldr	r1, [pc, #404]	; (80014b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	4313      	orrs	r3, r2
 8001324:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001326:	4b63      	ldr	r3, [pc, #396]	; (80014b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	683a      	ldr	r2, [r7, #0]
 8001330:	429a      	cmp	r2, r3
 8001332:	d001      	beq.n	8001338 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e0b8      	b.n	80014aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0302 	and.w	r3, r3, #2
 8001340:	2b00      	cmp	r3, #0
 8001342:	d020      	beq.n	8001386 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0304 	and.w	r3, r3, #4
 800134c:	2b00      	cmp	r3, #0
 800134e:	d005      	beq.n	800135c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001350:	4b59      	ldr	r3, [pc, #356]	; (80014b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	4a58      	ldr	r2, [pc, #352]	; (80014b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001356:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800135a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0308 	and.w	r3, r3, #8
 8001364:	2b00      	cmp	r3, #0
 8001366:	d005      	beq.n	8001374 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001368:	4b53      	ldr	r3, [pc, #332]	; (80014b8 <HAL_RCC_ClockConfig+0x1c4>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	4a52      	ldr	r2, [pc, #328]	; (80014b8 <HAL_RCC_ClockConfig+0x1c4>)
 800136e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001372:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001374:	4b50      	ldr	r3, [pc, #320]	; (80014b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	494d      	ldr	r1, [pc, #308]	; (80014b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001382:	4313      	orrs	r3, r2
 8001384:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	2b00      	cmp	r3, #0
 8001390:	d040      	beq.n	8001414 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d107      	bne.n	80013aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800139a:	4b47      	ldr	r3, [pc, #284]	; (80014b8 <HAL_RCC_ClockConfig+0x1c4>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d115      	bne.n	80013d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e07f      	b.n	80014aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d107      	bne.n	80013c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013b2:	4b41      	ldr	r3, [pc, #260]	; (80014b8 <HAL_RCC_ClockConfig+0x1c4>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d109      	bne.n	80013d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e073      	b.n	80014aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c2:	4b3d      	ldr	r3, [pc, #244]	; (80014b8 <HAL_RCC_ClockConfig+0x1c4>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d101      	bne.n	80013d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e06b      	b.n	80014aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013d2:	4b39      	ldr	r3, [pc, #228]	; (80014b8 <HAL_RCC_ClockConfig+0x1c4>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f023 0203 	bic.w	r2, r3, #3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	4936      	ldr	r1, [pc, #216]	; (80014b8 <HAL_RCC_ClockConfig+0x1c4>)
 80013e0:	4313      	orrs	r3, r2
 80013e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013e4:	f7ff fa2c 	bl	8000840 <HAL_GetTick>
 80013e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013ea:	e00a      	b.n	8001402 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013ec:	f7ff fa28 	bl	8000840 <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e053      	b.n	80014aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001402:	4b2d      	ldr	r3, [pc, #180]	; (80014b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f003 020c 	and.w	r2, r3, #12
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	429a      	cmp	r2, r3
 8001412:	d1eb      	bne.n	80013ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001414:	4b27      	ldr	r3, [pc, #156]	; (80014b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0307 	and.w	r3, r3, #7
 800141c:	683a      	ldr	r2, [r7, #0]
 800141e:	429a      	cmp	r2, r3
 8001420:	d210      	bcs.n	8001444 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001422:	4b24      	ldr	r3, [pc, #144]	; (80014b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f023 0207 	bic.w	r2, r3, #7
 800142a:	4922      	ldr	r1, [pc, #136]	; (80014b4 <HAL_RCC_ClockConfig+0x1c0>)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	4313      	orrs	r3, r2
 8001430:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001432:	4b20      	ldr	r3, [pc, #128]	; (80014b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0307 	and.w	r3, r3, #7
 800143a:	683a      	ldr	r2, [r7, #0]
 800143c:	429a      	cmp	r2, r3
 800143e:	d001      	beq.n	8001444 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e032      	b.n	80014aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0304 	and.w	r3, r3, #4
 800144c:	2b00      	cmp	r3, #0
 800144e:	d008      	beq.n	8001462 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001450:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	4916      	ldr	r1, [pc, #88]	; (80014b8 <HAL_RCC_ClockConfig+0x1c4>)
 800145e:	4313      	orrs	r3, r2
 8001460:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0308 	and.w	r3, r3, #8
 800146a:	2b00      	cmp	r3, #0
 800146c:	d009      	beq.n	8001482 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800146e:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	691b      	ldr	r3, [r3, #16]
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	490e      	ldr	r1, [pc, #56]	; (80014b8 <HAL_RCC_ClockConfig+0x1c4>)
 800147e:	4313      	orrs	r3, r2
 8001480:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001482:	f000 f821 	bl	80014c8 <HAL_RCC_GetSysClockFreq>
 8001486:	4602      	mov	r2, r0
 8001488:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <HAL_RCC_ClockConfig+0x1c4>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	091b      	lsrs	r3, r3, #4
 800148e:	f003 030f 	and.w	r3, r3, #15
 8001492:	490a      	ldr	r1, [pc, #40]	; (80014bc <HAL_RCC_ClockConfig+0x1c8>)
 8001494:	5ccb      	ldrb	r3, [r1, r3]
 8001496:	fa22 f303 	lsr.w	r3, r2, r3
 800149a:	4a09      	ldr	r2, [pc, #36]	; (80014c0 <HAL_RCC_ClockConfig+0x1cc>)
 800149c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800149e:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <HAL_RCC_ClockConfig+0x1d0>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff f98a 	bl	80007bc <HAL_InitTick>

  return HAL_OK;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40022000 	.word	0x40022000
 80014b8:	40021000 	.word	0x40021000
 80014bc:	08002dec 	.word	0x08002dec
 80014c0:	20000000 	.word	0x20000000
 80014c4:	20000004 	.word	0x20000004

080014c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014c8:	b490      	push	{r4, r7}
 80014ca:	b08a      	sub	sp, #40	; 0x28
 80014cc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80014ce:	4b29      	ldr	r3, [pc, #164]	; (8001574 <HAL_RCC_GetSysClockFreq+0xac>)
 80014d0:	1d3c      	adds	r4, r7, #4
 80014d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80014d8:	f240 2301 	movw	r3, #513	; 0x201
 80014dc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
 80014e2:	2300      	movs	r3, #0
 80014e4:	61bb      	str	r3, [r7, #24]
 80014e6:	2300      	movs	r3, #0
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80014ee:	2300      	movs	r3, #0
 80014f0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80014f2:	4b21      	ldr	r3, [pc, #132]	; (8001578 <HAL_RCC_GetSysClockFreq+0xb0>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	f003 030c 	and.w	r3, r3, #12
 80014fe:	2b04      	cmp	r3, #4
 8001500:	d002      	beq.n	8001508 <HAL_RCC_GetSysClockFreq+0x40>
 8001502:	2b08      	cmp	r3, #8
 8001504:	d003      	beq.n	800150e <HAL_RCC_GetSysClockFreq+0x46>
 8001506:	e02b      	b.n	8001560 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001508:	4b1c      	ldr	r3, [pc, #112]	; (800157c <HAL_RCC_GetSysClockFreq+0xb4>)
 800150a:	623b      	str	r3, [r7, #32]
      break;
 800150c:	e02b      	b.n	8001566 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	0c9b      	lsrs	r3, r3, #18
 8001512:	f003 030f 	and.w	r3, r3, #15
 8001516:	3328      	adds	r3, #40	; 0x28
 8001518:	443b      	add	r3, r7
 800151a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800151e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d012      	beq.n	8001550 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800152a:	4b13      	ldr	r3, [pc, #76]	; (8001578 <HAL_RCC_GetSysClockFreq+0xb0>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	0c5b      	lsrs	r3, r3, #17
 8001530:	f003 0301 	and.w	r3, r3, #1
 8001534:	3328      	adds	r3, #40	; 0x28
 8001536:	443b      	add	r3, r7
 8001538:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800153c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	4a0e      	ldr	r2, [pc, #56]	; (800157c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001542:	fb03 f202 	mul.w	r2, r3, r2
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	fbb2 f3f3 	udiv	r3, r2, r3
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
 800154e:	e004      	b.n	800155a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	4a0b      	ldr	r2, [pc, #44]	; (8001580 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001554:	fb02 f303 	mul.w	r3, r2, r3
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155c:	623b      	str	r3, [r7, #32]
      break;
 800155e:	e002      	b.n	8001566 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001562:	623b      	str	r3, [r7, #32]
      break;
 8001564:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001566:	6a3b      	ldr	r3, [r7, #32]
}
 8001568:	4618      	mov	r0, r3
 800156a:	3728      	adds	r7, #40	; 0x28
 800156c:	46bd      	mov	sp, r7
 800156e:	bc90      	pop	{r4, r7}
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	08002dcc 	.word	0x08002dcc
 8001578:	40021000 	.word	0x40021000
 800157c:	007a1200 	.word	0x007a1200
 8001580:	003d0900 	.word	0x003d0900

08001584 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001588:	4b02      	ldr	r3, [pc, #8]	; (8001594 <HAL_RCC_GetHCLKFreq+0x10>)
 800158a:	681b      	ldr	r3, [r3, #0]
}
 800158c:	4618      	mov	r0, r3
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr
 8001594:	20000000 	.word	0x20000000

08001598 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800159c:	f7ff fff2 	bl	8001584 <HAL_RCC_GetHCLKFreq>
 80015a0:	4602      	mov	r2, r0
 80015a2:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	0adb      	lsrs	r3, r3, #11
 80015a8:	f003 0307 	and.w	r3, r3, #7
 80015ac:	4903      	ldr	r1, [pc, #12]	; (80015bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80015ae:	5ccb      	ldrb	r3, [r1, r3]
 80015b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40021000 	.word	0x40021000
 80015bc:	08002dfc 	.word	0x08002dfc

080015c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015c8:	4b0a      	ldr	r3, [pc, #40]	; (80015f4 <RCC_Delay+0x34>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a0a      	ldr	r2, [pc, #40]	; (80015f8 <RCC_Delay+0x38>)
 80015ce:	fba2 2303 	umull	r2, r3, r2, r3
 80015d2:	0a5b      	lsrs	r3, r3, #9
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	fb02 f303 	mul.w	r3, r2, r3
 80015da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80015dc:	bf00      	nop
  }
  while (Delay --);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	1e5a      	subs	r2, r3, #1
 80015e2:	60fa      	str	r2, [r7, #12]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1f9      	bne.n	80015dc <RCC_Delay+0x1c>
}
 80015e8:	bf00      	nop
 80015ea:	bf00      	nop
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr
 80015f4:	20000000 	.word	0x20000000
 80015f8:	10624dd3 	.word	0x10624dd3

080015fc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001604:	2300      	movs	r3, #0
 8001606:	613b      	str	r3, [r7, #16]
 8001608:	2300      	movs	r3, #0
 800160a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	2b00      	cmp	r3, #0
 8001616:	d07d      	beq.n	8001714 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001618:	2300      	movs	r3, #0
 800161a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800161c:	4b4f      	ldr	r3, [pc, #316]	; (800175c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800161e:	69db      	ldr	r3, [r3, #28]
 8001620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d10d      	bne.n	8001644 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001628:	4b4c      	ldr	r3, [pc, #304]	; (800175c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800162a:	69db      	ldr	r3, [r3, #28]
 800162c:	4a4b      	ldr	r2, [pc, #300]	; (800175c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800162e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001632:	61d3      	str	r3, [r2, #28]
 8001634:	4b49      	ldr	r3, [pc, #292]	; (800175c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001636:	69db      	ldr	r3, [r3, #28]
 8001638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163c:	60bb      	str	r3, [r7, #8]
 800163e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001640:	2301      	movs	r3, #1
 8001642:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001644:	4b46      	ldr	r3, [pc, #280]	; (8001760 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800164c:	2b00      	cmp	r3, #0
 800164e:	d118      	bne.n	8001682 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001650:	4b43      	ldr	r3, [pc, #268]	; (8001760 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a42      	ldr	r2, [pc, #264]	; (8001760 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001656:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800165a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800165c:	f7ff f8f0 	bl	8000840 <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001662:	e008      	b.n	8001676 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001664:	f7ff f8ec 	bl	8000840 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b64      	cmp	r3, #100	; 0x64
 8001670:	d901      	bls.n	8001676 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e06d      	b.n	8001752 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001676:	4b3a      	ldr	r3, [pc, #232]	; (8001760 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800167e:	2b00      	cmp	r3, #0
 8001680:	d0f0      	beq.n	8001664 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001682:	4b36      	ldr	r3, [pc, #216]	; (800175c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001684:	6a1b      	ldr	r3, [r3, #32]
 8001686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800168a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d02e      	beq.n	80016f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800169a:	68fa      	ldr	r2, [r7, #12]
 800169c:	429a      	cmp	r2, r3
 800169e:	d027      	beq.n	80016f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80016a0:	4b2e      	ldr	r3, [pc, #184]	; (800175c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80016a2:	6a1b      	ldr	r3, [r3, #32]
 80016a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016a8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80016aa:	4b2e      	ldr	r3, [pc, #184]	; (8001764 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80016ac:	2201      	movs	r2, #1
 80016ae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80016b0:	4b2c      	ldr	r3, [pc, #176]	; (8001764 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80016b6:	4a29      	ldr	r2, [pc, #164]	; (800175c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d014      	beq.n	80016f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c6:	f7ff f8bb 	bl	8000840 <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016cc:	e00a      	b.n	80016e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ce:	f7ff f8b7 	bl	8000840 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016dc:	4293      	cmp	r3, r2
 80016de:	d901      	bls.n	80016e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e036      	b.n	8001752 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e4:	4b1d      	ldr	r3, [pc, #116]	; (800175c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0ee      	beq.n	80016ce <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80016f0:	4b1a      	ldr	r3, [pc, #104]	; (800175c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80016f2:	6a1b      	ldr	r3, [r3, #32]
 80016f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	4917      	ldr	r1, [pc, #92]	; (800175c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001702:	7dfb      	ldrb	r3, [r7, #23]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d105      	bne.n	8001714 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001708:	4b14      	ldr	r3, [pc, #80]	; (800175c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800170a:	69db      	ldr	r3, [r3, #28]
 800170c:	4a13      	ldr	r2, [pc, #76]	; (800175c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800170e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001712:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d008      	beq.n	8001732 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001720:	4b0e      	ldr	r3, [pc, #56]	; (800175c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	490b      	ldr	r1, [pc, #44]	; (800175c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800172e:	4313      	orrs	r3, r2
 8001730:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0310 	and.w	r3, r3, #16
 800173a:	2b00      	cmp	r3, #0
 800173c:	d008      	beq.n	8001750 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800173e:	4b07      	ldr	r3, [pc, #28]	; (800175c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	4904      	ldr	r1, [pc, #16]	; (800175c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800174c:	4313      	orrs	r3, r2
 800174e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40021000 	.word	0x40021000
 8001760:	40007000 	.word	0x40007000
 8001764:	42420440 	.word	0x42420440

08001768 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001768:	b590      	push	{r4, r7, lr}
 800176a:	b08d      	sub	sp, #52	; 0x34
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001770:	4b58      	ldr	r3, [pc, #352]	; (80018d4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8001772:	f107 040c 	add.w	r4, r7, #12
 8001776:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001778:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800177c:	f240 2301 	movw	r3, #513	; 0x201
 8001780:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001782:	2300      	movs	r3, #0
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
 8001786:	2300      	movs	r3, #0
 8001788:	62fb      	str	r3, [r7, #44]	; 0x2c
 800178a:	2300      	movs	r3, #0
 800178c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800178e:	2300      	movs	r3, #0
 8001790:	61fb      	str	r3, [r7, #28]
 8001792:	2300      	movs	r3, #0
 8001794:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b10      	cmp	r3, #16
 800179a:	d00a      	beq.n	80017b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b10      	cmp	r3, #16
 80017a0:	f200 808e 	bhi.w	80018c0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d049      	beq.n	800183e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d079      	beq.n	80018a4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80017b0:	e086      	b.n	80018c0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 80017b2:	4b49      	ldr	r3, [pc, #292]	; (80018d8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80017b8:	4b47      	ldr	r3, [pc, #284]	; (80018d8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d07f      	beq.n	80018c4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	0c9b      	lsrs	r3, r3, #18
 80017c8:	f003 030f 	and.w	r3, r3, #15
 80017cc:	3330      	adds	r3, #48	; 0x30
 80017ce:	443b      	add	r3, r7
 80017d0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80017d4:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d017      	beq.n	8001810 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017e0:	4b3d      	ldr	r3, [pc, #244]	; (80018d8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	0c5b      	lsrs	r3, r3, #17
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	3330      	adds	r3, #48	; 0x30
 80017ec:	443b      	add	r3, r7
 80017ee:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80017f2:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d00d      	beq.n	800181a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80017fe:	4a37      	ldr	r2, [pc, #220]	; (80018dc <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001802:	fbb2 f2f3 	udiv	r2, r2, r3
 8001806:	6a3b      	ldr	r3, [r7, #32]
 8001808:	fb02 f303 	mul.w	r3, r2, r3
 800180c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800180e:	e004      	b.n	800181a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001810:	6a3b      	ldr	r3, [r7, #32]
 8001812:	4a33      	ldr	r2, [pc, #204]	; (80018e0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001814:	fb02 f303 	mul.w	r3, r2, r3
 8001818:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800181a:	4b2f      	ldr	r3, [pc, #188]	; (80018d8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001822:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001826:	d102      	bne.n	800182e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8001828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800182a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800182c:	e04a      	b.n	80018c4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 800182e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	4a2c      	ldr	r2, [pc, #176]	; (80018e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8001834:	fba2 2303 	umull	r2, r3, r2, r3
 8001838:	085b      	lsrs	r3, r3, #1
 800183a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800183c:	e042      	b.n	80018c4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 800183e:	4b26      	ldr	r3, [pc, #152]	; (80018d8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001840:	6a1b      	ldr	r3, [r3, #32]
 8001842:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800184a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800184e:	d108      	bne.n	8001862 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d003      	beq.n	8001862 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 800185a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800185e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001860:	e01f      	b.n	80018a2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800186c:	d109      	bne.n	8001882 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 800186e:	4b1a      	ldr	r3, [pc, #104]	; (80018d8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 800187a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800187e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001880:	e00f      	b.n	80018a2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001888:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800188c:	d11c      	bne.n	80018c8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800188e:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d016      	beq.n	80018c8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 800189a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800189e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80018a0:	e012      	b.n	80018c8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80018a2:	e011      	b.n	80018c8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80018a4:	f7ff fe78 	bl	8001598 <HAL_RCC_GetPCLK2Freq>
 80018a8:	4602      	mov	r2, r0
 80018aa:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	0b9b      	lsrs	r3, r3, #14
 80018b0:	f003 0303 	and.w	r3, r3, #3
 80018b4:	3301      	adds	r3, #1
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018bc:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80018be:	e004      	b.n	80018ca <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80018c0:	bf00      	nop
 80018c2:	e002      	b.n	80018ca <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80018c4:	bf00      	nop
 80018c6:	e000      	b.n	80018ca <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80018c8:	bf00      	nop
    }
  }
  return (frequency);
 80018ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3734      	adds	r7, #52	; 0x34
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd90      	pop	{r4, r7, pc}
 80018d4:	08002ddc 	.word	0x08002ddc
 80018d8:	40021000 	.word	0x40021000
 80018dc:	007a1200 	.word	0x007a1200
 80018e0:	003d0900 	.word	0x003d0900
 80018e4:	aaaaaaab 	.word	0xaaaaaaab

080018e8 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80018f0:	2300      	movs	r3, #0
 80018f2:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e084      	b.n	8001a08 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	7c5b      	ldrb	r3, [r3, #17]
 8001902:	b2db      	uxtb	r3, r3
 8001904:	2b00      	cmp	r3, #0
 8001906:	d105      	bne.n	8001914 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7fe fe7c 	bl	800060c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2202      	movs	r2, #2
 8001918:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f000 faf4 	bl	8001f08 <HAL_RTC_WaitForSynchro>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d004      	beq.n	8001930 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2204      	movs	r2, #4
 800192a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e06b      	b.n	8001a08 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f000 fbad 	bl	8002090 <RTC_EnterInitMode>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d004      	beq.n	8001946 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2204      	movs	r2, #4
 8001940:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e060      	b.n	8001a08 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f022 0207 	bic.w	r2, r2, #7
 8001954:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d005      	beq.n	800196a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800195e:	4b2c      	ldr	r3, [pc, #176]	; (8001a10 <HAL_RTC_Init+0x128>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a2b      	ldr	r2, [pc, #172]	; (8001a10 <HAL_RTC_Init+0x128>)
 8001964:	f023 0301 	bic.w	r3, r3, #1
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800196a:	4b29      	ldr	r3, [pc, #164]	; (8001a10 <HAL_RTC_Init+0x128>)
 800196c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196e:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	4926      	ldr	r1, [pc, #152]	; (8001a10 <HAL_RTC_Init+0x128>)
 8001978:	4313      	orrs	r3, r2
 800197a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001984:	d003      	beq.n	800198e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	e00e      	b.n	80019ac <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800198e:	2001      	movs	r0, #1
 8001990:	f7ff feea 	bl	8001768 <HAL_RCCEx_GetPeriphCLKFreq>
 8001994:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d104      	bne.n	80019a6 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2204      	movs	r2, #4
 80019a0:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e030      	b.n	8001a08 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	3b01      	subs	r3, #1
 80019aa:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f023 010f 	bic.w	r1, r3, #15
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	0c1a      	lsrs	r2, r3, #16
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	430a      	orrs	r2, r1
 80019c0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	0c1b      	lsrs	r3, r3, #16
 80019ca:	041b      	lsls	r3, r3, #16
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	b291      	uxth	r1, r2
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	6812      	ldr	r2, [r2, #0]
 80019d4:	430b      	orrs	r3, r1
 80019d6:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f000 fb81 	bl	80020e0 <RTC_ExitInitMode>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d004      	beq.n	80019ee <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2204      	movs	r2, #4
 80019e8:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e00c      	b.n	8001a08 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2201      	movs	r2, #1
 80019fe:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8001a06:	2300      	movs	r3, #0
  }
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40006c00 	.word	0x40006c00

08001a14 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001a14:	b590      	push	{r4, r7, lr}
 8001a16:	b087      	sub	sp, #28
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]
 8001a24:	2300      	movs	r3, #0
 8001a26:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d002      	beq.n	8001a34 <HAL_RTC_SetTime+0x20>
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d101      	bne.n	8001a38 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e080      	b.n	8001b3a <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	7c1b      	ldrb	r3, [r3, #16]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d101      	bne.n	8001a44 <HAL_RTC_SetTime+0x30>
 8001a40:	2302      	movs	r3, #2
 8001a42:	e07a      	b.n	8001b3a <HAL_RTC_SetTime+0x126>
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2201      	movs	r2, #1
 8001a48:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d113      	bne.n	8001a7e <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001a60:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	785b      	ldrb	r3, [r3, #1]
 8001a68:	4619      	mov	r1, r3
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	011b      	lsls	r3, r3, #4
 8001a6e:	1a5b      	subs	r3, r3, r1
 8001a70:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001a72:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8001a74:	68ba      	ldr	r2, [r7, #8]
 8001a76:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001a78:	4413      	add	r3, r2
 8001a7a:	617b      	str	r3, [r7, #20]
 8001a7c:	e01e      	b.n	8001abc <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f000 fb71 	bl	800216a <RTC_Bcd2ToByte>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001a90:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	785b      	ldrb	r3, [r3, #1]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f000 fb66 	bl	800216a <RTC_Bcd2ToByte>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	011b      	lsls	r3, r3, #4
 8001aa6:	1a9b      	subs	r3, r3, r2
 8001aa8:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001aaa:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	789b      	ldrb	r3, [r3, #2]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f000 fb5a 	bl	800216a <RTC_Bcd2ToByte>
 8001ab6:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001ab8:	4423      	add	r3, r4
 8001aba:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001abc:	6979      	ldr	r1, [r7, #20]
 8001abe:	68f8      	ldr	r0, [r7, #12]
 8001ac0:	f000 fa7f 	bl	8001fc2 <RTC_WriteTimeCounter>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d007      	beq.n	8001ada <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2204      	movs	r2, #4
 8001ace:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e02f      	b.n	8001b3a <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f022 0205 	bic.w	r2, r2, #5
 8001ae8:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	f000 fa90 	bl	8002010 <RTC_ReadAlarmCounter>
 8001af0:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af8:	d018      	beq.n	8001b2c <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d214      	bcs.n	8001b2c <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001b08:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001b0c:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001b0e:	6939      	ldr	r1, [r7, #16]
 8001b10:	68f8      	ldr	r0, [r7, #12]
 8001b12:	f000 fa96 	bl	8002042 <RTC_WriteAlarmCounter>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d007      	beq.n	8001b2c <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2204      	movs	r2, #4
 8001b20:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2200      	movs	r2, #0
 8001b26:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e006      	b.n	8001b3a <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2200      	movs	r2, #0
 8001b36:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8001b38:	2300      	movs	r3, #0
  }
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	371c      	adds	r7, #28
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd90      	pop	{r4, r7, pc}
	...

08001b44 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b088      	sub	sp, #32
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8001b50:	2300      	movs	r3, #0
 8001b52:	61bb      	str	r3, [r7, #24]
 8001b54:	2300      	movs	r3, #0
 8001b56:	61fb      	str	r3, [r7, #28]
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d002      	beq.n	8001b6c <HAL_RTC_GetTime+0x28>
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d101      	bne.n	8001b70 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e0b5      	b.n	8001cdc <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f003 0304 	and.w	r3, r3, #4
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e0ac      	b.n	8001cdc <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8001b82:	68f8      	ldr	r0, [r7, #12]
 8001b84:	f000 f9ed 	bl	8001f62 <RTC_ReadTimeCounter>
 8001b88:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	4a55      	ldr	r2, [pc, #340]	; (8001ce4 <HAL_RTC_GetTime+0x1a0>)
 8001b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b92:	0adb      	lsrs	r3, r3, #11
 8001b94:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4b52      	ldr	r3, [pc, #328]	; (8001ce4 <HAL_RTC_GetTime+0x1a0>)
 8001b9a:	fba3 1302 	umull	r1, r3, r3, r2
 8001b9e:	0adb      	lsrs	r3, r3, #11
 8001ba0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8001ba4:	fb01 f303 	mul.w	r3, r1, r3
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	4a4f      	ldr	r2, [pc, #316]	; (8001ce8 <HAL_RTC_GetTime+0x1a4>)
 8001bac:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb0:	095b      	lsrs	r3, r3, #5
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	4a4a      	ldr	r2, [pc, #296]	; (8001ce4 <HAL_RTC_GetTime+0x1a0>)
 8001bbc:	fba2 1203 	umull	r1, r2, r2, r3
 8001bc0:	0ad2      	lsrs	r2, r2, #11
 8001bc2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8001bc6:	fb01 f202 	mul.w	r2, r1, r2
 8001bca:	1a9a      	subs	r2, r3, r2
 8001bcc:	4b46      	ldr	r3, [pc, #280]	; (8001ce8 <HAL_RTC_GetTime+0x1a4>)
 8001bce:	fba3 1302 	umull	r1, r3, r3, r2
 8001bd2:	0959      	lsrs	r1, r3, #5
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	011b      	lsls	r3, r3, #4
 8001bd8:	1a5b      	subs	r3, r3, r1
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	1ad1      	subs	r1, r2, r3
 8001bde:	b2ca      	uxtb	r2, r1
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	2b17      	cmp	r3, #23
 8001be8:	d955      	bls.n	8001c96 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	4a3f      	ldr	r2, [pc, #252]	; (8001cec <HAL_RTC_GetTime+0x1a8>)
 8001bee:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf2:	091b      	lsrs	r3, r3, #4
 8001bf4:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8001bf6:	6939      	ldr	r1, [r7, #16]
 8001bf8:	4b3c      	ldr	r3, [pc, #240]	; (8001cec <HAL_RTC_GetTime+0x1a8>)
 8001bfa:	fba3 2301 	umull	r2, r3, r3, r1
 8001bfe:	091a      	lsrs	r2, r3, #4
 8001c00:	4613      	mov	r3, r2
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	4413      	add	r3, r2
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	1aca      	subs	r2, r1, r3
 8001c0a:	b2d2      	uxtb	r2, r2
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001c10:	68f8      	ldr	r0, [r7, #12]
 8001c12:	f000 f9fd 	bl	8002010 <RTC_ReadAlarmCounter>
 8001c16:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c1e:	d008      	beq.n	8001c32 <HAL_RTC_GetTime+0xee>
 8001c20:	69fa      	ldr	r2, [r7, #28]
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d904      	bls.n	8001c32 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8001c28:	69fa      	ldr	r2, [r7, #28]
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	61fb      	str	r3, [r7, #28]
 8001c30:	e002      	b.n	8001c38 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8001c32:	f04f 33ff 	mov.w	r3, #4294967295
 8001c36:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	4a2d      	ldr	r2, [pc, #180]	; (8001cf0 <HAL_RTC_GetTime+0x1ac>)
 8001c3c:	fb02 f303 	mul.w	r3, r2, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001c46:	69b9      	ldr	r1, [r7, #24]
 8001c48:	68f8      	ldr	r0, [r7, #12]
 8001c4a:	f000 f9ba 	bl	8001fc2 <RTC_WriteTimeCounter>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e041      	b.n	8001cdc <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c5e:	d00c      	beq.n	8001c7a <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8001c60:	69fa      	ldr	r2, [r7, #28]
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	4413      	add	r3, r2
 8001c66:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001c68:	69f9      	ldr	r1, [r7, #28]
 8001c6a:	68f8      	ldr	r0, [r7, #12]
 8001c6c:	f000 f9e9 	bl	8002042 <RTC_WriteAlarmCounter>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d00a      	beq.n	8001c8c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e030      	b.n	8001cdc <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001c7a:	69f9      	ldr	r1, [r7, #28]
 8001c7c:	68f8      	ldr	r0, [r7, #12]
 8001c7e:	f000 f9e0 	bl	8002042 <RTC_WriteAlarmCounter>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e027      	b.n	8001cdc <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8001c8c:	6979      	ldr	r1, [r7, #20]
 8001c8e:	68f8      	ldr	r0, [r7, #12]
 8001c90:	f000 fa88 	bl	80021a4 <RTC_DateUpdate>
 8001c94:	e003      	b.n	8001c9e <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	b2da      	uxtb	r2, r3
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d01a      	beq.n	8001cda <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f000 fa41 	bl	8002130 <RTC_ByteToBcd2>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	785b      	ldrb	r3, [r3, #1]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f000 fa38 	bl	8002130 <RTC_ByteToBcd2>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	789b      	ldrb	r3, [r3, #2]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f000 fa2f 	bl	8002130 <RTC_ByteToBcd2>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3720      	adds	r7, #32
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	91a2b3c5 	.word	0x91a2b3c5
 8001ce8:	88888889 	.word	0x88888889
 8001cec:	aaaaaaab 	.word	0xaaaaaaab
 8001cf0:	00015180 	.word	0x00015180

08001cf4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b088      	sub	sp, #32
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8001d00:	2300      	movs	r3, #0
 8001d02:	61fb      	str	r3, [r7, #28]
 8001d04:	2300      	movs	r3, #0
 8001d06:	61bb      	str	r3, [r7, #24]
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d002      	beq.n	8001d18 <HAL_RTC_SetDate+0x24>
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d101      	bne.n	8001d1c <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e097      	b.n	8001e4c <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	7c1b      	ldrb	r3, [r3, #16]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d101      	bne.n	8001d28 <HAL_RTC_SetDate+0x34>
 8001d24:	2302      	movs	r3, #2
 8001d26:	e091      	b.n	8001e4c <HAL_RTC_SetDate+0x158>
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2202      	movs	r2, #2
 8001d32:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d10c      	bne.n	8001d54 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	78da      	ldrb	r2, [r3, #3]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	785a      	ldrb	r2, [r3, #1]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	789a      	ldrb	r2, [r3, #2]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	739a      	strb	r2, [r3, #14]
 8001d52:	e01a      	b.n	8001d8a <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	78db      	ldrb	r3, [r3, #3]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f000 fa06 	bl	800216a <RTC_Bcd2ToByte>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	461a      	mov	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	785b      	ldrb	r3, [r3, #1]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f000 f9fd 	bl	800216a <RTC_Bcd2ToByte>
 8001d70:	4603      	mov	r3, r0
 8001d72:	461a      	mov	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	789b      	ldrb	r3, [r3, #2]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f000 f9f4 	bl	800216a <RTC_Bcd2ToByte>
 8001d82:	4603      	mov	r3, r0
 8001d84:	461a      	mov	r2, r3
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	7bdb      	ldrb	r3, [r3, #15]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	7b59      	ldrb	r1, [r3, #13]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	7b9b      	ldrb	r3, [r3, #14]
 8001d98:	461a      	mov	r2, r3
 8001d9a:	f000 fadf 	bl	800235c <RTC_WeekDayNum>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	461a      	mov	r2, r3
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	7b1a      	ldrb	r2, [r3, #12]
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8001dae:	68f8      	ldr	r0, [r7, #12]
 8001db0:	f000 f8d7 	bl	8001f62 <RTC_ReadTimeCounter>
 8001db4:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	4a26      	ldr	r2, [pc, #152]	; (8001e54 <HAL_RTC_SetDate+0x160>)
 8001dba:	fba2 2303 	umull	r2, r3, r2, r3
 8001dbe:	0adb      	lsrs	r3, r3, #11
 8001dc0:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	2b18      	cmp	r3, #24
 8001dc6:	d93a      	bls.n	8001e3e <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	4a23      	ldr	r2, [pc, #140]	; (8001e58 <HAL_RTC_SetDate+0x164>)
 8001dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd0:	091b      	lsrs	r3, r3, #4
 8001dd2:	4a22      	ldr	r2, [pc, #136]	; (8001e5c <HAL_RTC_SetDate+0x168>)
 8001dd4:	fb02 f303 	mul.w	r3, r2, r3
 8001dd8:	69fa      	ldr	r2, [r7, #28]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001dde:	69f9      	ldr	r1, [r7, #28]
 8001de0:	68f8      	ldr	r0, [r7, #12]
 8001de2:	f000 f8ee 	bl	8001fc2 <RTC_WriteTimeCounter>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d007      	beq.n	8001dfc <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2204      	movs	r2, #4
 8001df0:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2200      	movs	r2, #0
 8001df6:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e027      	b.n	8001e4c <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001dfc:	68f8      	ldr	r0, [r7, #12]
 8001dfe:	f000 f907 	bl	8002010 <RTC_ReadAlarmCounter>
 8001e02:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e0a:	d018      	beq.n	8001e3e <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d214      	bcs.n	8001e3e <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001e1a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001e1e:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001e20:	69b9      	ldr	r1, [r7, #24]
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	f000 f90d 	bl	8002042 <RTC_WriteAlarmCounter>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d007      	beq.n	8001e3e <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2204      	movs	r2, #4
 8001e32:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2200      	movs	r2, #0
 8001e38:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e006      	b.n	8001e4c <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2201      	movs	r2, #1
 8001e42:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2200      	movs	r2, #0
 8001e48:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3720      	adds	r7, #32
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	91a2b3c5 	.word	0x91a2b3c5
 8001e58:	aaaaaaab 	.word	0xaaaaaaab
 8001e5c:	00015180 	.word	0x00015180

08001e60 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	2100      	movs	r1, #0
 8001e72:	460a      	mov	r2, r1
 8001e74:	801a      	strh	r2, [r3, #0]
 8001e76:	460a      	mov	r2, r1
 8001e78:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d002      	beq.n	8001e86 <HAL_RTC_GetDate+0x26>
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e03a      	b.n	8001f00 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8001e8a:	f107 0314 	add.w	r3, r7, #20
 8001e8e:	2200      	movs	r2, #0
 8001e90:	4619      	mov	r1, r3
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	f7ff fe56 	bl	8001b44 <HAL_RTC_GetTime>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e02e      	b.n	8001f00 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	7b1a      	ldrb	r2, [r3, #12]
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	7bda      	ldrb	r2, [r3, #15]
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	7b5a      	ldrb	r2, [r3, #13]
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	7b9a      	ldrb	r2, [r3, #14]
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d01a      	beq.n	8001efe <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	78db      	ldrb	r3, [r3, #3]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f000 f92f 	bl	8002130 <RTC_ByteToBcd2>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	785b      	ldrb	r3, [r3, #1]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f000 f926 	bl	8002130 <RTC_ByteToBcd2>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	789b      	ldrb	r3, [r3, #2]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f000 f91d 	bl	8002130 <RTC_ByteToBcd2>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	461a      	mov	r2, r3
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3718      	adds	r7, #24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f10:	2300      	movs	r3, #0
 8001f12:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e01d      	b.n	8001f5a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 0208 	bic.w	r2, r2, #8
 8001f2c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8001f2e:	f7fe fc87 	bl	8000840 <HAL_GetTick>
 8001f32:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001f34:	e009      	b.n	8001f4a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001f36:	f7fe fc83 	bl	8000840 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f44:	d901      	bls.n	8001f4a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e007      	b.n	8001f5a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f003 0308 	and.w	r3, r3, #8
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d0ee      	beq.n	8001f36 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8001f62:	b480      	push	{r7}
 8001f64:	b087      	sub	sp, #28
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	827b      	strh	r3, [r7, #18]
 8001f6e:	2300      	movs	r3, #0
 8001f70:	823b      	strh	r3, [r7, #16]
 8001f72:	2300      	movs	r3, #0
 8001f74:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	69db      	ldr	r3, [r3, #28]
 8001f88:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8001f92:	8a7a      	ldrh	r2, [r7, #18]
 8001f94:	8a3b      	ldrh	r3, [r7, #16]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d008      	beq.n	8001fac <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8001f9a:	8a3b      	ldrh	r3, [r7, #16]
 8001f9c:	041a      	lsls	r2, r3, #16
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	69db      	ldr	r3, [r3, #28]
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	617b      	str	r3, [r7, #20]
 8001faa:	e004      	b.n	8001fb6 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8001fac:	8a7b      	ldrh	r3, [r7, #18]
 8001fae:	041a      	lsls	r2, r3, #16
 8001fb0:	89fb      	ldrh	r3, [r7, #14]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8001fb6:	697b      	ldr	r3, [r7, #20]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	371c      	adds	r7, #28
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr

08001fc2 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b084      	sub	sp, #16
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
 8001fca:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 f85d 	bl	8002090 <RTC_EnterInitMode>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d002      	beq.n	8001fe2 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	73fb      	strb	r3, [r7, #15]
 8001fe0:	e011      	b.n	8002006 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	683a      	ldr	r2, [r7, #0]
 8001fe8:	0c12      	lsrs	r2, r2, #16
 8001fea:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	b292      	uxth	r2, r2
 8001ff4:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 f872 	bl	80020e0 <RTC_ExitInitMode>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002006:	7bfb      	ldrb	r3, [r7, #15]
}
 8002008:	4618      	mov	r0, r3
 800200a:	3710      	adds	r7, #16
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8002018:	2300      	movs	r3, #0
 800201a:	81fb      	strh	r3, [r7, #14]
 800201c:	2300      	movs	r3, #0
 800201e:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6a1b      	ldr	r3, [r3, #32]
 8002026:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202e:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8002030:	89fb      	ldrh	r3, [r7, #14]
 8002032:	041a      	lsls	r2, r3, #16
 8002034:	89bb      	ldrh	r3, [r7, #12]
 8002036:	4313      	orrs	r3, r2
}
 8002038:	4618      	mov	r0, r3
 800203a:	3714      	adds	r7, #20
 800203c:	46bd      	mov	sp, r7
 800203e:	bc80      	pop	{r7}
 8002040:	4770      	bx	lr

08002042 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b084      	sub	sp, #16
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
 800204a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800204c:	2300      	movs	r3, #0
 800204e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f000 f81d 	bl	8002090 <RTC_EnterInitMode>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d002      	beq.n	8002062 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	73fb      	strb	r3, [r7, #15]
 8002060:	e011      	b.n	8002086 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	0c12      	lsrs	r2, r2, #16
 800206a:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	b292      	uxth	r2, r2
 8002074:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f832 	bl	80020e0 <RTC_ExitInitMode>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002086:	7bfb      	ldrb	r3, [r7, #15]
}
 8002088:	4618      	mov	r0, r3
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002098:	2300      	movs	r3, #0
 800209a:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800209c:	f7fe fbd0 	bl	8000840 <HAL_GetTick>
 80020a0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80020a2:	e009      	b.n	80020b8 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80020a4:	f7fe fbcc 	bl	8000840 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020b2:	d901      	bls.n	80020b8 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e00f      	b.n	80020d8 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f003 0320 	and.w	r3, r3, #32
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0ee      	beq.n	80020a4 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	685a      	ldr	r2, [r3, #4]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f042 0210 	orr.w	r2, r2, #16
 80020d4:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020e8:	2300      	movs	r3, #0
 80020ea:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 0210 	bic.w	r2, r2, #16
 80020fa:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80020fc:	f7fe fba0 	bl	8000840 <HAL_GetTick>
 8002100:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002102:	e009      	b.n	8002118 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002104:	f7fe fb9c 	bl	8000840 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002112:	d901      	bls.n	8002118 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e007      	b.n	8002128 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f003 0320 	and.w	r3, r3, #32
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0ee      	beq.n	8002104 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	3710      	adds	r7, #16
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800213a:	2300      	movs	r3, #0
 800213c:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800213e:	e005      	b.n	800214c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	3301      	adds	r3, #1
 8002144:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002146:	79fb      	ldrb	r3, [r7, #7]
 8002148:	3b0a      	subs	r3, #10
 800214a:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 800214c:	79fb      	ldrb	r3, [r7, #7]
 800214e:	2b09      	cmp	r3, #9
 8002150:	d8f6      	bhi.n	8002140 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	b2db      	uxtb	r3, r3
 8002156:	011b      	lsls	r3, r3, #4
 8002158:	b2da      	uxtb	r2, r3
 800215a:	79fb      	ldrb	r3, [r7, #7]
 800215c:	4313      	orrs	r3, r2
 800215e:	b2db      	uxtb	r3, r3
}
 8002160:	4618      	mov	r0, r3
 8002162:	3714      	adds	r7, #20
 8002164:	46bd      	mov	sp, r7
 8002166:	bc80      	pop	{r7}
 8002168:	4770      	bx	lr

0800216a <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800216a:	b480      	push	{r7}
 800216c:	b085      	sub	sp, #20
 800216e:	af00      	add	r7, sp, #0
 8002170:	4603      	mov	r3, r0
 8002172:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8002174:	2300      	movs	r3, #0
 8002176:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8002178:	79fb      	ldrb	r3, [r7, #7]
 800217a:	091b      	lsrs	r3, r3, #4
 800217c:	b2db      	uxtb	r3, r3
 800217e:	461a      	mov	r2, r3
 8002180:	4613      	mov	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4413      	add	r3, r2
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800218a:	79fb      	ldrb	r3, [r7, #7]
 800218c:	f003 030f 	and.w	r3, r3, #15
 8002190:	b2da      	uxtb	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	b2db      	uxtb	r3, r3
 8002196:	4413      	add	r3, r2
 8002198:	b2db      	uxtb	r3, r3
}
 800219a:	4618      	mov	r0, r3
 800219c:	3714      	adds	r7, #20
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr

080021a4 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	617b      	str	r3, [r7, #20]
 80021b2:	2300      	movs	r3, #0
 80021b4:	613b      	str	r3, [r7, #16]
 80021b6:	2300      	movs	r3, #0
 80021b8:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 80021ba:	2300      	movs	r3, #0
 80021bc:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	7bdb      	ldrb	r3, [r3, #15]
 80021c2:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	7b5b      	ldrb	r3, [r3, #13]
 80021c8:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	7b9b      	ldrb	r3, [r3, #14]
 80021ce:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80021d0:	2300      	movs	r3, #0
 80021d2:	60bb      	str	r3, [r7, #8]
 80021d4:	e06f      	b.n	80022b6 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d011      	beq.n	8002200 <RTC_DateUpdate+0x5c>
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	2b03      	cmp	r3, #3
 80021e0:	d00e      	beq.n	8002200 <RTC_DateUpdate+0x5c>
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	2b05      	cmp	r3, #5
 80021e6:	d00b      	beq.n	8002200 <RTC_DateUpdate+0x5c>
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	2b07      	cmp	r3, #7
 80021ec:	d008      	beq.n	8002200 <RTC_DateUpdate+0x5c>
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	2b08      	cmp	r3, #8
 80021f2:	d005      	beq.n	8002200 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	2b0a      	cmp	r3, #10
 80021f8:	d002      	beq.n	8002200 <RTC_DateUpdate+0x5c>
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	2b0c      	cmp	r3, #12
 80021fe:	d117      	bne.n	8002230 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2b1e      	cmp	r3, #30
 8002204:	d803      	bhi.n	800220e <RTC_DateUpdate+0x6a>
      {
        day++;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	3301      	adds	r3, #1
 800220a:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800220c:	e050      	b.n	80022b0 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	2b0c      	cmp	r3, #12
 8002212:	d005      	beq.n	8002220 <RTC_DateUpdate+0x7c>
        {
          month++;
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	3301      	adds	r3, #1
 8002218:	613b      	str	r3, [r7, #16]
          day = 1U;
 800221a:	2301      	movs	r3, #1
 800221c:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800221e:	e047      	b.n	80022b0 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8002220:	2301      	movs	r3, #1
 8002222:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002224:	2301      	movs	r3, #1
 8002226:	60fb      	str	r3, [r7, #12]
          year++;
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	3301      	adds	r3, #1
 800222c:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 800222e:	e03f      	b.n	80022b0 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	2b04      	cmp	r3, #4
 8002234:	d008      	beq.n	8002248 <RTC_DateUpdate+0xa4>
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	2b06      	cmp	r3, #6
 800223a:	d005      	beq.n	8002248 <RTC_DateUpdate+0xa4>
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	2b09      	cmp	r3, #9
 8002240:	d002      	beq.n	8002248 <RTC_DateUpdate+0xa4>
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	2b0b      	cmp	r3, #11
 8002246:	d10c      	bne.n	8002262 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2b1d      	cmp	r3, #29
 800224c:	d803      	bhi.n	8002256 <RTC_DateUpdate+0xb2>
      {
        day++;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	3301      	adds	r3, #1
 8002252:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8002254:	e02c      	b.n	80022b0 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	3301      	adds	r3, #1
 800225a:	613b      	str	r3, [r7, #16]
        day = 1U;
 800225c:	2301      	movs	r3, #1
 800225e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8002260:	e026      	b.n	80022b0 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	2b02      	cmp	r3, #2
 8002266:	d123      	bne.n	80022b0 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2b1b      	cmp	r3, #27
 800226c:	d803      	bhi.n	8002276 <RTC_DateUpdate+0xd2>
      {
        day++;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	3301      	adds	r3, #1
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	e01c      	b.n	80022b0 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2b1c      	cmp	r3, #28
 800227a:	d111      	bne.n	80022a0 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	b29b      	uxth	r3, r3
 8002280:	4618      	mov	r0, r3
 8002282:	f000 f839 	bl	80022f8 <RTC_IsLeapYear>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d003      	beq.n	8002294 <RTC_DateUpdate+0xf0>
        {
          day++;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	3301      	adds	r3, #1
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	e00d      	b.n	80022b0 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	3301      	adds	r3, #1
 8002298:	613b      	str	r3, [r7, #16]
          day = 1U;
 800229a:	2301      	movs	r3, #1
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	e007      	b.n	80022b0 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2b1d      	cmp	r3, #29
 80022a4:	d104      	bne.n	80022b0 <RTC_DateUpdate+0x10c>
      {
        month++;
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	3301      	adds	r3, #1
 80022aa:	613b      	str	r3, [r7, #16]
        day = 1U;
 80022ac:	2301      	movs	r3, #1
 80022ae:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	3301      	adds	r3, #1
 80022b4:	60bb      	str	r3, [r7, #8]
 80022b6:	68ba      	ldr	r2, [r7, #8]
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d38b      	bcc.n	80021d6 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	b2d2      	uxtb	r2, r2
 80022de:	4619      	mov	r1, r3
 80022e0:	6978      	ldr	r0, [r7, #20]
 80022e2:	f000 f83b 	bl	800235c <RTC_WeekDayNum>
 80022e6:	4603      	mov	r3, r0
 80022e8:	461a      	mov	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	731a      	strb	r2, [r3, #12]
}
 80022ee:	bf00      	nop
 80022f0:	3718      	adds	r7, #24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
	...

080022f8 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	4603      	mov	r3, r0
 8002300:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8002302:	88fb      	ldrh	r3, [r7, #6]
 8002304:	f003 0303 	and.w	r3, r3, #3
 8002308:	b29b      	uxth	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 800230e:	2300      	movs	r3, #0
 8002310:	e01d      	b.n	800234e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8002312:	88fb      	ldrh	r3, [r7, #6]
 8002314:	4a10      	ldr	r2, [pc, #64]	; (8002358 <RTC_IsLeapYear+0x60>)
 8002316:	fba2 1203 	umull	r1, r2, r2, r3
 800231a:	0952      	lsrs	r2, r2, #5
 800231c:	2164      	movs	r1, #100	; 0x64
 800231e:	fb01 f202 	mul.w	r2, r1, r2
 8002322:	1a9b      	subs	r3, r3, r2
 8002324:	b29b      	uxth	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <RTC_IsLeapYear+0x36>
  {
    return 1U;
 800232a:	2301      	movs	r3, #1
 800232c:	e00f      	b.n	800234e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 800232e:	88fb      	ldrh	r3, [r7, #6]
 8002330:	4a09      	ldr	r2, [pc, #36]	; (8002358 <RTC_IsLeapYear+0x60>)
 8002332:	fba2 1203 	umull	r1, r2, r2, r3
 8002336:	09d2      	lsrs	r2, r2, #7
 8002338:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800233c:	fb01 f202 	mul.w	r2, r1, r2
 8002340:	1a9b      	subs	r3, r3, r2
 8002342:	b29b      	uxth	r3, r3
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8002348:	2301      	movs	r3, #1
 800234a:	e000      	b.n	800234e <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 800234c:	2300      	movs	r3, #0
  }
}
 800234e:	4618      	mov	r0, r3
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr
 8002358:	51eb851f 	.word	0x51eb851f

0800235c <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	460b      	mov	r3, r1
 8002366:	70fb      	strb	r3, [r7, #3]
 8002368:	4613      	mov	r3, r2
 800236a:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 800236c:	2300      	movs	r3, #0
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	2300      	movs	r3, #0
 8002372:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800237a:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 800237c:	78fb      	ldrb	r3, [r7, #3]
 800237e:	2b02      	cmp	r3, #2
 8002380:	d82d      	bhi.n	80023de <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8002382:	78fa      	ldrb	r2, [r7, #3]
 8002384:	4613      	mov	r3, r2
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	4413      	add	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	1a9b      	subs	r3, r3, r2
 800238e:	4a2c      	ldr	r2, [pc, #176]	; (8002440 <RTC_WeekDayNum+0xe4>)
 8002390:	fba2 2303 	umull	r2, r3, r2, r3
 8002394:	085a      	lsrs	r2, r3, #1
 8002396:	78bb      	ldrb	r3, [r7, #2]
 8002398:	441a      	add	r2, r3
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	441a      	add	r2, r3
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	3b01      	subs	r3, #1
 80023a2:	089b      	lsrs	r3, r3, #2
 80023a4:	441a      	add	r2, r3
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	3b01      	subs	r3, #1
 80023aa:	4926      	ldr	r1, [pc, #152]	; (8002444 <RTC_WeekDayNum+0xe8>)
 80023ac:	fba1 1303 	umull	r1, r3, r1, r3
 80023b0:	095b      	lsrs	r3, r3, #5
 80023b2:	1ad2      	subs	r2, r2, r3
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	3b01      	subs	r3, #1
 80023b8:	4922      	ldr	r1, [pc, #136]	; (8002444 <RTC_WeekDayNum+0xe8>)
 80023ba:	fba1 1303 	umull	r1, r3, r1, r3
 80023be:	09db      	lsrs	r3, r3, #7
 80023c0:	4413      	add	r3, r2
 80023c2:	1d1a      	adds	r2, r3, #4
 80023c4:	4b20      	ldr	r3, [pc, #128]	; (8002448 <RTC_WeekDayNum+0xec>)
 80023c6:	fba3 1302 	umull	r1, r3, r3, r2
 80023ca:	1ad1      	subs	r1, r2, r3
 80023cc:	0849      	lsrs	r1, r1, #1
 80023ce:	440b      	add	r3, r1
 80023d0:	0899      	lsrs	r1, r3, #2
 80023d2:	460b      	mov	r3, r1
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	1a5b      	subs	r3, r3, r1
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	e029      	b.n	8002432 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80023de:	78fa      	ldrb	r2, [r7, #3]
 80023e0:	4613      	mov	r3, r2
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	4413      	add	r3, r2
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	1a9b      	subs	r3, r3, r2
 80023ea:	4a15      	ldr	r2, [pc, #84]	; (8002440 <RTC_WeekDayNum+0xe4>)
 80023ec:	fba2 2303 	umull	r2, r3, r2, r3
 80023f0:	085a      	lsrs	r2, r3, #1
 80023f2:	78bb      	ldrb	r3, [r7, #2]
 80023f4:	441a      	add	r2, r3
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	441a      	add	r2, r3
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	089b      	lsrs	r3, r3, #2
 80023fe:	441a      	add	r2, r3
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	4910      	ldr	r1, [pc, #64]	; (8002444 <RTC_WeekDayNum+0xe8>)
 8002404:	fba1 1303 	umull	r1, r3, r1, r3
 8002408:	095b      	lsrs	r3, r3, #5
 800240a:	1ad2      	subs	r2, r2, r3
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	490d      	ldr	r1, [pc, #52]	; (8002444 <RTC_WeekDayNum+0xe8>)
 8002410:	fba1 1303 	umull	r1, r3, r1, r3
 8002414:	09db      	lsrs	r3, r3, #7
 8002416:	4413      	add	r3, r2
 8002418:	1c9a      	adds	r2, r3, #2
 800241a:	4b0b      	ldr	r3, [pc, #44]	; (8002448 <RTC_WeekDayNum+0xec>)
 800241c:	fba3 1302 	umull	r1, r3, r3, r2
 8002420:	1ad1      	subs	r1, r2, r3
 8002422:	0849      	lsrs	r1, r1, #1
 8002424:	440b      	add	r3, r1
 8002426:	0899      	lsrs	r1, r3, #2
 8002428:	460b      	mov	r3, r1
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	1a5b      	subs	r3, r3, r1
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	b2db      	uxtb	r3, r3
}
 8002436:	4618      	mov	r0, r3
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr
 8002440:	38e38e39 	.word	0x38e38e39
 8002444:	51eb851f 	.word	0x51eb851f
 8002448:	24924925 	.word	0x24924925

0800244c <__errno>:
 800244c:	4b01      	ldr	r3, [pc, #4]	; (8002454 <__errno+0x8>)
 800244e:	6818      	ldr	r0, [r3, #0]
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	2000000c 	.word	0x2000000c

08002458 <__libc_init_array>:
 8002458:	b570      	push	{r4, r5, r6, lr}
 800245a:	2600      	movs	r6, #0
 800245c:	4d0c      	ldr	r5, [pc, #48]	; (8002490 <__libc_init_array+0x38>)
 800245e:	4c0d      	ldr	r4, [pc, #52]	; (8002494 <__libc_init_array+0x3c>)
 8002460:	1b64      	subs	r4, r4, r5
 8002462:	10a4      	asrs	r4, r4, #2
 8002464:	42a6      	cmp	r6, r4
 8002466:	d109      	bne.n	800247c <__libc_init_array+0x24>
 8002468:	f000 fc9c 	bl	8002da4 <_init>
 800246c:	2600      	movs	r6, #0
 800246e:	4d0a      	ldr	r5, [pc, #40]	; (8002498 <__libc_init_array+0x40>)
 8002470:	4c0a      	ldr	r4, [pc, #40]	; (800249c <__libc_init_array+0x44>)
 8002472:	1b64      	subs	r4, r4, r5
 8002474:	10a4      	asrs	r4, r4, #2
 8002476:	42a6      	cmp	r6, r4
 8002478:	d105      	bne.n	8002486 <__libc_init_array+0x2e>
 800247a:	bd70      	pop	{r4, r5, r6, pc}
 800247c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002480:	4798      	blx	r3
 8002482:	3601      	adds	r6, #1
 8002484:	e7ee      	b.n	8002464 <__libc_init_array+0xc>
 8002486:	f855 3b04 	ldr.w	r3, [r5], #4
 800248a:	4798      	blx	r3
 800248c:	3601      	adds	r6, #1
 800248e:	e7f2      	b.n	8002476 <__libc_init_array+0x1e>
 8002490:	08002e38 	.word	0x08002e38
 8002494:	08002e38 	.word	0x08002e38
 8002498:	08002e38 	.word	0x08002e38
 800249c:	08002e3c 	.word	0x08002e3c

080024a0 <memset>:
 80024a0:	4603      	mov	r3, r0
 80024a2:	4402      	add	r2, r0
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d100      	bne.n	80024aa <memset+0xa>
 80024a8:	4770      	bx	lr
 80024aa:	f803 1b01 	strb.w	r1, [r3], #1
 80024ae:	e7f9      	b.n	80024a4 <memset+0x4>

080024b0 <siprintf>:
 80024b0:	b40e      	push	{r1, r2, r3}
 80024b2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80024b6:	b500      	push	{lr}
 80024b8:	b09c      	sub	sp, #112	; 0x70
 80024ba:	ab1d      	add	r3, sp, #116	; 0x74
 80024bc:	9002      	str	r0, [sp, #8]
 80024be:	9006      	str	r0, [sp, #24]
 80024c0:	9107      	str	r1, [sp, #28]
 80024c2:	9104      	str	r1, [sp, #16]
 80024c4:	4808      	ldr	r0, [pc, #32]	; (80024e8 <siprintf+0x38>)
 80024c6:	4909      	ldr	r1, [pc, #36]	; (80024ec <siprintf+0x3c>)
 80024c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80024cc:	9105      	str	r1, [sp, #20]
 80024ce:	6800      	ldr	r0, [r0, #0]
 80024d0:	a902      	add	r1, sp, #8
 80024d2:	9301      	str	r3, [sp, #4]
 80024d4:	f000 f868 	bl	80025a8 <_svfiprintf_r>
 80024d8:	2200      	movs	r2, #0
 80024da:	9b02      	ldr	r3, [sp, #8]
 80024dc:	701a      	strb	r2, [r3, #0]
 80024de:	b01c      	add	sp, #112	; 0x70
 80024e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80024e4:	b003      	add	sp, #12
 80024e6:	4770      	bx	lr
 80024e8:	2000000c 	.word	0x2000000c
 80024ec:	ffff0208 	.word	0xffff0208

080024f0 <__ssputs_r>:
 80024f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024f4:	688e      	ldr	r6, [r1, #8]
 80024f6:	4682      	mov	sl, r0
 80024f8:	429e      	cmp	r6, r3
 80024fa:	460c      	mov	r4, r1
 80024fc:	4690      	mov	r8, r2
 80024fe:	461f      	mov	r7, r3
 8002500:	d838      	bhi.n	8002574 <__ssputs_r+0x84>
 8002502:	898a      	ldrh	r2, [r1, #12]
 8002504:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002508:	d032      	beq.n	8002570 <__ssputs_r+0x80>
 800250a:	6825      	ldr	r5, [r4, #0]
 800250c:	6909      	ldr	r1, [r1, #16]
 800250e:	3301      	adds	r3, #1
 8002510:	eba5 0901 	sub.w	r9, r5, r1
 8002514:	6965      	ldr	r5, [r4, #20]
 8002516:	444b      	add	r3, r9
 8002518:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800251c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002520:	106d      	asrs	r5, r5, #1
 8002522:	429d      	cmp	r5, r3
 8002524:	bf38      	it	cc
 8002526:	461d      	movcc	r5, r3
 8002528:	0553      	lsls	r3, r2, #21
 800252a:	d531      	bpl.n	8002590 <__ssputs_r+0xa0>
 800252c:	4629      	mov	r1, r5
 800252e:	f000 fb6f 	bl	8002c10 <_malloc_r>
 8002532:	4606      	mov	r6, r0
 8002534:	b950      	cbnz	r0, 800254c <__ssputs_r+0x5c>
 8002536:	230c      	movs	r3, #12
 8002538:	f04f 30ff 	mov.w	r0, #4294967295
 800253c:	f8ca 3000 	str.w	r3, [sl]
 8002540:	89a3      	ldrh	r3, [r4, #12]
 8002542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002546:	81a3      	strh	r3, [r4, #12]
 8002548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800254c:	464a      	mov	r2, r9
 800254e:	6921      	ldr	r1, [r4, #16]
 8002550:	f000 face 	bl	8002af0 <memcpy>
 8002554:	89a3      	ldrh	r3, [r4, #12]
 8002556:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800255a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800255e:	81a3      	strh	r3, [r4, #12]
 8002560:	6126      	str	r6, [r4, #16]
 8002562:	444e      	add	r6, r9
 8002564:	6026      	str	r6, [r4, #0]
 8002566:	463e      	mov	r6, r7
 8002568:	6165      	str	r5, [r4, #20]
 800256a:	eba5 0509 	sub.w	r5, r5, r9
 800256e:	60a5      	str	r5, [r4, #8]
 8002570:	42be      	cmp	r6, r7
 8002572:	d900      	bls.n	8002576 <__ssputs_r+0x86>
 8002574:	463e      	mov	r6, r7
 8002576:	4632      	mov	r2, r6
 8002578:	4641      	mov	r1, r8
 800257a:	6820      	ldr	r0, [r4, #0]
 800257c:	f000 fac6 	bl	8002b0c <memmove>
 8002580:	68a3      	ldr	r3, [r4, #8]
 8002582:	2000      	movs	r0, #0
 8002584:	1b9b      	subs	r3, r3, r6
 8002586:	60a3      	str	r3, [r4, #8]
 8002588:	6823      	ldr	r3, [r4, #0]
 800258a:	4433      	add	r3, r6
 800258c:	6023      	str	r3, [r4, #0]
 800258e:	e7db      	b.n	8002548 <__ssputs_r+0x58>
 8002590:	462a      	mov	r2, r5
 8002592:	f000 fbb1 	bl	8002cf8 <_realloc_r>
 8002596:	4606      	mov	r6, r0
 8002598:	2800      	cmp	r0, #0
 800259a:	d1e1      	bne.n	8002560 <__ssputs_r+0x70>
 800259c:	4650      	mov	r0, sl
 800259e:	6921      	ldr	r1, [r4, #16]
 80025a0:	f000 face 	bl	8002b40 <_free_r>
 80025a4:	e7c7      	b.n	8002536 <__ssputs_r+0x46>
	...

080025a8 <_svfiprintf_r>:
 80025a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025ac:	4698      	mov	r8, r3
 80025ae:	898b      	ldrh	r3, [r1, #12]
 80025b0:	4607      	mov	r7, r0
 80025b2:	061b      	lsls	r3, r3, #24
 80025b4:	460d      	mov	r5, r1
 80025b6:	4614      	mov	r4, r2
 80025b8:	b09d      	sub	sp, #116	; 0x74
 80025ba:	d50e      	bpl.n	80025da <_svfiprintf_r+0x32>
 80025bc:	690b      	ldr	r3, [r1, #16]
 80025be:	b963      	cbnz	r3, 80025da <_svfiprintf_r+0x32>
 80025c0:	2140      	movs	r1, #64	; 0x40
 80025c2:	f000 fb25 	bl	8002c10 <_malloc_r>
 80025c6:	6028      	str	r0, [r5, #0]
 80025c8:	6128      	str	r0, [r5, #16]
 80025ca:	b920      	cbnz	r0, 80025d6 <_svfiprintf_r+0x2e>
 80025cc:	230c      	movs	r3, #12
 80025ce:	603b      	str	r3, [r7, #0]
 80025d0:	f04f 30ff 	mov.w	r0, #4294967295
 80025d4:	e0d1      	b.n	800277a <_svfiprintf_r+0x1d2>
 80025d6:	2340      	movs	r3, #64	; 0x40
 80025d8:	616b      	str	r3, [r5, #20]
 80025da:	2300      	movs	r3, #0
 80025dc:	9309      	str	r3, [sp, #36]	; 0x24
 80025de:	2320      	movs	r3, #32
 80025e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80025e4:	2330      	movs	r3, #48	; 0x30
 80025e6:	f04f 0901 	mov.w	r9, #1
 80025ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80025ee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002794 <_svfiprintf_r+0x1ec>
 80025f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80025f6:	4623      	mov	r3, r4
 80025f8:	469a      	mov	sl, r3
 80025fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80025fe:	b10a      	cbz	r2, 8002604 <_svfiprintf_r+0x5c>
 8002600:	2a25      	cmp	r2, #37	; 0x25
 8002602:	d1f9      	bne.n	80025f8 <_svfiprintf_r+0x50>
 8002604:	ebba 0b04 	subs.w	fp, sl, r4
 8002608:	d00b      	beq.n	8002622 <_svfiprintf_r+0x7a>
 800260a:	465b      	mov	r3, fp
 800260c:	4622      	mov	r2, r4
 800260e:	4629      	mov	r1, r5
 8002610:	4638      	mov	r0, r7
 8002612:	f7ff ff6d 	bl	80024f0 <__ssputs_r>
 8002616:	3001      	adds	r0, #1
 8002618:	f000 80aa 	beq.w	8002770 <_svfiprintf_r+0x1c8>
 800261c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800261e:	445a      	add	r2, fp
 8002620:	9209      	str	r2, [sp, #36]	; 0x24
 8002622:	f89a 3000 	ldrb.w	r3, [sl]
 8002626:	2b00      	cmp	r3, #0
 8002628:	f000 80a2 	beq.w	8002770 <_svfiprintf_r+0x1c8>
 800262c:	2300      	movs	r3, #0
 800262e:	f04f 32ff 	mov.w	r2, #4294967295
 8002632:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002636:	f10a 0a01 	add.w	sl, sl, #1
 800263a:	9304      	str	r3, [sp, #16]
 800263c:	9307      	str	r3, [sp, #28]
 800263e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002642:	931a      	str	r3, [sp, #104]	; 0x68
 8002644:	4654      	mov	r4, sl
 8002646:	2205      	movs	r2, #5
 8002648:	f814 1b01 	ldrb.w	r1, [r4], #1
 800264c:	4851      	ldr	r0, [pc, #324]	; (8002794 <_svfiprintf_r+0x1ec>)
 800264e:	f000 fa41 	bl	8002ad4 <memchr>
 8002652:	9a04      	ldr	r2, [sp, #16]
 8002654:	b9d8      	cbnz	r0, 800268e <_svfiprintf_r+0xe6>
 8002656:	06d0      	lsls	r0, r2, #27
 8002658:	bf44      	itt	mi
 800265a:	2320      	movmi	r3, #32
 800265c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002660:	0711      	lsls	r1, r2, #28
 8002662:	bf44      	itt	mi
 8002664:	232b      	movmi	r3, #43	; 0x2b
 8002666:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800266a:	f89a 3000 	ldrb.w	r3, [sl]
 800266e:	2b2a      	cmp	r3, #42	; 0x2a
 8002670:	d015      	beq.n	800269e <_svfiprintf_r+0xf6>
 8002672:	4654      	mov	r4, sl
 8002674:	2000      	movs	r0, #0
 8002676:	f04f 0c0a 	mov.w	ip, #10
 800267a:	9a07      	ldr	r2, [sp, #28]
 800267c:	4621      	mov	r1, r4
 800267e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002682:	3b30      	subs	r3, #48	; 0x30
 8002684:	2b09      	cmp	r3, #9
 8002686:	d94e      	bls.n	8002726 <_svfiprintf_r+0x17e>
 8002688:	b1b0      	cbz	r0, 80026b8 <_svfiprintf_r+0x110>
 800268a:	9207      	str	r2, [sp, #28]
 800268c:	e014      	b.n	80026b8 <_svfiprintf_r+0x110>
 800268e:	eba0 0308 	sub.w	r3, r0, r8
 8002692:	fa09 f303 	lsl.w	r3, r9, r3
 8002696:	4313      	orrs	r3, r2
 8002698:	46a2      	mov	sl, r4
 800269a:	9304      	str	r3, [sp, #16]
 800269c:	e7d2      	b.n	8002644 <_svfiprintf_r+0x9c>
 800269e:	9b03      	ldr	r3, [sp, #12]
 80026a0:	1d19      	adds	r1, r3, #4
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	9103      	str	r1, [sp, #12]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	bfbb      	ittet	lt
 80026aa:	425b      	neglt	r3, r3
 80026ac:	f042 0202 	orrlt.w	r2, r2, #2
 80026b0:	9307      	strge	r3, [sp, #28]
 80026b2:	9307      	strlt	r3, [sp, #28]
 80026b4:	bfb8      	it	lt
 80026b6:	9204      	strlt	r2, [sp, #16]
 80026b8:	7823      	ldrb	r3, [r4, #0]
 80026ba:	2b2e      	cmp	r3, #46	; 0x2e
 80026bc:	d10c      	bne.n	80026d8 <_svfiprintf_r+0x130>
 80026be:	7863      	ldrb	r3, [r4, #1]
 80026c0:	2b2a      	cmp	r3, #42	; 0x2a
 80026c2:	d135      	bne.n	8002730 <_svfiprintf_r+0x188>
 80026c4:	9b03      	ldr	r3, [sp, #12]
 80026c6:	3402      	adds	r4, #2
 80026c8:	1d1a      	adds	r2, r3, #4
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	9203      	str	r2, [sp, #12]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	bfb8      	it	lt
 80026d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80026d6:	9305      	str	r3, [sp, #20]
 80026d8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002798 <_svfiprintf_r+0x1f0>
 80026dc:	2203      	movs	r2, #3
 80026de:	4650      	mov	r0, sl
 80026e0:	7821      	ldrb	r1, [r4, #0]
 80026e2:	f000 f9f7 	bl	8002ad4 <memchr>
 80026e6:	b140      	cbz	r0, 80026fa <_svfiprintf_r+0x152>
 80026e8:	2340      	movs	r3, #64	; 0x40
 80026ea:	eba0 000a 	sub.w	r0, r0, sl
 80026ee:	fa03 f000 	lsl.w	r0, r3, r0
 80026f2:	9b04      	ldr	r3, [sp, #16]
 80026f4:	3401      	adds	r4, #1
 80026f6:	4303      	orrs	r3, r0
 80026f8:	9304      	str	r3, [sp, #16]
 80026fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80026fe:	2206      	movs	r2, #6
 8002700:	4826      	ldr	r0, [pc, #152]	; (800279c <_svfiprintf_r+0x1f4>)
 8002702:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002706:	f000 f9e5 	bl	8002ad4 <memchr>
 800270a:	2800      	cmp	r0, #0
 800270c:	d038      	beq.n	8002780 <_svfiprintf_r+0x1d8>
 800270e:	4b24      	ldr	r3, [pc, #144]	; (80027a0 <_svfiprintf_r+0x1f8>)
 8002710:	bb1b      	cbnz	r3, 800275a <_svfiprintf_r+0x1b2>
 8002712:	9b03      	ldr	r3, [sp, #12]
 8002714:	3307      	adds	r3, #7
 8002716:	f023 0307 	bic.w	r3, r3, #7
 800271a:	3308      	adds	r3, #8
 800271c:	9303      	str	r3, [sp, #12]
 800271e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002720:	4433      	add	r3, r6
 8002722:	9309      	str	r3, [sp, #36]	; 0x24
 8002724:	e767      	b.n	80025f6 <_svfiprintf_r+0x4e>
 8002726:	460c      	mov	r4, r1
 8002728:	2001      	movs	r0, #1
 800272a:	fb0c 3202 	mla	r2, ip, r2, r3
 800272e:	e7a5      	b.n	800267c <_svfiprintf_r+0xd4>
 8002730:	2300      	movs	r3, #0
 8002732:	f04f 0c0a 	mov.w	ip, #10
 8002736:	4619      	mov	r1, r3
 8002738:	3401      	adds	r4, #1
 800273a:	9305      	str	r3, [sp, #20]
 800273c:	4620      	mov	r0, r4
 800273e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002742:	3a30      	subs	r2, #48	; 0x30
 8002744:	2a09      	cmp	r2, #9
 8002746:	d903      	bls.n	8002750 <_svfiprintf_r+0x1a8>
 8002748:	2b00      	cmp	r3, #0
 800274a:	d0c5      	beq.n	80026d8 <_svfiprintf_r+0x130>
 800274c:	9105      	str	r1, [sp, #20]
 800274e:	e7c3      	b.n	80026d8 <_svfiprintf_r+0x130>
 8002750:	4604      	mov	r4, r0
 8002752:	2301      	movs	r3, #1
 8002754:	fb0c 2101 	mla	r1, ip, r1, r2
 8002758:	e7f0      	b.n	800273c <_svfiprintf_r+0x194>
 800275a:	ab03      	add	r3, sp, #12
 800275c:	9300      	str	r3, [sp, #0]
 800275e:	462a      	mov	r2, r5
 8002760:	4638      	mov	r0, r7
 8002762:	4b10      	ldr	r3, [pc, #64]	; (80027a4 <_svfiprintf_r+0x1fc>)
 8002764:	a904      	add	r1, sp, #16
 8002766:	f3af 8000 	nop.w
 800276a:	1c42      	adds	r2, r0, #1
 800276c:	4606      	mov	r6, r0
 800276e:	d1d6      	bne.n	800271e <_svfiprintf_r+0x176>
 8002770:	89ab      	ldrh	r3, [r5, #12]
 8002772:	065b      	lsls	r3, r3, #25
 8002774:	f53f af2c 	bmi.w	80025d0 <_svfiprintf_r+0x28>
 8002778:	9809      	ldr	r0, [sp, #36]	; 0x24
 800277a:	b01d      	add	sp, #116	; 0x74
 800277c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002780:	ab03      	add	r3, sp, #12
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	462a      	mov	r2, r5
 8002786:	4638      	mov	r0, r7
 8002788:	4b06      	ldr	r3, [pc, #24]	; (80027a4 <_svfiprintf_r+0x1fc>)
 800278a:	a904      	add	r1, sp, #16
 800278c:	f000 f87c 	bl	8002888 <_printf_i>
 8002790:	e7eb      	b.n	800276a <_svfiprintf_r+0x1c2>
 8002792:	bf00      	nop
 8002794:	08002e04 	.word	0x08002e04
 8002798:	08002e0a 	.word	0x08002e0a
 800279c:	08002e0e 	.word	0x08002e0e
 80027a0:	00000000 	.word	0x00000000
 80027a4:	080024f1 	.word	0x080024f1

080027a8 <_printf_common>:
 80027a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027ac:	4616      	mov	r6, r2
 80027ae:	4699      	mov	r9, r3
 80027b0:	688a      	ldr	r2, [r1, #8]
 80027b2:	690b      	ldr	r3, [r1, #16]
 80027b4:	4607      	mov	r7, r0
 80027b6:	4293      	cmp	r3, r2
 80027b8:	bfb8      	it	lt
 80027ba:	4613      	movlt	r3, r2
 80027bc:	6033      	str	r3, [r6, #0]
 80027be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80027c2:	460c      	mov	r4, r1
 80027c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80027c8:	b10a      	cbz	r2, 80027ce <_printf_common+0x26>
 80027ca:	3301      	adds	r3, #1
 80027cc:	6033      	str	r3, [r6, #0]
 80027ce:	6823      	ldr	r3, [r4, #0]
 80027d0:	0699      	lsls	r1, r3, #26
 80027d2:	bf42      	ittt	mi
 80027d4:	6833      	ldrmi	r3, [r6, #0]
 80027d6:	3302      	addmi	r3, #2
 80027d8:	6033      	strmi	r3, [r6, #0]
 80027da:	6825      	ldr	r5, [r4, #0]
 80027dc:	f015 0506 	ands.w	r5, r5, #6
 80027e0:	d106      	bne.n	80027f0 <_printf_common+0x48>
 80027e2:	f104 0a19 	add.w	sl, r4, #25
 80027e6:	68e3      	ldr	r3, [r4, #12]
 80027e8:	6832      	ldr	r2, [r6, #0]
 80027ea:	1a9b      	subs	r3, r3, r2
 80027ec:	42ab      	cmp	r3, r5
 80027ee:	dc28      	bgt.n	8002842 <_printf_common+0x9a>
 80027f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80027f4:	1e13      	subs	r3, r2, #0
 80027f6:	6822      	ldr	r2, [r4, #0]
 80027f8:	bf18      	it	ne
 80027fa:	2301      	movne	r3, #1
 80027fc:	0692      	lsls	r2, r2, #26
 80027fe:	d42d      	bmi.n	800285c <_printf_common+0xb4>
 8002800:	4649      	mov	r1, r9
 8002802:	4638      	mov	r0, r7
 8002804:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002808:	47c0      	blx	r8
 800280a:	3001      	adds	r0, #1
 800280c:	d020      	beq.n	8002850 <_printf_common+0xa8>
 800280e:	6823      	ldr	r3, [r4, #0]
 8002810:	68e5      	ldr	r5, [r4, #12]
 8002812:	f003 0306 	and.w	r3, r3, #6
 8002816:	2b04      	cmp	r3, #4
 8002818:	bf18      	it	ne
 800281a:	2500      	movne	r5, #0
 800281c:	6832      	ldr	r2, [r6, #0]
 800281e:	f04f 0600 	mov.w	r6, #0
 8002822:	68a3      	ldr	r3, [r4, #8]
 8002824:	bf08      	it	eq
 8002826:	1aad      	subeq	r5, r5, r2
 8002828:	6922      	ldr	r2, [r4, #16]
 800282a:	bf08      	it	eq
 800282c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002830:	4293      	cmp	r3, r2
 8002832:	bfc4      	itt	gt
 8002834:	1a9b      	subgt	r3, r3, r2
 8002836:	18ed      	addgt	r5, r5, r3
 8002838:	341a      	adds	r4, #26
 800283a:	42b5      	cmp	r5, r6
 800283c:	d11a      	bne.n	8002874 <_printf_common+0xcc>
 800283e:	2000      	movs	r0, #0
 8002840:	e008      	b.n	8002854 <_printf_common+0xac>
 8002842:	2301      	movs	r3, #1
 8002844:	4652      	mov	r2, sl
 8002846:	4649      	mov	r1, r9
 8002848:	4638      	mov	r0, r7
 800284a:	47c0      	blx	r8
 800284c:	3001      	adds	r0, #1
 800284e:	d103      	bne.n	8002858 <_printf_common+0xb0>
 8002850:	f04f 30ff 	mov.w	r0, #4294967295
 8002854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002858:	3501      	adds	r5, #1
 800285a:	e7c4      	b.n	80027e6 <_printf_common+0x3e>
 800285c:	2030      	movs	r0, #48	; 0x30
 800285e:	18e1      	adds	r1, r4, r3
 8002860:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002864:	1c5a      	adds	r2, r3, #1
 8002866:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800286a:	4422      	add	r2, r4
 800286c:	3302      	adds	r3, #2
 800286e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002872:	e7c5      	b.n	8002800 <_printf_common+0x58>
 8002874:	2301      	movs	r3, #1
 8002876:	4622      	mov	r2, r4
 8002878:	4649      	mov	r1, r9
 800287a:	4638      	mov	r0, r7
 800287c:	47c0      	blx	r8
 800287e:	3001      	adds	r0, #1
 8002880:	d0e6      	beq.n	8002850 <_printf_common+0xa8>
 8002882:	3601      	adds	r6, #1
 8002884:	e7d9      	b.n	800283a <_printf_common+0x92>
	...

08002888 <_printf_i>:
 8002888:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800288c:	7e0f      	ldrb	r7, [r1, #24]
 800288e:	4691      	mov	r9, r2
 8002890:	2f78      	cmp	r7, #120	; 0x78
 8002892:	4680      	mov	r8, r0
 8002894:	460c      	mov	r4, r1
 8002896:	469a      	mov	sl, r3
 8002898:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800289a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800289e:	d807      	bhi.n	80028b0 <_printf_i+0x28>
 80028a0:	2f62      	cmp	r7, #98	; 0x62
 80028a2:	d80a      	bhi.n	80028ba <_printf_i+0x32>
 80028a4:	2f00      	cmp	r7, #0
 80028a6:	f000 80d9 	beq.w	8002a5c <_printf_i+0x1d4>
 80028aa:	2f58      	cmp	r7, #88	; 0x58
 80028ac:	f000 80a4 	beq.w	80029f8 <_printf_i+0x170>
 80028b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80028b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80028b8:	e03a      	b.n	8002930 <_printf_i+0xa8>
 80028ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80028be:	2b15      	cmp	r3, #21
 80028c0:	d8f6      	bhi.n	80028b0 <_printf_i+0x28>
 80028c2:	a101      	add	r1, pc, #4	; (adr r1, 80028c8 <_printf_i+0x40>)
 80028c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80028c8:	08002921 	.word	0x08002921
 80028cc:	08002935 	.word	0x08002935
 80028d0:	080028b1 	.word	0x080028b1
 80028d4:	080028b1 	.word	0x080028b1
 80028d8:	080028b1 	.word	0x080028b1
 80028dc:	080028b1 	.word	0x080028b1
 80028e0:	08002935 	.word	0x08002935
 80028e4:	080028b1 	.word	0x080028b1
 80028e8:	080028b1 	.word	0x080028b1
 80028ec:	080028b1 	.word	0x080028b1
 80028f0:	080028b1 	.word	0x080028b1
 80028f4:	08002a43 	.word	0x08002a43
 80028f8:	08002965 	.word	0x08002965
 80028fc:	08002a25 	.word	0x08002a25
 8002900:	080028b1 	.word	0x080028b1
 8002904:	080028b1 	.word	0x080028b1
 8002908:	08002a65 	.word	0x08002a65
 800290c:	080028b1 	.word	0x080028b1
 8002910:	08002965 	.word	0x08002965
 8002914:	080028b1 	.word	0x080028b1
 8002918:	080028b1 	.word	0x080028b1
 800291c:	08002a2d 	.word	0x08002a2d
 8002920:	682b      	ldr	r3, [r5, #0]
 8002922:	1d1a      	adds	r2, r3, #4
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	602a      	str	r2, [r5, #0]
 8002928:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800292c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002930:	2301      	movs	r3, #1
 8002932:	e0a4      	b.n	8002a7e <_printf_i+0x1f6>
 8002934:	6820      	ldr	r0, [r4, #0]
 8002936:	6829      	ldr	r1, [r5, #0]
 8002938:	0606      	lsls	r6, r0, #24
 800293a:	f101 0304 	add.w	r3, r1, #4
 800293e:	d50a      	bpl.n	8002956 <_printf_i+0xce>
 8002940:	680e      	ldr	r6, [r1, #0]
 8002942:	602b      	str	r3, [r5, #0]
 8002944:	2e00      	cmp	r6, #0
 8002946:	da03      	bge.n	8002950 <_printf_i+0xc8>
 8002948:	232d      	movs	r3, #45	; 0x2d
 800294a:	4276      	negs	r6, r6
 800294c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002950:	230a      	movs	r3, #10
 8002952:	485e      	ldr	r0, [pc, #376]	; (8002acc <_printf_i+0x244>)
 8002954:	e019      	b.n	800298a <_printf_i+0x102>
 8002956:	680e      	ldr	r6, [r1, #0]
 8002958:	f010 0f40 	tst.w	r0, #64	; 0x40
 800295c:	602b      	str	r3, [r5, #0]
 800295e:	bf18      	it	ne
 8002960:	b236      	sxthne	r6, r6
 8002962:	e7ef      	b.n	8002944 <_printf_i+0xbc>
 8002964:	682b      	ldr	r3, [r5, #0]
 8002966:	6820      	ldr	r0, [r4, #0]
 8002968:	1d19      	adds	r1, r3, #4
 800296a:	6029      	str	r1, [r5, #0]
 800296c:	0601      	lsls	r1, r0, #24
 800296e:	d501      	bpl.n	8002974 <_printf_i+0xec>
 8002970:	681e      	ldr	r6, [r3, #0]
 8002972:	e002      	b.n	800297a <_printf_i+0xf2>
 8002974:	0646      	lsls	r6, r0, #25
 8002976:	d5fb      	bpl.n	8002970 <_printf_i+0xe8>
 8002978:	881e      	ldrh	r6, [r3, #0]
 800297a:	2f6f      	cmp	r7, #111	; 0x6f
 800297c:	bf0c      	ite	eq
 800297e:	2308      	moveq	r3, #8
 8002980:	230a      	movne	r3, #10
 8002982:	4852      	ldr	r0, [pc, #328]	; (8002acc <_printf_i+0x244>)
 8002984:	2100      	movs	r1, #0
 8002986:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800298a:	6865      	ldr	r5, [r4, #4]
 800298c:	2d00      	cmp	r5, #0
 800298e:	bfa8      	it	ge
 8002990:	6821      	ldrge	r1, [r4, #0]
 8002992:	60a5      	str	r5, [r4, #8]
 8002994:	bfa4      	itt	ge
 8002996:	f021 0104 	bicge.w	r1, r1, #4
 800299a:	6021      	strge	r1, [r4, #0]
 800299c:	b90e      	cbnz	r6, 80029a2 <_printf_i+0x11a>
 800299e:	2d00      	cmp	r5, #0
 80029a0:	d04d      	beq.n	8002a3e <_printf_i+0x1b6>
 80029a2:	4615      	mov	r5, r2
 80029a4:	fbb6 f1f3 	udiv	r1, r6, r3
 80029a8:	fb03 6711 	mls	r7, r3, r1, r6
 80029ac:	5dc7      	ldrb	r7, [r0, r7]
 80029ae:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80029b2:	4637      	mov	r7, r6
 80029b4:	42bb      	cmp	r3, r7
 80029b6:	460e      	mov	r6, r1
 80029b8:	d9f4      	bls.n	80029a4 <_printf_i+0x11c>
 80029ba:	2b08      	cmp	r3, #8
 80029bc:	d10b      	bne.n	80029d6 <_printf_i+0x14e>
 80029be:	6823      	ldr	r3, [r4, #0]
 80029c0:	07de      	lsls	r6, r3, #31
 80029c2:	d508      	bpl.n	80029d6 <_printf_i+0x14e>
 80029c4:	6923      	ldr	r3, [r4, #16]
 80029c6:	6861      	ldr	r1, [r4, #4]
 80029c8:	4299      	cmp	r1, r3
 80029ca:	bfde      	ittt	le
 80029cc:	2330      	movle	r3, #48	; 0x30
 80029ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 80029d2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80029d6:	1b52      	subs	r2, r2, r5
 80029d8:	6122      	str	r2, [r4, #16]
 80029da:	464b      	mov	r3, r9
 80029dc:	4621      	mov	r1, r4
 80029de:	4640      	mov	r0, r8
 80029e0:	f8cd a000 	str.w	sl, [sp]
 80029e4:	aa03      	add	r2, sp, #12
 80029e6:	f7ff fedf 	bl	80027a8 <_printf_common>
 80029ea:	3001      	adds	r0, #1
 80029ec:	d14c      	bne.n	8002a88 <_printf_i+0x200>
 80029ee:	f04f 30ff 	mov.w	r0, #4294967295
 80029f2:	b004      	add	sp, #16
 80029f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029f8:	4834      	ldr	r0, [pc, #208]	; (8002acc <_printf_i+0x244>)
 80029fa:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80029fe:	6829      	ldr	r1, [r5, #0]
 8002a00:	6823      	ldr	r3, [r4, #0]
 8002a02:	f851 6b04 	ldr.w	r6, [r1], #4
 8002a06:	6029      	str	r1, [r5, #0]
 8002a08:	061d      	lsls	r5, r3, #24
 8002a0a:	d514      	bpl.n	8002a36 <_printf_i+0x1ae>
 8002a0c:	07df      	lsls	r7, r3, #31
 8002a0e:	bf44      	itt	mi
 8002a10:	f043 0320 	orrmi.w	r3, r3, #32
 8002a14:	6023      	strmi	r3, [r4, #0]
 8002a16:	b91e      	cbnz	r6, 8002a20 <_printf_i+0x198>
 8002a18:	6823      	ldr	r3, [r4, #0]
 8002a1a:	f023 0320 	bic.w	r3, r3, #32
 8002a1e:	6023      	str	r3, [r4, #0]
 8002a20:	2310      	movs	r3, #16
 8002a22:	e7af      	b.n	8002984 <_printf_i+0xfc>
 8002a24:	6823      	ldr	r3, [r4, #0]
 8002a26:	f043 0320 	orr.w	r3, r3, #32
 8002a2a:	6023      	str	r3, [r4, #0]
 8002a2c:	2378      	movs	r3, #120	; 0x78
 8002a2e:	4828      	ldr	r0, [pc, #160]	; (8002ad0 <_printf_i+0x248>)
 8002a30:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002a34:	e7e3      	b.n	80029fe <_printf_i+0x176>
 8002a36:	0659      	lsls	r1, r3, #25
 8002a38:	bf48      	it	mi
 8002a3a:	b2b6      	uxthmi	r6, r6
 8002a3c:	e7e6      	b.n	8002a0c <_printf_i+0x184>
 8002a3e:	4615      	mov	r5, r2
 8002a40:	e7bb      	b.n	80029ba <_printf_i+0x132>
 8002a42:	682b      	ldr	r3, [r5, #0]
 8002a44:	6826      	ldr	r6, [r4, #0]
 8002a46:	1d18      	adds	r0, r3, #4
 8002a48:	6961      	ldr	r1, [r4, #20]
 8002a4a:	6028      	str	r0, [r5, #0]
 8002a4c:	0635      	lsls	r5, r6, #24
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	d501      	bpl.n	8002a56 <_printf_i+0x1ce>
 8002a52:	6019      	str	r1, [r3, #0]
 8002a54:	e002      	b.n	8002a5c <_printf_i+0x1d4>
 8002a56:	0670      	lsls	r0, r6, #25
 8002a58:	d5fb      	bpl.n	8002a52 <_printf_i+0x1ca>
 8002a5a:	8019      	strh	r1, [r3, #0]
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	4615      	mov	r5, r2
 8002a60:	6123      	str	r3, [r4, #16]
 8002a62:	e7ba      	b.n	80029da <_printf_i+0x152>
 8002a64:	682b      	ldr	r3, [r5, #0]
 8002a66:	2100      	movs	r1, #0
 8002a68:	1d1a      	adds	r2, r3, #4
 8002a6a:	602a      	str	r2, [r5, #0]
 8002a6c:	681d      	ldr	r5, [r3, #0]
 8002a6e:	6862      	ldr	r2, [r4, #4]
 8002a70:	4628      	mov	r0, r5
 8002a72:	f000 f82f 	bl	8002ad4 <memchr>
 8002a76:	b108      	cbz	r0, 8002a7c <_printf_i+0x1f4>
 8002a78:	1b40      	subs	r0, r0, r5
 8002a7a:	6060      	str	r0, [r4, #4]
 8002a7c:	6863      	ldr	r3, [r4, #4]
 8002a7e:	6123      	str	r3, [r4, #16]
 8002a80:	2300      	movs	r3, #0
 8002a82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a86:	e7a8      	b.n	80029da <_printf_i+0x152>
 8002a88:	462a      	mov	r2, r5
 8002a8a:	4649      	mov	r1, r9
 8002a8c:	4640      	mov	r0, r8
 8002a8e:	6923      	ldr	r3, [r4, #16]
 8002a90:	47d0      	blx	sl
 8002a92:	3001      	adds	r0, #1
 8002a94:	d0ab      	beq.n	80029ee <_printf_i+0x166>
 8002a96:	6823      	ldr	r3, [r4, #0]
 8002a98:	079b      	lsls	r3, r3, #30
 8002a9a:	d413      	bmi.n	8002ac4 <_printf_i+0x23c>
 8002a9c:	68e0      	ldr	r0, [r4, #12]
 8002a9e:	9b03      	ldr	r3, [sp, #12]
 8002aa0:	4298      	cmp	r0, r3
 8002aa2:	bfb8      	it	lt
 8002aa4:	4618      	movlt	r0, r3
 8002aa6:	e7a4      	b.n	80029f2 <_printf_i+0x16a>
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	4632      	mov	r2, r6
 8002aac:	4649      	mov	r1, r9
 8002aae:	4640      	mov	r0, r8
 8002ab0:	47d0      	blx	sl
 8002ab2:	3001      	adds	r0, #1
 8002ab4:	d09b      	beq.n	80029ee <_printf_i+0x166>
 8002ab6:	3501      	adds	r5, #1
 8002ab8:	68e3      	ldr	r3, [r4, #12]
 8002aba:	9903      	ldr	r1, [sp, #12]
 8002abc:	1a5b      	subs	r3, r3, r1
 8002abe:	42ab      	cmp	r3, r5
 8002ac0:	dcf2      	bgt.n	8002aa8 <_printf_i+0x220>
 8002ac2:	e7eb      	b.n	8002a9c <_printf_i+0x214>
 8002ac4:	2500      	movs	r5, #0
 8002ac6:	f104 0619 	add.w	r6, r4, #25
 8002aca:	e7f5      	b.n	8002ab8 <_printf_i+0x230>
 8002acc:	08002e15 	.word	0x08002e15
 8002ad0:	08002e26 	.word	0x08002e26

08002ad4 <memchr>:
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	b510      	push	{r4, lr}
 8002ad8:	b2c9      	uxtb	r1, r1
 8002ada:	4402      	add	r2, r0
 8002adc:	4293      	cmp	r3, r2
 8002ade:	4618      	mov	r0, r3
 8002ae0:	d101      	bne.n	8002ae6 <memchr+0x12>
 8002ae2:	2000      	movs	r0, #0
 8002ae4:	e003      	b.n	8002aee <memchr+0x1a>
 8002ae6:	7804      	ldrb	r4, [r0, #0]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	428c      	cmp	r4, r1
 8002aec:	d1f6      	bne.n	8002adc <memchr+0x8>
 8002aee:	bd10      	pop	{r4, pc}

08002af0 <memcpy>:
 8002af0:	440a      	add	r2, r1
 8002af2:	4291      	cmp	r1, r2
 8002af4:	f100 33ff 	add.w	r3, r0, #4294967295
 8002af8:	d100      	bne.n	8002afc <memcpy+0xc>
 8002afa:	4770      	bx	lr
 8002afc:	b510      	push	{r4, lr}
 8002afe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b02:	4291      	cmp	r1, r2
 8002b04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002b08:	d1f9      	bne.n	8002afe <memcpy+0xe>
 8002b0a:	bd10      	pop	{r4, pc}

08002b0c <memmove>:
 8002b0c:	4288      	cmp	r0, r1
 8002b0e:	b510      	push	{r4, lr}
 8002b10:	eb01 0402 	add.w	r4, r1, r2
 8002b14:	d902      	bls.n	8002b1c <memmove+0x10>
 8002b16:	4284      	cmp	r4, r0
 8002b18:	4623      	mov	r3, r4
 8002b1a:	d807      	bhi.n	8002b2c <memmove+0x20>
 8002b1c:	1e43      	subs	r3, r0, #1
 8002b1e:	42a1      	cmp	r1, r4
 8002b20:	d008      	beq.n	8002b34 <memmove+0x28>
 8002b22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002b26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002b2a:	e7f8      	b.n	8002b1e <memmove+0x12>
 8002b2c:	4601      	mov	r1, r0
 8002b2e:	4402      	add	r2, r0
 8002b30:	428a      	cmp	r2, r1
 8002b32:	d100      	bne.n	8002b36 <memmove+0x2a>
 8002b34:	bd10      	pop	{r4, pc}
 8002b36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002b3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002b3e:	e7f7      	b.n	8002b30 <memmove+0x24>

08002b40 <_free_r>:
 8002b40:	b538      	push	{r3, r4, r5, lr}
 8002b42:	4605      	mov	r5, r0
 8002b44:	2900      	cmp	r1, #0
 8002b46:	d040      	beq.n	8002bca <_free_r+0x8a>
 8002b48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b4c:	1f0c      	subs	r4, r1, #4
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	bfb8      	it	lt
 8002b52:	18e4      	addlt	r4, r4, r3
 8002b54:	f000 f910 	bl	8002d78 <__malloc_lock>
 8002b58:	4a1c      	ldr	r2, [pc, #112]	; (8002bcc <_free_r+0x8c>)
 8002b5a:	6813      	ldr	r3, [r2, #0]
 8002b5c:	b933      	cbnz	r3, 8002b6c <_free_r+0x2c>
 8002b5e:	6063      	str	r3, [r4, #4]
 8002b60:	6014      	str	r4, [r2, #0]
 8002b62:	4628      	mov	r0, r5
 8002b64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b68:	f000 b90c 	b.w	8002d84 <__malloc_unlock>
 8002b6c:	42a3      	cmp	r3, r4
 8002b6e:	d908      	bls.n	8002b82 <_free_r+0x42>
 8002b70:	6820      	ldr	r0, [r4, #0]
 8002b72:	1821      	adds	r1, r4, r0
 8002b74:	428b      	cmp	r3, r1
 8002b76:	bf01      	itttt	eq
 8002b78:	6819      	ldreq	r1, [r3, #0]
 8002b7a:	685b      	ldreq	r3, [r3, #4]
 8002b7c:	1809      	addeq	r1, r1, r0
 8002b7e:	6021      	streq	r1, [r4, #0]
 8002b80:	e7ed      	b.n	8002b5e <_free_r+0x1e>
 8002b82:	461a      	mov	r2, r3
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	b10b      	cbz	r3, 8002b8c <_free_r+0x4c>
 8002b88:	42a3      	cmp	r3, r4
 8002b8a:	d9fa      	bls.n	8002b82 <_free_r+0x42>
 8002b8c:	6811      	ldr	r1, [r2, #0]
 8002b8e:	1850      	adds	r0, r2, r1
 8002b90:	42a0      	cmp	r0, r4
 8002b92:	d10b      	bne.n	8002bac <_free_r+0x6c>
 8002b94:	6820      	ldr	r0, [r4, #0]
 8002b96:	4401      	add	r1, r0
 8002b98:	1850      	adds	r0, r2, r1
 8002b9a:	4283      	cmp	r3, r0
 8002b9c:	6011      	str	r1, [r2, #0]
 8002b9e:	d1e0      	bne.n	8002b62 <_free_r+0x22>
 8002ba0:	6818      	ldr	r0, [r3, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	4401      	add	r1, r0
 8002ba6:	6011      	str	r1, [r2, #0]
 8002ba8:	6053      	str	r3, [r2, #4]
 8002baa:	e7da      	b.n	8002b62 <_free_r+0x22>
 8002bac:	d902      	bls.n	8002bb4 <_free_r+0x74>
 8002bae:	230c      	movs	r3, #12
 8002bb0:	602b      	str	r3, [r5, #0]
 8002bb2:	e7d6      	b.n	8002b62 <_free_r+0x22>
 8002bb4:	6820      	ldr	r0, [r4, #0]
 8002bb6:	1821      	adds	r1, r4, r0
 8002bb8:	428b      	cmp	r3, r1
 8002bba:	bf01      	itttt	eq
 8002bbc:	6819      	ldreq	r1, [r3, #0]
 8002bbe:	685b      	ldreq	r3, [r3, #4]
 8002bc0:	1809      	addeq	r1, r1, r0
 8002bc2:	6021      	streq	r1, [r4, #0]
 8002bc4:	6063      	str	r3, [r4, #4]
 8002bc6:	6054      	str	r4, [r2, #4]
 8002bc8:	e7cb      	b.n	8002b62 <_free_r+0x22>
 8002bca:	bd38      	pop	{r3, r4, r5, pc}
 8002bcc:	200000e0 	.word	0x200000e0

08002bd0 <sbrk_aligned>:
 8002bd0:	b570      	push	{r4, r5, r6, lr}
 8002bd2:	4e0e      	ldr	r6, [pc, #56]	; (8002c0c <sbrk_aligned+0x3c>)
 8002bd4:	460c      	mov	r4, r1
 8002bd6:	6831      	ldr	r1, [r6, #0]
 8002bd8:	4605      	mov	r5, r0
 8002bda:	b911      	cbnz	r1, 8002be2 <sbrk_aligned+0x12>
 8002bdc:	f000 f8bc 	bl	8002d58 <_sbrk_r>
 8002be0:	6030      	str	r0, [r6, #0]
 8002be2:	4621      	mov	r1, r4
 8002be4:	4628      	mov	r0, r5
 8002be6:	f000 f8b7 	bl	8002d58 <_sbrk_r>
 8002bea:	1c43      	adds	r3, r0, #1
 8002bec:	d00a      	beq.n	8002c04 <sbrk_aligned+0x34>
 8002bee:	1cc4      	adds	r4, r0, #3
 8002bf0:	f024 0403 	bic.w	r4, r4, #3
 8002bf4:	42a0      	cmp	r0, r4
 8002bf6:	d007      	beq.n	8002c08 <sbrk_aligned+0x38>
 8002bf8:	1a21      	subs	r1, r4, r0
 8002bfa:	4628      	mov	r0, r5
 8002bfc:	f000 f8ac 	bl	8002d58 <_sbrk_r>
 8002c00:	3001      	adds	r0, #1
 8002c02:	d101      	bne.n	8002c08 <sbrk_aligned+0x38>
 8002c04:	f04f 34ff 	mov.w	r4, #4294967295
 8002c08:	4620      	mov	r0, r4
 8002c0a:	bd70      	pop	{r4, r5, r6, pc}
 8002c0c:	200000e4 	.word	0x200000e4

08002c10 <_malloc_r>:
 8002c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c14:	1ccd      	adds	r5, r1, #3
 8002c16:	f025 0503 	bic.w	r5, r5, #3
 8002c1a:	3508      	adds	r5, #8
 8002c1c:	2d0c      	cmp	r5, #12
 8002c1e:	bf38      	it	cc
 8002c20:	250c      	movcc	r5, #12
 8002c22:	2d00      	cmp	r5, #0
 8002c24:	4607      	mov	r7, r0
 8002c26:	db01      	blt.n	8002c2c <_malloc_r+0x1c>
 8002c28:	42a9      	cmp	r1, r5
 8002c2a:	d905      	bls.n	8002c38 <_malloc_r+0x28>
 8002c2c:	230c      	movs	r3, #12
 8002c2e:	2600      	movs	r6, #0
 8002c30:	603b      	str	r3, [r7, #0]
 8002c32:	4630      	mov	r0, r6
 8002c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c38:	4e2e      	ldr	r6, [pc, #184]	; (8002cf4 <_malloc_r+0xe4>)
 8002c3a:	f000 f89d 	bl	8002d78 <__malloc_lock>
 8002c3e:	6833      	ldr	r3, [r6, #0]
 8002c40:	461c      	mov	r4, r3
 8002c42:	bb34      	cbnz	r4, 8002c92 <_malloc_r+0x82>
 8002c44:	4629      	mov	r1, r5
 8002c46:	4638      	mov	r0, r7
 8002c48:	f7ff ffc2 	bl	8002bd0 <sbrk_aligned>
 8002c4c:	1c43      	adds	r3, r0, #1
 8002c4e:	4604      	mov	r4, r0
 8002c50:	d14d      	bne.n	8002cee <_malloc_r+0xde>
 8002c52:	6834      	ldr	r4, [r6, #0]
 8002c54:	4626      	mov	r6, r4
 8002c56:	2e00      	cmp	r6, #0
 8002c58:	d140      	bne.n	8002cdc <_malloc_r+0xcc>
 8002c5a:	6823      	ldr	r3, [r4, #0]
 8002c5c:	4631      	mov	r1, r6
 8002c5e:	4638      	mov	r0, r7
 8002c60:	eb04 0803 	add.w	r8, r4, r3
 8002c64:	f000 f878 	bl	8002d58 <_sbrk_r>
 8002c68:	4580      	cmp	r8, r0
 8002c6a:	d13a      	bne.n	8002ce2 <_malloc_r+0xd2>
 8002c6c:	6821      	ldr	r1, [r4, #0]
 8002c6e:	3503      	adds	r5, #3
 8002c70:	1a6d      	subs	r5, r5, r1
 8002c72:	f025 0503 	bic.w	r5, r5, #3
 8002c76:	3508      	adds	r5, #8
 8002c78:	2d0c      	cmp	r5, #12
 8002c7a:	bf38      	it	cc
 8002c7c:	250c      	movcc	r5, #12
 8002c7e:	4638      	mov	r0, r7
 8002c80:	4629      	mov	r1, r5
 8002c82:	f7ff ffa5 	bl	8002bd0 <sbrk_aligned>
 8002c86:	3001      	adds	r0, #1
 8002c88:	d02b      	beq.n	8002ce2 <_malloc_r+0xd2>
 8002c8a:	6823      	ldr	r3, [r4, #0]
 8002c8c:	442b      	add	r3, r5
 8002c8e:	6023      	str	r3, [r4, #0]
 8002c90:	e00e      	b.n	8002cb0 <_malloc_r+0xa0>
 8002c92:	6822      	ldr	r2, [r4, #0]
 8002c94:	1b52      	subs	r2, r2, r5
 8002c96:	d41e      	bmi.n	8002cd6 <_malloc_r+0xc6>
 8002c98:	2a0b      	cmp	r2, #11
 8002c9a:	d916      	bls.n	8002cca <_malloc_r+0xba>
 8002c9c:	1961      	adds	r1, r4, r5
 8002c9e:	42a3      	cmp	r3, r4
 8002ca0:	6025      	str	r5, [r4, #0]
 8002ca2:	bf18      	it	ne
 8002ca4:	6059      	strne	r1, [r3, #4]
 8002ca6:	6863      	ldr	r3, [r4, #4]
 8002ca8:	bf08      	it	eq
 8002caa:	6031      	streq	r1, [r6, #0]
 8002cac:	5162      	str	r2, [r4, r5]
 8002cae:	604b      	str	r3, [r1, #4]
 8002cb0:	4638      	mov	r0, r7
 8002cb2:	f104 060b 	add.w	r6, r4, #11
 8002cb6:	f000 f865 	bl	8002d84 <__malloc_unlock>
 8002cba:	f026 0607 	bic.w	r6, r6, #7
 8002cbe:	1d23      	adds	r3, r4, #4
 8002cc0:	1af2      	subs	r2, r6, r3
 8002cc2:	d0b6      	beq.n	8002c32 <_malloc_r+0x22>
 8002cc4:	1b9b      	subs	r3, r3, r6
 8002cc6:	50a3      	str	r3, [r4, r2]
 8002cc8:	e7b3      	b.n	8002c32 <_malloc_r+0x22>
 8002cca:	6862      	ldr	r2, [r4, #4]
 8002ccc:	42a3      	cmp	r3, r4
 8002cce:	bf0c      	ite	eq
 8002cd0:	6032      	streq	r2, [r6, #0]
 8002cd2:	605a      	strne	r2, [r3, #4]
 8002cd4:	e7ec      	b.n	8002cb0 <_malloc_r+0xa0>
 8002cd6:	4623      	mov	r3, r4
 8002cd8:	6864      	ldr	r4, [r4, #4]
 8002cda:	e7b2      	b.n	8002c42 <_malloc_r+0x32>
 8002cdc:	4634      	mov	r4, r6
 8002cde:	6876      	ldr	r6, [r6, #4]
 8002ce0:	e7b9      	b.n	8002c56 <_malloc_r+0x46>
 8002ce2:	230c      	movs	r3, #12
 8002ce4:	4638      	mov	r0, r7
 8002ce6:	603b      	str	r3, [r7, #0]
 8002ce8:	f000 f84c 	bl	8002d84 <__malloc_unlock>
 8002cec:	e7a1      	b.n	8002c32 <_malloc_r+0x22>
 8002cee:	6025      	str	r5, [r4, #0]
 8002cf0:	e7de      	b.n	8002cb0 <_malloc_r+0xa0>
 8002cf2:	bf00      	nop
 8002cf4:	200000e0 	.word	0x200000e0

08002cf8 <_realloc_r>:
 8002cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cfc:	4680      	mov	r8, r0
 8002cfe:	4614      	mov	r4, r2
 8002d00:	460e      	mov	r6, r1
 8002d02:	b921      	cbnz	r1, 8002d0e <_realloc_r+0x16>
 8002d04:	4611      	mov	r1, r2
 8002d06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002d0a:	f7ff bf81 	b.w	8002c10 <_malloc_r>
 8002d0e:	b92a      	cbnz	r2, 8002d1c <_realloc_r+0x24>
 8002d10:	f7ff ff16 	bl	8002b40 <_free_r>
 8002d14:	4625      	mov	r5, r4
 8002d16:	4628      	mov	r0, r5
 8002d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d1c:	f000 f838 	bl	8002d90 <_malloc_usable_size_r>
 8002d20:	4284      	cmp	r4, r0
 8002d22:	4607      	mov	r7, r0
 8002d24:	d802      	bhi.n	8002d2c <_realloc_r+0x34>
 8002d26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002d2a:	d812      	bhi.n	8002d52 <_realloc_r+0x5a>
 8002d2c:	4621      	mov	r1, r4
 8002d2e:	4640      	mov	r0, r8
 8002d30:	f7ff ff6e 	bl	8002c10 <_malloc_r>
 8002d34:	4605      	mov	r5, r0
 8002d36:	2800      	cmp	r0, #0
 8002d38:	d0ed      	beq.n	8002d16 <_realloc_r+0x1e>
 8002d3a:	42bc      	cmp	r4, r7
 8002d3c:	4622      	mov	r2, r4
 8002d3e:	4631      	mov	r1, r6
 8002d40:	bf28      	it	cs
 8002d42:	463a      	movcs	r2, r7
 8002d44:	f7ff fed4 	bl	8002af0 <memcpy>
 8002d48:	4631      	mov	r1, r6
 8002d4a:	4640      	mov	r0, r8
 8002d4c:	f7ff fef8 	bl	8002b40 <_free_r>
 8002d50:	e7e1      	b.n	8002d16 <_realloc_r+0x1e>
 8002d52:	4635      	mov	r5, r6
 8002d54:	e7df      	b.n	8002d16 <_realloc_r+0x1e>
	...

08002d58 <_sbrk_r>:
 8002d58:	b538      	push	{r3, r4, r5, lr}
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	4d05      	ldr	r5, [pc, #20]	; (8002d74 <_sbrk_r+0x1c>)
 8002d5e:	4604      	mov	r4, r0
 8002d60:	4608      	mov	r0, r1
 8002d62:	602b      	str	r3, [r5, #0]
 8002d64:	f7fd fcb2 	bl	80006cc <_sbrk>
 8002d68:	1c43      	adds	r3, r0, #1
 8002d6a:	d102      	bne.n	8002d72 <_sbrk_r+0x1a>
 8002d6c:	682b      	ldr	r3, [r5, #0]
 8002d6e:	b103      	cbz	r3, 8002d72 <_sbrk_r+0x1a>
 8002d70:	6023      	str	r3, [r4, #0]
 8002d72:	bd38      	pop	{r3, r4, r5, pc}
 8002d74:	200000e8 	.word	0x200000e8

08002d78 <__malloc_lock>:
 8002d78:	4801      	ldr	r0, [pc, #4]	; (8002d80 <__malloc_lock+0x8>)
 8002d7a:	f000 b811 	b.w	8002da0 <__retarget_lock_acquire_recursive>
 8002d7e:	bf00      	nop
 8002d80:	200000ec 	.word	0x200000ec

08002d84 <__malloc_unlock>:
 8002d84:	4801      	ldr	r0, [pc, #4]	; (8002d8c <__malloc_unlock+0x8>)
 8002d86:	f000 b80c 	b.w	8002da2 <__retarget_lock_release_recursive>
 8002d8a:	bf00      	nop
 8002d8c:	200000ec 	.word	0x200000ec

08002d90 <_malloc_usable_size_r>:
 8002d90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d94:	1f18      	subs	r0, r3, #4
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	bfbc      	itt	lt
 8002d9a:	580b      	ldrlt	r3, [r1, r0]
 8002d9c:	18c0      	addlt	r0, r0, r3
 8002d9e:	4770      	bx	lr

08002da0 <__retarget_lock_acquire_recursive>:
 8002da0:	4770      	bx	lr

08002da2 <__retarget_lock_release_recursive>:
 8002da2:	4770      	bx	lr

08002da4 <_init>:
 8002da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002da6:	bf00      	nop
 8002da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002daa:	bc08      	pop	{r3}
 8002dac:	469e      	mov	lr, r3
 8002dae:	4770      	bx	lr

08002db0 <_fini>:
 8002db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002db2:	bf00      	nop
 8002db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002db6:	bc08      	pop	{r3}
 8002db8:	469e      	mov	lr, r3
 8002dba:	4770      	bx	lr
